
pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000007c4  00000858  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800102  00800102  0000085a  2**0
                  ALLOC
  3 .debug_aranges 00000120  00000000  00000000  0000085a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000443  00000000  00000000  0000097a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bbe  00000000  00000000  00000dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005dd  00000000  00000000  0000197b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c5a  00000000  00000000  00001f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000320  00000000  00000000  00002bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003dc  00000000  00000000  00002ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d3  00000000  00000000  000032b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	4f c3       	rjmp	.+1694   	; 0x6a2 <__vector_1>
   4:	1a c3       	rjmp	.+1588   	; 0x63a <__vector_2>
   6:	3f c1       	rjmp	.+638    	; 0x286 <__vector_3>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	9f c3       	rjmp	.+1854   	; 0x756 <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	d5 c0       	rjmp	.+426    	; 0x1d0 <__vector_18>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e4 ec       	ldi	r30, 0xC4	; 196
  48:	f7 e0       	ldi	r31, 0x07	; 7
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a2 30       	cpi	r26, 0x02	; 2
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a2 e0       	ldi	r26, 0x02	; 2
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ad 30       	cpi	r26, 0x0D	; 13
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	07 d0       	rcall	.+14     	; 0x76 <main>
  68:	ab c3       	rjmp	.+1878   	; 0x7c0 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <init_main>:
	return 42; //http://fr.wikipedia.org/wiki/La_grande_question_sur_la_vie,_l%27univers_et_le_reste
}

void init_main(void)
{
	init_3964r();
  6c:	a3 d2       	rcall	.+1350   	; 0x5b4 <init_3964r>
	init_motor_driver(); //Attention le moteur vide le ballast avec FC mais interruption pas activée
  6e:	15 d1       	rcall	.+554    	; 0x29a <init_motor_driver>
	init_ballast_position();
  70:	d9 d0       	rcall	.+434    	; 0x224 <init_ballast_position>
	sei();
  72:	78 94       	sei
}
  74:	08 95       	ret

00000076 <main>:

#include "main.h"
#include "usart.h"

int main(void)
{
  76:	0f 93       	push	r16
  78:	1f 93       	push	r17
  7a:	df 93       	push	r29
  7c:	cf 93       	push	r28
  7e:	00 d0       	rcall	.+0      	; 0x80 <main+0xa>
  80:	0f 92       	push	r0
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
	char str_cmd[SIZE_MSG];
	unsigned int position;

	init_main();
  86:	f2 df       	rcall	.-28     	; 0x6c <init_main>

	while(1)
	{
		get_data_3964r(str_cmd);
  88:	8e 01       	movw	r16, r28
  8a:	0f 5f       	subi	r16, 0xFF	; 255
  8c:	1f 4f       	sbci	r17, 0xFF	; 255
  8e:	c8 01       	movw	r24, r16
  90:	3e d1       	rcall	.+636    	; 0x30e <get_data_3964r>

		switch(str_cmd[0])
  92:	89 81       	ldd	r24, Y+1	; 0x01
  94:	8a 34       	cpi	r24, 0x4A	; 74
  96:	71 f1       	breq	.+92     	; 0xf4 <main+0x7e>
  98:	8b 34       	cpi	r24, 0x4B	; 75
  9a:	18 f4       	brcc	.+6      	; 0xa2 <main+0x2c>
  9c:	87 34       	cpi	r24, 0x47	; 71
  9e:	b9 f7       	brne	.-18     	; 0x8e <main+0x18>
  a0:	27 c0       	rjmp	.+78     	; 0xf0 <main+0x7a>
  a2:	8b 34       	cpi	r24, 0x4B	; 75
  a4:	19 f0       	breq	.+6      	; 0xac <main+0x36>
  a6:	8d 34       	cpi	r24, 0x4D	; 77
  a8:	91 f7       	brne	.-28     	; 0x8e <main+0x18>
  aa:	11 c0       	rjmp	.+34     	; 0xce <main+0x58>
		{
			case 'K':	//Vitesse moteur 0
				if(str_cmd[2] != 0)
  ac:	8b 81       	ldd	r24, Y+3	; 0x03
  ae:	88 23       	and	r24, r24
  b0:	59 f0       	breq	.+22     	; 0xc8 <main+0x52>
				{
					if(str_cmd[1] == 0)
  b2:	8a 81       	ldd	r24, Y+2	; 0x02
  b4:	88 23       	and	r24, r24
  b6:	11 f4       	brne	.+4      	; 0xbc <main+0x46>
						rotation_motor1(CLOCKWISE);
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <main+0x48>
					else
						rotation_motor1(COUNTERCLOCKWISE);
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	cd d0       	rcall	.+410    	; 0x25a <rotation_motor1>
					
					set_speed_motor1(str_cmd[2]);
  c0:	8b 81       	ldd	r24, Y+3	; 0x03
  c2:	dd d0       	rcall	.+442    	; 0x27e <set_speed_motor1>
					enable_motor1(TRUE);		
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	01 c0       	rjmp	.+2      	; 0xca <main+0x54>
				}
				else
					enable_motor1(FALSE);
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	bb d0       	rcall	.+374    	; 0x242 <enable_motor1>
  cc:	e0 cf       	rjmp	.-64     	; 0x8e <main+0x18>
				break;

			case 'M':	//Vitesse moteur 1
				if(str_cmd[2] != 0)
  ce:	8b 81       	ldd	r24, Y+3	; 0x03
  d0:	88 23       	and	r24, r24
  d2:	59 f0       	breq	.+22     	; 0xea <main+0x74>
				{
					if(str_cmd[1] == 0)
  d4:	8a 81       	ldd	r24, Y+2	; 0x02
  d6:	88 23       	and	r24, r24
  d8:	11 f4       	brne	.+4      	; 0xde <main+0x68>
						rotation_motor2(CLOCKWISE);
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <main+0x6a>
					else
						rotation_motor2(COUNTERCLOCKWISE);
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	c2 d0       	rcall	.+388    	; 0x266 <rotation_motor2>
					
					set_speed_motor2(str_cmd[2]);
  e2:	8b 81       	ldd	r24, Y+3	; 0x03
  e4:	ce d0       	rcall	.+412    	; 0x282 <set_speed_motor2>
					enable_motor2(TRUE);
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	01 c0       	rjmp	.+2      	; 0xec <main+0x76>
				}
				else
					enable_motor2(FALSE);
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	b0 d0       	rcall	.+352    	; 0x24e <enable_motor2>
  ee:	cf cf       	rjmp	.-98     	; 0x8e <main+0x18>
				break;

			case 'G':	//Requete position ballast0

				//Uniformiser la valeur adc et external interrupt !!!
				position = get_ballast_position1();
  f0:	97 d0       	rcall	.+302    	; 0x220 <get_ballast_position1>
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <main+0x80>
				break;

			case 'J':	//Requete position ballast1

				//Uniformiser la valeur adc et external interrupt !!!
				position = get_ballast_position2();
  f4:	93 d0       	rcall	.+294    	; 0x21c <get_ballast_position2>

				str_cmd[2] = position & 0xFF00;
  f6:	1b 82       	std	Y+3, r1	; 0x03
				position >>= 8;
				str_cmd[1] = position & 0xFF00;
  f8:	1a 82       	std	Y+2, r1	; 0x02

				send_data_3964r(str_cmd);
  fa:	c8 01       	movw	r24, r16
  fc:	a3 d1       	rcall	.+838    	; 0x444 <send_data_3964r>
  fe:	c7 cf       	rjmp	.-114    	; 0x8e <main+0x18>

00000100 <init_adc>:

unsigned int conv_ADC(void);

void init_adc(void)
{
	ADMUX |= (1<<REFS0);// | (1<<ADLAR);	//Ajustement à gauche
 100:	ec e7       	ldi	r30, 0x7C	; 124
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	80 64       	ori	r24, 0x40	; 64
 108:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1); //Activation ADC et prescaler
 10a:	ea e7       	ldi	r30, 0x7A	; 122
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	86 68       	ori	r24, 0x86	; 134
 112:	80 83       	st	Z, r24
}
 114:	08 95       	ret

00000116 <conv_ADC>:

unsigned int conv_ADC(void)
{
	ADCSRA |= (1<<ADSC);		 //Start Converstion
 116:	80 91 7a 00 	lds	r24, 0x007A
 11a:	80 64       	ori	r24, 0x40	; 64
 11c:	80 93 7a 00 	sts	0x007A, r24
	while(!(ADCSRA & (1<<ADIF)));//Attend fin de convertion
 120:	80 91 7a 00 	lds	r24, 0x007A
 124:	84 ff       	sbrs	r24, 4
 126:	fc cf       	rjmp	.-8      	; 0x120 <conv_ADC+0xa>
	ADCSRA |= (0<<ADIF);		 //Rearme l'ADC
 128:	80 91 7a 00 	lds	r24, 0x007A
 12c:	80 93 7a 00 	sts	0x007A, r24

	//return ADCH;
	return ADCL + (ADCH<<8);
 130:	90 91 78 00 	lds	r25, 0x0078
 134:	80 91 79 00 	lds	r24, 0x0079
 138:	38 2f       	mov	r19, r24
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	29 0f       	add	r18, r25
 13e:	31 1d       	adc	r19, r1
}
 140:	c9 01       	movw	r24, r18
 142:	08 95       	ret

00000144 <get_value_ADC0>:

unsigned int get_value_ADC0(void)
{
	ADMUX &= 0b11111110;
 144:	ec e7       	ldi	r30, 0x7C	; 124
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	8e 7f       	andi	r24, 0xFE	; 254
 14c:	80 83       	st	Z, r24
	return conv_ADC();
 14e:	e3 df       	rcall	.-58     	; 0x116 <conv_ADC>
}
 150:	08 95       	ret

00000152 <get_value_ADC1>:

unsigned int get_value_ADC1(void)
{
	ADMUX |= (1<<MUX0);
 152:	ec e7       	ldi	r30, 0x7C	; 124
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	81 60       	ori	r24, 0x01	; 1
 15a:	80 83       	st	Z, r24
	return conv_ADC();
 15c:	dc df       	rcall	.-72     	; 0x116 <conv_ADC>
}
 15e:	08 95       	ret

00000160 <init_usart>:
#include "usart.h"

void init_usart(unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 160:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 164:	80 93 c4 00 	sts	0x00C4, r24
	/*Double speed*/
	UCSR0A = (1<<U2X0);
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	80 93 c0 00 	sts	0x00C0, r24
	/*Enable receiver and transmitter */
	UCSR0B |= (1<<TXEN0) | (1<<RXEN0);
 16e:	e1 ec       	ldi	r30, 0xC1	; 193
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	88 61       	ori	r24, 0x18	; 24
 176:	80 83       	st	Z, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (3<<UCSZ00);
 178:	86 e0       	ldi	r24, 0x06	; 6
 17a:	80 93 c2 00 	sts	0x00C2, r24

	flag_usart = FALSE;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	80 93 02 01 	sts	0x0102, r24
}
 184:	08 95       	ret

00000186 <putchar_usart>:

void putchar_usart(char c)
{
 186:	98 2f       	mov	r25, r24
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1<<UDRE0)));
 188:	80 91 c0 00 	lds	r24, 0x00C0
 18c:	85 ff       	sbrs	r24, 5
 18e:	fc cf       	rjmp	.-8      	; 0x188 <putchar_usart+0x2>
	/* Put data into buffer, sends the data */
	UDR0 = c;
 190:	90 93 c6 00 	sts	0x00C6, r25
}
 194:	08 95       	ret

00000196 <getchar_usart>:

char getchar_usart(void)
{
	/* Wait for data to be received */
	while ((!(UCSR0A & (1<<RXC0))) && (flag_timer1 == FALSE));
 196:	80 91 c0 00 	lds	r24, 0x00C0
 19a:	87 fd       	sbrc	r24, 7
 19c:	04 c0       	rjmp	.+8      	; 0x1a6 <getchar_usart+0x10>
 19e:	80 91 03 01 	lds	r24, 0x0103
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	c1 f3       	breq	.-16     	; 0x196 <getchar_usart>
	/* Get and return received data from buffer */
	return UDR0;
 1a6:	80 91 c6 00 	lds	r24, 0x00C6
}
 1aa:	08 95       	ret

000001ac <gets_usart>:
	for(i=0; i<strlen(string); i++)
		putchar_usart(string[i]);
}

void gets_usart(char string[], unsigned char len)
{
 1ac:	fc 01       	movw	r30, r24
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0c c0       	rjmp	.+24     	; 0x1ca <gets_usart+0x1e>
}

char getchar_usart(void)
{
	/* Wait for data to be received */
	while ((!(UCSR0A & (1<<RXC0))) && (flag_timer1 == FALSE));
 1b2:	80 91 c0 00 	lds	r24, 0x00C0
 1b6:	87 fd       	sbrc	r24, 7
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <gets_usart+0x16>
 1ba:	80 91 03 01 	lds	r24, 0x0103
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	c1 f3       	breq	.-16     	; 0x1b2 <gets_usart+0x6>
	/* Get and return received data from buffer */
	return UDR0;
 1c2:	80 91 c6 00 	lds	r24, 0x00C6
void gets_usart(char string[], unsigned char len)
{
	unsigned char i;
	
	for(i=0; i<len; i++)
		string[i] = getchar_usart();
 1c6:	81 93       	st	Z+, r24

void gets_usart(char string[], unsigned char len)
{
	unsigned char i;
	
	for(i=0; i<len; i++)
 1c8:	9f 5f       	subi	r25, 0xFF	; 255
 1ca:	96 17       	cp	r25, r22
 1cc:	90 f3       	brcs	.-28     	; 0x1b2 <gets_usart+0x6>
		string[i] = getchar_usart();
}
 1ce:	08 95       	ret

000001d0 <__vector_18>:

ISR(USART_RX_vect)
{
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
	flag_usart = TRUE;
 1da:	10 92 02 01 	sts	0x0102, r1
}
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <puts_usart>:
	/* Get and return received data from buffer */
	return UDR0;
}

void puts_usart(char string[])
{
 1e8:	9c 01       	movw	r18, r24
	unsigned char i;

	for(i=0; i<strlen(string); i++)
 1ea:	dc 01       	movw	r26, r24
 1ec:	0d 90       	ld	r0, X+
 1ee:	00 20       	and	r0, r0
 1f0:	e9 f7       	brne	.-6      	; 0x1ec <puts_usart+0x4>
 1f2:	11 97       	sbiw	r26, 0x01	; 1
 1f4:	a8 1b       	sub	r26, r24
 1f6:	b9 0b       	sbc	r27, r25
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0a c0       	rjmp	.+20     	; 0x210 <puts_usart+0x28>
		putchar_usart(string[i]);
 1fc:	e2 0f       	add	r30, r18
 1fe:	f3 1f       	adc	r31, r19
 200:	40 81       	ld	r20, Z
}

void putchar_usart(char c)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1<<UDRE0)));
 202:	80 91 c0 00 	lds	r24, 0x00C0
 206:	85 ff       	sbrs	r24, 5
 208:	fc cf       	rjmp	.-8      	; 0x202 <puts_usart+0x1a>
	/* Put data into buffer, sends the data */
	UDR0 = c;
 20a:	40 93 c6 00 	sts	0x00C6, r20

void puts_usart(char string[])
{
	unsigned char i;

	for(i=0; i<strlen(string); i++)
 20e:	9f 5f       	subi	r25, 0xFF	; 255
 210:	e9 2f       	mov	r30, r25
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	ea 17       	cp	r30, r26
 216:	fb 07       	cpc	r31, r27
 218:	88 f3       	brcs	.-30     	; 0x1fc <puts_usart+0x14>
		putchar_usart(string[i]);
}
 21a:	08 95       	ret

0000021c <get_ballast_position2>:
}

unsigned int get_ballast_position2(void)
{
#ifdef U_BOAT
	return get_value_ADC1();
 21c:	9a df       	rcall	.-204    	; 0x152 <get_value_ADC1>
#else
	return get_position2();
#endif
}
 21e:	08 95       	ret

00000220 <get_ballast_position1>:
}

unsigned int get_ballast_position1(void)
{
#ifdef U_BOAT
	return get_value_ADC0();
 220:	91 df       	rcall	.-222    	; 0x144 <get_value_ADC0>
#else
	return get_position1();
#endif
}
 222:	08 95       	ret

00000224 <init_ballast_position>:
#include "ballast_position.h"

void init_ballast_position(void)
{
#ifdef U_BOAT
	init_adc();
 224:	6d df       	rcall	.-294    	; 0x100 <init_adc>
#else
	init_external_interrupt();
#endif
}
 226:	08 95       	ret

00000228 <init_io>:
}

void init_io(void)
{
	//IN  : FC motor (Sur interruption PCINT0)
	PCIFR |= (1<<PCIE0);
 228:	d8 9a       	sbi	0x1b, 0	; 27
	PCMSK0 |= (1<<PCINT1) | (1<<PCINT2) | (1<<PCINT6) | (1<<PCINT7);
 22a:	eb e6       	ldi	r30, 0x6B	; 107
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	86 6c       	ori	r24, 0xC6	; 198
 232:	80 83       	st	Z, r24

	//OUT : enable motor
	DDRD |= (1<<DDD4) | (1<<DDD7);
 234:	8a b1       	in	r24, 0x0a	; 10
 236:	80 69       	ori	r24, 0x90	; 144
 238:	8a b9       	out	0x0a, r24	; 10

	//OUT : Rotation motor
	DDRC |= (1<<DDC2) | (1<<DDC3);
 23a:	87 b1       	in	r24, 0x07	; 7
 23c:	8c 60       	ori	r24, 0x0C	; 12
 23e:	87 b9       	out	0x07, r24	; 7
}
 240:	08 95       	ret

00000242 <enable_motor1>:

void enable_motor1(unsigned char value)
{
	if(value == TRUE)
 242:	88 23       	and	r24, r24
 244:	11 f4       	brne	.+4      	; 0x24a <enable_motor1+0x8>
		PORTD |= (1<<PORTD4);
 246:	5c 9a       	sbi	0x0b, 4	; 11
 248:	08 95       	ret
	else
		PORTD &= 0b11101111;
 24a:	5c 98       	cbi	0x0b, 4	; 11
 24c:	08 95       	ret

0000024e <enable_motor2>:
}

void enable_motor2(unsigned char value)
{
	if(value == TRUE)
 24e:	88 23       	and	r24, r24
 250:	11 f4       	brne	.+4      	; 0x256 <enable_motor2+0x8>
		PORTD |= (1<<PORTD7);	
 252:	5f 9a       	sbi	0x0b, 7	; 11
 254:	08 95       	ret
	else
		PORTD &= 0b01111111;
 256:	5f 98       	cbi	0x0b, 7	; 11
 258:	08 95       	ret

0000025a <rotation_motor1>:
}

void rotation_motor1(unsigned char value)
{
	if(value == CLOCKWISE)
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	11 f4       	brne	.+4      	; 0x262 <rotation_motor1+0x8>
		PORTC |= (1<<PORTC2);
 25e:	42 9a       	sbi	0x08, 2	; 8
 260:	08 95       	ret
	else
		PORTC &= 0b11111011;
 262:	42 98       	cbi	0x08, 2	; 8
 264:	08 95       	ret

00000266 <rotation_motor2>:
}

void rotation_motor2(unsigned char value)
{
	if(value == CLOCKWISE)
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	11 f4       	brne	.+4      	; 0x26e <rotation_motor2+0x8>
		PORTC |= (1<<PORTC3);
 26a:	43 9a       	sbi	0x08, 3	; 8
 26c:	08 95       	ret
	else
		PORTC &= 0b11110111;
 26e:	43 98       	cbi	0x08, 3	; 8
 270:	08 95       	ret

00000272 <get_rotation_motor1>:
}

unsigned char get_rotation_motor1(void)
{
	return PORTC & 0b00000100;
 272:	88 b1       	in	r24, 0x08	; 8
}
 274:	84 70       	andi	r24, 0x04	; 4
 276:	08 95       	ret

00000278 <get_rotation_motor2>:

unsigned char get_rotation_motor2(void)
{
	return PORTC & 0b00001000;
 278:	88 b1       	in	r24, 0x08	; 8
}
 27a:	88 70       	andi	r24, 0x08	; 8
 27c:	08 95       	ret

0000027e <set_speed_motor1>:

void set_speed_motor1(unsigned char duty_cycle)
{
	OCR0A = duty_cycle;
 27e:	87 bd       	out	0x27, r24	; 39
}
 280:	08 95       	ret

00000282 <set_speed_motor2>:

void set_speed_motor2(unsigned char duty_cycle)
{
	OCR0B = duty_cycle;
 282:	88 bd       	out	0x28, r24	; 40
}
 284:	08 95       	ret

00000286 <__vector_3>:

ISR(PCINT0_vect)
{
 286:	1f 92       	push	r1
 288:	0f 92       	push	r0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
	//if(PINB & 0b00000010)
		
}
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <init_motor_driver>:

void init_io(void);

void init_motor_driver(void)
{
	init_io();
 29a:	c6 df       	rcall	.-116    	; 0x228 <init_io>
	init_pwm();
 29c:	0c d0       	rcall	.+24     	; 0x2b6 <init_pwm>
}

void enable_motor1(unsigned char value)
{
	if(value == TRUE)
		PORTD |= (1<<PORTD4);
 29e:	5c 9a       	sbi	0x0b, 4	; 11
}

void enable_motor2(unsigned char value)
{
	if(value == TRUE)
		PORTD |= (1<<PORTD7);	
 2a0:	5f 9a       	sbi	0x0b, 7	; 11
}

void rotation_motor1(unsigned char value)
{
	if(value == CLOCKWISE)
		PORTC |= (1<<PORTC2);
 2a2:	42 9a       	sbi	0x08, 2	; 8
}

void rotation_motor2(unsigned char value)
{
	if(value == CLOCKWISE)
		PORTC |= (1<<PORTC3);
 2a4:	43 9a       	sbi	0x08, 3	; 8
	return PORTC & 0b00001000;
}

void set_speed_motor1(unsigned char duty_cycle)
{
	OCR0A = duty_cycle;
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
 2a8:	87 bd       	out	0x27, r24	; 39
}

void set_speed_motor2(unsigned char duty_cycle)
{
	OCR0B = duty_cycle;
 2aa:	88 bd       	out	0x28, r24	; 40
void enable_motor1(unsigned char value)
{
	if(value == TRUE)
		PORTD |= (1<<PORTD4);
	else
		PORTD &= 0b11101111;
 2ac:	5c 98       	cbi	0x0b, 4	; 11
void enable_motor2(unsigned char value)
{
	if(value == TRUE)
		PORTD |= (1<<PORTD7);	
	else
		PORTD &= 0b01111111;
 2ae:	5f 98       	cbi	0x0b, 7	; 11
	return PORTC & 0b00001000;
}

void set_speed_motor1(unsigned char duty_cycle)
{
	OCR0A = duty_cycle;
 2b0:	17 bc       	out	0x27, r1	; 39
}

void set_speed_motor2(unsigned char duty_cycle)
{
	OCR0B = duty_cycle;
 2b2:	18 bc       	out	0x28, r1	; 40
	enable_motor1(FALSE);
	enable_motor2(FALSE);

	set_speed_motor1(0);
	set_speed_motor2(0);
}
 2b4:	08 95       	ret

000002b6 <init_pwm>:
#include "timer0.h"

void init_pwm(void)
{
	//Config Timer 0
	DDRD |= (1<<DDD5) | (1<<DDD6);	//OC0A OC0B
 2b6:	8a b1       	in	r24, 0x0a	; 10
 2b8:	80 66       	ori	r24, 0x60	; 96
 2ba:	8a b9       	out	0x0a, r24	; 10
	TCCR0A |= (1<<COM0A0) | (1<<COM0A1) | (1<<COM0B0) | (1<<COM0B1) | (1<<WGM01) | (1<<WGM00);  //Fast-PWM mode 3
 2bc:	84 b5       	in	r24, 0x24	; 36
 2be:	83 6f       	ori	r24, 0xF3	; 243
 2c0:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00);   //Run - No-prescaler
 2c2:	85 b5       	in	r24, 0x25	; 37
 2c4:	81 60       	ori	r24, 0x01	; 1
 2c6:	85 bd       	out	0x25, r24	; 37
}
 2c8:	08 95       	ret

000002ca <process_bcc_3964r>:
		}
	}while((flag_timer1 == TRUE) || (flag_error == TRUE));
}

char process_bcc_3964r(char data[])
{
 2ca:	42 e0       	ldi	r20, 0x02	; 2
 2cc:	20 e0       	ldi	r18, 0x00	; 0
 2ce:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char bcc = 0, i;

	bcc ^= STX;
	for(i=0; i<SIZE_MSG; i++)
	{
		bcc ^= data[i];
 2d0:	fc 01       	movw	r30, r24
 2d2:	e2 0f       	add	r30, r18
 2d4:	f3 1f       	adc	r31, r19
 2d6:	e0 81       	ld	r30, Z
 2d8:	4e 27       	eor	r20, r30
		//On compte un double DLE
		if(data[i] == DLE)
 2da:	e0 31       	cpi	r30, 0x10	; 16
 2dc:	09 f4       	brne	.+2      	; 0x2e0 <process_bcc_3964r+0x16>
			bcc ^= DLE;
 2de:	4e 27       	eor	r20, r30
 2e0:	2f 5f       	subi	r18, 0xFF	; 255
 2e2:	3f 4f       	sbci	r19, 0xFF	; 255
char process_bcc_3964r(char data[])
{
	unsigned char bcc = 0, i;

	bcc ^= STX;
	for(i=0; i<SIZE_MSG; i++)
 2e4:	23 30       	cpi	r18, 0x03	; 3
 2e6:	31 05       	cpc	r19, r1
 2e8:	99 f7       	brne	.-26     	; 0x2d0 <process_bcc_3964r+0x6>
	}
	bcc ^= DLE;
	bcc ^= ETX;

	return bcc;
}
 2ea:	83 e1       	ldi	r24, 0x13	; 19
 2ec:	84 27       	eor	r24, r20
 2ee:	08 95       	ret

000002f0 <sum_error_3964r>:
char sum_error_3964r(void)
{
	unsigned char sum, i;

	for(i=0, sum=0; i<NB_ERRORS; i++)
		sum += tab_error_3964r[i];
 2f0:	80 91 05 01 	lds	r24, 0x0105
 2f4:	90 91 04 01 	lds	r25, 0x0104
 2f8:	89 0f       	add	r24, r25
 2fa:	90 91 06 01 	lds	r25, 0x0106
 2fe:	89 0f       	add	r24, r25
 300:	90 91 07 01 	lds	r25, 0x0107
 304:	89 0f       	add	r24, r25
 306:	90 91 08 01 	lds	r25, 0x0108

	return sum;
}
 30a:	89 0f       	add	r24, r25
 30c:	08 95       	ret

0000030e <get_data_3964r>:
	return TRANSMISSION_SUCCESS;
}

//Reception
void get_data_3964r(char data[])
{
 30e:	9f 92       	push	r9
 310:	af 92       	push	r10
 312:	bf 92       	push	r11
 314:	cf 92       	push	r12
 316:	df 92       	push	r13
 318:	ef 92       	push	r14
 31a:	ff 92       	push	r15
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	df 93       	push	r29
 322:	cf 93       	push	r28
 324:	00 d0       	rcall	.+0      	; 0x326 <get_data_3964r+0x18>
 326:	0f 92       	push	r0
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
 32c:	6c 01       	movw	r12, r24
	do
	{
		//Initialisation des variables
		i = 0;
		prev_c = 0;
		flag_timer1 = FALSE;
 32e:	99 24       	eor	r9, r9
 330:	93 94       	inc	r9
		flag_error	= FALSE;
		memset(flag_dle,FALSE,3);
 332:	5e 01       	movw	r10, r28
 334:	08 94       	sec
 336:	a1 1c       	adc	r10, r1
 338:	b1 1c       	adc	r11, r1
	do
	{
		//Initialisation des variables
		i = 0;
		prev_c = 0;
		flag_timer1 = FALSE;
 33a:	90 92 03 01 	sts	0x0103, r9
		flag_error	= FALSE;
		memset(flag_dle,FALSE,3);
 33e:	c5 01       	movw	r24, r10
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	43 e0       	ldi	r20, 0x03	; 3
 346:	50 e0       	ldi	r21, 0x00	; 0
 348:	34 d2       	rcall	.+1128   	; 0x7b2 <memset>
	
		//On attend de recevoir un caractère
		c = getchar_usart();
 34a:	25 df       	rcall	.-438    	; 0x196 <getchar_usart>

		//Si on reçoi un STX
		if(c == STX)
 34c:	82 30       	cpi	r24, 0x02	; 2
 34e:	09 f0       	breq	.+2      	; 0x352 <get_data_3964r+0x44>
 350:	5f c0       	rjmp	.+190    	; 0x410 <get_data_3964r+0x102>
		{
			bcc = STX;

			//On répond DLE
			putchar_usart(DLE);
 352:	80 e1       	ldi	r24, 0x10	; 16
 354:	18 df       	rcall	.-464    	; 0x186 <putchar_usart>
 356:	ff 24       	eor	r15, r15
 358:	10 e0       	ldi	r17, 0x00	; 0
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	e8 2e       	mov	r14, r24

			do
			{
				start_timer1(TIMEOUT_MS);
 35e:	88 ea       	ldi	r24, 0xA8	; 168
 360:	91 e6       	ldi	r25, 0x61	; 97
 362:	e1 d1       	rcall	.+962    	; 0x726 <start_timer1>
				c = getchar_usart();
 364:	18 df       	rcall	.-464    	; 0x196 <getchar_usart>
 366:	08 2f       	mov	r16, r24
				stop_timer1();
 368:	ea d1       	rcall	.+980    	; 0x73e <stop_timer1>

				if(flag_timer1 == FALSE)
 36a:	90 91 03 01 	lds	r25, 0x0103
 36e:	91 30       	cpi	r25, 0x01	; 1
 370:	89 f5       	brne	.+98     	; 0x3d4 <get_data_3964r+0xc6>
				{					
					bcc ^= c;
 372:	e0 26       	eor	r14, r16

					if((prev_c != DLE) && (c == DLE))
 374:	80 e1       	ldi	r24, 0x10	; 16
 376:	f8 16       	cp	r15, r24
 378:	41 f0       	breq	.+16     	; 0x38a <get_data_3964r+0x7c>
 37a:	e1 2f       	mov	r30, r17
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	81 2f       	mov	r24, r17
 380:	8f 5f       	subi	r24, 0xFF	; 255
 382:	00 31       	cpi	r16, 0x10	; 16
 384:	d9 f4       	brne	.+54     	; 0x3bc <get_data_3964r+0xae>
					{
						flag_dle[0] = TRUE;
 386:	19 82       	std	Y+1, r1	; 0x01
 388:	1a c0       	rjmp	.+52     	; 0x3be <get_data_3964r+0xb0>
						data[i] = c;
						i++;
					}
					else
					{
						if((prev_c == DLE) && (c == DLE))
 38a:	00 31       	cpi	r16, 0x10	; 16
 38c:	79 f4       	brne	.+30     	; 0x3ac <get_data_3964r+0x9e>
						{
							if(flag_dle[1] == FALSE)
 38e:	8a 81       	ldd	r24, Y+2	; 0x02
 390:	81 30       	cpi	r24, 0x01	; 1
 392:	41 f4       	brne	.+16     	; 0x3a4 <get_data_3964r+0x96>
							{
								flag_dle[0] = FALSE;
 394:	89 83       	std	Y+1, r24	; 0x01
								flag_dle[1] = TRUE;
 396:	1a 82       	std	Y+2, r1	; 0x02
								flag_dle[2] = FALSE;
 398:	8b 83       	std	Y+3, r24	; 0x03

								data[i] = DLE;
 39a:	f6 01       	movw	r30, r12
 39c:	e1 0f       	add	r30, r17
 39e:	f1 1d       	adc	r31, r1
 3a0:	f0 82       	st	Z, r15
 3a2:	0a c0       	rjmp	.+20     	; 0x3b8 <get_data_3964r+0xaa>
								i++;
							}
							else
							{
								flag_dle[0] = TRUE;
 3a4:	19 82       	std	Y+1, r1	; 0x01
								flag_dle[1] = FALSE;
 3a6:	9a 83       	std	Y+2, r25	; 0x02
								flag_dle[2] = FALSE;
 3a8:	9b 83       	std	Y+3, r25	; 0x03
 3aa:	0f c0       	rjmp	.+30     	; 0x3ca <get_data_3964r+0xbc>
						}
						else
						{
							if((prev_c == DLE) && (c != DLE))
							{
								flag_dle[1] = FALSE;
 3ac:	9a 83       	std	Y+2, r25	; 0x02
								flag_dle[2] = TRUE;
 3ae:	1b 82       	std	Y+3, r1	; 0x03

								data[i] = c;
 3b0:	f6 01       	movw	r30, r12
 3b2:	e1 0f       	add	r30, r17
 3b4:	f1 1d       	adc	r31, r1
 3b6:	00 83       	st	Z, r16
								i++;
 3b8:	1f 5f       	subi	r17, 0xFF	; 255
 3ba:	07 c0       	rjmp	.+14     	; 0x3ca <get_data_3964r+0xbc>
							}
							else
							{
								flag_dle[0] = FALSE;
 3bc:	99 83       	std	Y+1, r25	; 0x01
								flag_dle[1] = FALSE;
 3be:	9a 83       	std	Y+2, r25	; 0x02
								flag_dle[2] = FALSE;
 3c0:	9b 83       	std	Y+3, r25	; 0x03

								data[i] = c;
 3c2:	ec 0d       	add	r30, r12
 3c4:	fd 1d       	adc	r31, r13
 3c6:	00 83       	st	Z, r16
								i++;
 3c8:	18 2f       	mov	r17, r24
 3ca:	f0 2e       	mov	r15, r16
				else
				{
					putchar_usart(NAK);
					break;
				}	
			}while(!((flag_dle[0] == TRUE) && (flag_dle[2] == TRUE)));
 3cc:	89 81       	ldd	r24, Y+1	; 0x01
 3ce:	88 23       	and	r24, r24
 3d0:	31 f6       	brne	.-116    	; 0x35e <get_data_3964r+0x50>
 3d2:	03 c0       	rjmp	.+6      	; 0x3da <get_data_3964r+0xcc>
					}
					prev_c = c;
				}
				else
				{
					putchar_usart(NAK);
 3d4:	85 e1       	ldi	r24, 0x15	; 21
 3d6:	d7 de       	rcall	.-594    	; 0x186 <putchar_usart>
 3d8:	05 c0       	rjmp	.+10     	; 0x3e4 <get_data_3964r+0xd6>
					break;
 3da:	f0 2e       	mov	r15, r16
				}	
			}while(!((flag_dle[0] == TRUE) && (flag_dle[2] == TRUE)));
 3dc:	8b 81       	ldd	r24, Y+3	; 0x03
 3de:	88 23       	and	r24, r24
 3e0:	09 f0       	breq	.+2      	; 0x3e4 <get_data_3964r+0xd6>
 3e2:	bd cf       	rjmp	.-134    	; 0x35e <get_data_3964r+0x50>

			if(flag_timer1 == FALSE)
 3e4:	80 91 03 01 	lds	r24, 0x0103
 3e8:	81 30       	cpi	r24, 0x01	; 1
 3ea:	91 f4       	brne	.+36     	; 0x410 <get_data_3964r+0x102>
			{
				if(c == ETX)
 3ec:	03 30       	cpi	r16, 0x03	; 3
 3ee:	81 f4       	brne	.+32     	; 0x410 <get_data_3964r+0x102>
				{
					start_timer1(TIMEOUT_MS);
 3f0:	88 ea       	ldi	r24, 0xA8	; 168
 3f2:	91 e6       	ldi	r25, 0x61	; 97
 3f4:	98 d1       	rcall	.+816    	; 0x726 <start_timer1>
					c = getchar_usart();
 3f6:	cf de       	rcall	.-610    	; 0x196 <getchar_usart>
 3f8:	18 2f       	mov	r17, r24
					stop_timer1();
 3fa:	a1 d1       	rcall	.+834    	; 0x73e <stop_timer1>
	
					if(flag_timer1 == FALSE)
 3fc:	80 91 03 01 	lds	r24, 0x0103
 400:	81 30       	cpi	r24, 0x01	; 1
 402:	31 f4       	brne	.+12     	; 0x410 <get_data_3964r+0x102>
					{
						if(c == bcc)
 404:	1e 15       	cp	r17, r14
 406:	21 f4       	brne	.+8      	; 0x410 <get_data_3964r+0x102>
							putchar_usart(DLE);
 408:	80 e1       	ldi	r24, 0x10	; 16
 40a:	bd de       	rcall	.-646    	; 0x186 <putchar_usart>
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	03 c0       	rjmp	.+6      	; 0x416 <get_data_3964r+0x108>
				flag_error = TRUE;
			}
		}
		else
		{
			putchar_usart(NAK);
 410:	85 e1       	ldi	r24, 0x15	; 21
 412:	b9 de       	rcall	.-654    	; 0x186 <putchar_usart>
 414:	90 e0       	ldi	r25, 0x00	; 0
			flag_error = TRUE;
		}
	}while((flag_timer1 == TRUE) || (flag_error == TRUE));
 416:	80 91 03 01 	lds	r24, 0x0103
 41a:	88 23       	and	r24, r24
 41c:	09 f4       	brne	.+2      	; 0x420 <get_data_3964r+0x112>
 41e:	8d cf       	rjmp	.-230    	; 0x33a <get_data_3964r+0x2c>
 420:	99 23       	and	r25, r25
 422:	09 f4       	brne	.+2      	; 0x426 <get_data_3964r+0x118>
 424:	8a cf       	rjmp	.-236    	; 0x33a <get_data_3964r+0x2c>
}
 426:	0f 90       	pop	r0
 428:	0f 90       	pop	r0
 42a:	0f 90       	pop	r0
 42c:	cf 91       	pop	r28
 42e:	df 91       	pop	r29
 430:	1f 91       	pop	r17
 432:	0f 91       	pop	r16
 434:	ff 90       	pop	r15
 436:	ef 90       	pop	r14
 438:	df 90       	pop	r13
 43a:	cf 90       	pop	r12
 43c:	bf 90       	pop	r11
 43e:	af 90       	pop	r10
 440:	9f 90       	pop	r9
 442:	08 95       	ret

00000444 <send_data_3964r>:
	init_timer1();
	memset(tab_error_3964r,0,5);
}

char send_data_3964r(char data[])
{
 444:	df 92       	push	r13
 446:	ef 92       	push	r14
 448:	ff 92       	push	r15
 44a:	0f 93       	push	r16
 44c:	1f 93       	push	r17
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	f8 2e       	mov	r15, r24
 454:	09 2f       	mov	r16, r25
	unsigned char bcc, i, c;
	memset(tab_error_3964r,0,5);
 456:	85 e0       	ldi	r24, 0x05	; 5
 458:	e4 e0       	ldi	r30, 0x04	; 4
 45a:	f1 e0       	ldi	r31, 0x01	; 1
 45c:	df 01       	movw	r26, r30
 45e:	1d 92       	st	X+, r1
 460:	8a 95       	dec	r24
 462:	e9 f7       	brne	.-6      	; 0x45e <send_data_3964r+0x1a>

	bcc = process_bcc_3964r(data);
 464:	8f 2d       	mov	r24, r15
 466:	31 df       	rcall	.-414    	; 0x2ca <process_bcc_3964r>
 468:	e8 2e       	mov	r14, r24

	do
	{
		flag_timer1 = FALSE;
 46a:	dd 24       	eor	r13, r13
 46c:	d3 94       	inc	r13
 46e:	d0 92 03 01 	sts	0x0103, r13
		flag_usart	= FALSE;
 472:	d0 92 02 01 	sts	0x0102, r13

		putchar_usart(STX);
 476:	82 e0       	ldi	r24, 0x02	; 2
 478:	86 de       	rcall	.-756    	; 0x186 <putchar_usart>

		start_timer1(TIMEOUT_MS);	//5ms
 47a:	88 ea       	ldi	r24, 0xA8	; 168
 47c:	91 e6       	ldi	r25, 0x61	; 97
 47e:	53 d1       	rcall	.+678    	; 0x726 <start_timer1>
		c = getchar_usart();
 480:	8a de       	rcall	.-748    	; 0x196 <getchar_usart>
 482:	18 2f       	mov	r17, r24
		stop_timer1();
 484:	5c d1       	rcall	.+696    	; 0x73e <stop_timer1>

		if(flag_timer1 == FALSE)
 486:	80 91 03 01 	lds	r24, 0x0103
 48a:	81 30       	cpi	r24, 0x01	; 1
 48c:	09 f0       	breq	.+2      	; 0x490 <send_data_3964r+0x4c>
 48e:	79 c0       	rjmp	.+242    	; 0x582 <__stack+0x83>
		{
				if(c == DLE)
 490:	10 31       	cpi	r17, 0x10	; 16
 492:	09 f0       	breq	.+2      	; 0x496 <send_data_3964r+0x52>
 494:	6c c0       	rjmp	.+216    	; 0x56e <__stack+0x6f>
				{
					//On active l'interruption de l'usart en reception
					ENABLE_RX_INT_USART;
 496:	80 91 c1 00 	lds	r24, 0x00C1
 49a:	80 68       	ori	r24, 0x80	; 128
 49c:	80 93 c1 00 	sts	0x00C1, r24
 4a0:	2f 2d       	mov	r18, r15
 4a2:	30 2f       	mov	r19, r16
 4a4:	c9 01       	movw	r24, r18
 4a6:	ec 01       	movw	r28, r24
 4a8:	10 e0       	ldi	r17, 0x00	; 0

					for(i=0; i<SIZE_MSG; i++)
					{
						if(flag_usart == FALSE)
 4aa:	80 91 02 01 	lds	r24, 0x0102
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	79 f4       	brne	.+30     	; 0x4d0 <send_data_3964r+0x8c>
						{
							putchar_usart(data[i]);
 4b2:	88 81       	ld	r24, Y
 4b4:	68 de       	rcall	.-816    	; 0x186 <putchar_usart>
							//Double DLE
							if(data[i] == DLE)
 4b6:	88 81       	ld	r24, Y
 4b8:	80 31       	cpi	r24, 0x10	; 16
 4ba:	31 f4       	brne	.+12     	; 0x4c8 <send_data_3964r+0x84>
							{
								//_delay_ms(5);
								if(flag_usart == FALSE)
 4bc:	80 91 02 01 	lds	r24, 0x0102
 4c0:	81 30       	cpi	r24, 0x01	; 1
 4c2:	31 f4       	brne	.+12     	; 0x4d0 <send_data_3964r+0x8c>
									putchar_usart(DLE);
 4c4:	80 e1       	ldi	r24, 0x10	; 16
 4c6:	5f de       	rcall	.-834    	; 0x186 <putchar_usart>
				if(c == DLE)
				{
					//On active l'interruption de l'usart en reception
					ENABLE_RX_INT_USART;

					for(i=0; i<SIZE_MSG; i++)
 4c8:	1f 5f       	subi	r17, 0xFF	; 255
 4ca:	21 96       	adiw	r28, 0x01	; 1
 4cc:	13 30       	cpi	r17, 0x03	; 3
 4ce:	69 f7       	brne	.-38     	; 0x4aa <send_data_3964r+0x66>
						}
						else
							break;
					}
					
					if(flag_usart == FALSE)
 4d0:	80 91 02 01 	lds	r24, 0x0102
 4d4:	81 30       	cpi	r24, 0x01	; 1
 4d6:	79 f5       	brne	.+94     	; 0x536 <__stack+0x37>
					{
						putchar_usart(DLE);
 4d8:	80 e1       	ldi	r24, 0x10	; 16
 4da:	55 de       	rcall	.-854    	; 0x186 <putchar_usart>
						//_delay_ms(5);

						if(flag_usart == FALSE)
 4dc:	80 91 02 01 	lds	r24, 0x0102
 4e0:	81 30       	cpi	r24, 0x01	; 1
 4e2:	49 f5       	brne	.+82     	; 0x536 <__stack+0x37>
						{
							putchar_usart(ETX);
 4e4:	83 e0       	ldi	r24, 0x03	; 3
 4e6:	4f de       	rcall	.-866    	; 0x186 <putchar_usart>
							//_delay_ms(5);

							if(flag_usart == FALSE)
 4e8:	80 91 02 01 	lds	r24, 0x0102
 4ec:	81 30       	cpi	r24, 0x01	; 1
 4ee:	19 f5       	brne	.+70     	; 0x536 <__stack+0x37>
							{
								//Désactivation de l'interruption de reception usart
								DISABLE_RX_INT_USART;
 4f0:	80 91 c1 00 	lds	r24, 0x00C1
 4f4:	8f 77       	andi	r24, 0x7F	; 127
 4f6:	80 93 c1 00 	sts	0x00C1, r24

								putchar_usart(bcc);
 4fa:	8e 2d       	mov	r24, r14
 4fc:	44 de       	rcall	.-888    	; 0x186 <putchar_usart>
								//_delay_ms(5);

								if(flag_usart == FALSE)
 4fe:	80 91 02 01 	lds	r24, 0x0102
 502:	81 30       	cpi	r24, 0x01	; 1
 504:	e9 f4       	brne	.+58     	; 0x540 <__stack+0x41>
								{
									start_timer1(TIMEOUT_MS);
 506:	88 ea       	ldi	r24, 0xA8	; 168
 508:	91 e6       	ldi	r25, 0x61	; 97
 50a:	0d d1       	rcall	.+538    	; 0x726 <start_timer1>
									c = getchar_usart();
 50c:	44 de       	rcall	.-888    	; 0x196 <getchar_usart>
 50e:	18 2f       	mov	r17, r24
									stop_timer1();
 510:	16 d1       	rcall	.+556    	; 0x73e <stop_timer1>

									if(flag_timer1 == FALSE)
 512:	80 91 03 01 	lds	r24, 0x0103
 516:	81 30       	cpi	r24, 0x01	; 1
 518:	41 f4       	brne	.+16     	; 0x52a <__stack+0x2b>
									{
										if(c != DLE)
 51a:	10 31       	cpi	r17, 0x10	; 16
 51c:	b1 f0       	breq	.+44     	; 0x54a <__stack+0x4b>
											tab_error_3964r[1]++;
 51e:	80 91 05 01 	lds	r24, 0x0105
 522:	8f 5f       	subi	r24, 0xFF	; 255
 524:	80 93 05 01 	sts	0x0105, r24
 528:	10 c0       	rjmp	.+32     	; 0x54a <__stack+0x4b>

									}
									else
										tab_error_3964r[2]++;
 52a:	80 91 06 01 	lds	r24, 0x0106
 52e:	8f 5f       	subi	r24, 0xFF	; 255
 530:	80 93 06 01 	sts	0x0106, r24
 534:	0a c0       	rjmp	.+20     	; 0x54a <__stack+0x4b>
							}
						}
						else
						{
							//Désactivation de l'interruption de reception usart
							DISABLE_RX_INT_USART;
 536:	80 91 c1 00 	lds	r24, 0x00C1
 53a:	8f 77       	andi	r24, 0x7F	; 127
 53c:	80 93 c1 00 	sts	0x00C1, r24
							tab_error_3964r[3]++;
 540:	80 91 07 01 	lds	r24, 0x0107
 544:	8f 5f       	subi	r24, 0xFF	; 255
 546:	80 93 07 01 	sts	0x0107, r24
char sum_error_3964r(void)
{
	unsigned char sum, i;

	for(i=0, sum=0; i<NB_ERRORS; i++)
		sum += tab_error_3964r[i];
 54a:	80 91 05 01 	lds	r24, 0x0105
 54e:	90 91 04 01 	lds	r25, 0x0104
 552:	89 0f       	add	r24, r25
 554:	90 91 06 01 	lds	r25, 0x0106
 558:	89 0f       	add	r24, r25
 55a:	90 91 07 01 	lds	r25, 0x0107
 55e:	89 0f       	add	r24, r25
		}
		else
			tab_error_3964r[4]++;

		//Si la somme des erreurs est supérieur au seuil max
		if(sum_error_3964r() == MAX_ERRORS)
 560:	90 91 08 01 	lds	r25, 0x0108
 564:	89 0f       	add	r24, r25
 566:	86 30       	cpi	r24, 0x06	; 6
 568:	91 f4       	brne	.+36     	; 0x58e <__stack+0x8f>
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	1b c0       	rjmp	.+54     	; 0x5a4 <__stack+0xa5>
						tab_error_3964r[3]++;
					}
			}
			else
			{
				if(c == STX)
 56e:	12 30       	cpi	r17, 0x02	; 2
 570:	11 f4       	brne	.+4      	; 0x576 <__stack+0x77>
 572:	82 e0       	ldi	r24, 0x02	; 2
 574:	17 c0       	rjmp	.+46     	; 0x5a4 <__stack+0xa5>
						return RECEPTION_MODE;
					else
						flag_timer1 = TRUE; //flag_timer1 ou flag_usart juste pour faire boucler
				}
				else
					tab_error_3964r[0]++;
 576:	80 91 04 01 	lds	r24, 0x0104
 57a:	8f 5f       	subi	r24, 0xFF	; 255
 57c:	80 93 04 01 	sts	0x0104, r24
 580:	e4 cf       	rjmp	.-56     	; 0x54a <__stack+0x4b>
			}
		}
		else
			tab_error_3964r[4]++;
 582:	80 91 08 01 	lds	r24, 0x0108
 586:	8f 5f       	subi	r24, 0xFF	; 255
 588:	80 93 08 01 	sts	0x0108, r24
 58c:	de cf       	rjmp	.-68     	; 0x54a <__stack+0x4b>
		if(sum_error_3964r() == MAX_ERRORS)
		{
			//retourne une erreur de transmission
			return TRANSMISSION_FAILED;
		}
	}while((flag_timer1 == TRUE) || (flag_usart == TRUE));
 58e:	80 91 03 01 	lds	r24, 0x0103
 592:	88 23       	and	r24, r24
 594:	09 f4       	brne	.+2      	; 0x598 <__stack+0x99>
 596:	6b cf       	rjmp	.-298    	; 0x46e <send_data_3964r+0x2a>
 598:	80 91 02 01 	lds	r24, 0x0102
 59c:	88 23       	and	r24, r24
 59e:	09 f4       	brne	.+2      	; 0x5a2 <__stack+0xa3>
 5a0:	66 cf       	rjmp	.-308    	; 0x46e <send_data_3964r+0x2a>
 5a2:	80 e0       	ldi	r24, 0x00	; 0
	
	//la transmission s'est bien déroulée
	return TRANSMISSION_SUCCESS;
}
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	1f 91       	pop	r17
 5aa:	0f 91       	pop	r16
 5ac:	ff 90       	pop	r15
 5ae:	ef 90       	pop	r14
 5b0:	df 90       	pop	r13
 5b2:	08 95       	ret

000005b4 <init_3964r>:
const unsigned char priority = LOW_PRIORITY;
unsigned char tab_error_3964r[NB_ERRORS];

void init_3964r(void)
{
	init_usart(MYUBRR);
 5b4:	87 e6       	ldi	r24, 0x67	; 103
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	d3 dd       	rcall	.-1114   	; 0x160 <init_usart>
	init_timer1();
 5ba:	a7 d0       	rcall	.+334    	; 0x70a <init_timer1>
	memset(tab_error_3964r,0,5);
 5bc:	85 e0       	ldi	r24, 0x05	; 5
 5be:	e4 e0       	ldi	r30, 0x04	; 4
 5c0:	f1 e0       	ldi	r31, 0x01	; 1
 5c2:	df 01       	movw	r26, r30
 5c4:	1d 92       	st	X+, r1
 5c6:	8a 95       	dec	r24
 5c8:	e9 f7       	brne	.-6      	; 0x5c4 <init_3964r+0x10>
}
 5ca:	08 95       	ret

000005cc <init_external_interrupt>:
volatile int nb_impuls_wheel2;

void init_external_interrupt(void)
{
	//External INT0 INTT1 (Rising edge)
	EICRA |= (1<<ISC11) | (1<<ISC10) | (1<<ISC01) | (1<<ISC00);
 5cc:	e9 e6       	ldi	r30, 0x69	; 105
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	80 81       	ld	r24, Z
 5d2:	8f 60       	ori	r24, 0x0F	; 15
 5d4:	80 83       	st	Z, r24
	EIMSK |= (1<<INT1) | (1<<INT0);
 5d6:	8d b3       	in	r24, 0x1d	; 29
 5d8:	83 60       	ori	r24, 0x03	; 3
 5da:	8d bb       	out	0x1d, r24	; 29

	nb_impuls_wheel1 = 0;
 5dc:	10 92 0c 01 	sts	0x010C, r1
 5e0:	10 92 0b 01 	sts	0x010B, r1
	nb_impuls_wheel2 = 0;
 5e4:	10 92 0a 01 	sts	0x010A, r1
 5e8:	10 92 09 01 	sts	0x0109, r1
}
 5ec:	08 95       	ret

000005ee <get_position1>:

unsigned char get_position1(void)
{
	return (((unsigned long)nb_impuls_wheel1 * 256) / MAX_IMPULSION);
 5ee:	60 91 0b 01 	lds	r22, 0x010B
 5f2:	70 91 0c 01 	lds	r23, 0x010C
 5f6:	88 27       	eor	r24, r24
 5f8:	77 fd       	sbrc	r23, 7
 5fa:	80 95       	com	r24
 5fc:	98 2f       	mov	r25, r24
 5fe:	98 2f       	mov	r25, r24
 600:	87 2f       	mov	r24, r23
 602:	76 2f       	mov	r23, r22
 604:	66 27       	eor	r22, r22
 606:	28 ee       	ldi	r18, 0xE8	; 232
 608:	33 e0       	ldi	r19, 0x03	; 3
 60a:	40 e0       	ldi	r20, 0x00	; 0
 60c:	50 e0       	ldi	r21, 0x00	; 0
 60e:	af d0       	rcall	.+350    	; 0x76e <__udivmodsi4>
 610:	82 2f       	mov	r24, r18
}
 612:	08 95       	ret

00000614 <get_position2>:

unsigned char get_position2(void)
{
	return (((unsigned long)nb_impuls_wheel2 * 256) / MAX_IMPULSION);
 614:	60 91 09 01 	lds	r22, 0x0109
 618:	70 91 0a 01 	lds	r23, 0x010A
 61c:	88 27       	eor	r24, r24
 61e:	77 fd       	sbrc	r23, 7
 620:	80 95       	com	r24
 622:	98 2f       	mov	r25, r24
 624:	98 2f       	mov	r25, r24
 626:	87 2f       	mov	r24, r23
 628:	76 2f       	mov	r23, r22
 62a:	66 27       	eor	r22, r22
 62c:	28 ee       	ldi	r18, 0xE8	; 232
 62e:	33 e0       	ldi	r19, 0x03	; 3
 630:	40 e0       	ldi	r20, 0x00	; 0
 632:	50 e0       	ldi	r21, 0x00	; 0
 634:	9c d0       	rcall	.+312    	; 0x76e <__udivmodsi4>
 636:	82 2f       	mov	r24, r18
}
 638:	08 95       	ret

0000063a <__vector_2>:
	else
		nb_impuls_wheel1--;
}

ISR(INT1_vect)
{
 63a:	1f 92       	push	r1
 63c:	0f 92       	push	r0
 63e:	0f b6       	in	r0, 0x3f	; 63
 640:	0f 92       	push	r0
 642:	11 24       	eor	r1, r1
 644:	2f 93       	push	r18
 646:	3f 93       	push	r19
 648:	4f 93       	push	r20
 64a:	5f 93       	push	r21
 64c:	6f 93       	push	r22
 64e:	7f 93       	push	r23
 650:	8f 93       	push	r24
 652:	9f 93       	push	r25
 654:	af 93       	push	r26
 656:	bf 93       	push	r27
 658:	ef 93       	push	r30
 65a:	ff 93       	push	r31
	if(get_rotation_motor2() == CLOCKWISE)	//Sens à vérifier !
 65c:	0d de       	rcall	.-998    	; 0x278 <get_rotation_motor2>
 65e:	81 30       	cpi	r24, 0x01	; 1
 660:	31 f4       	brne	.+12     	; 0x66e <__vector_2+0x34>
		nb_impuls_wheel2++;
 662:	80 91 09 01 	lds	r24, 0x0109
 666:	90 91 0a 01 	lds	r25, 0x010A
 66a:	01 96       	adiw	r24, 0x01	; 1
 66c:	05 c0       	rjmp	.+10     	; 0x678 <__vector_2+0x3e>
	else
		nb_impuls_wheel2--;
 66e:	80 91 09 01 	lds	r24, 0x0109
 672:	90 91 0a 01 	lds	r25, 0x010A
 676:	01 97       	sbiw	r24, 0x01	; 1
 678:	90 93 0a 01 	sts	0x010A, r25
 67c:	80 93 09 01 	sts	0x0109, r24
}
 680:	ff 91       	pop	r31
 682:	ef 91       	pop	r30
 684:	bf 91       	pop	r27
 686:	af 91       	pop	r26
 688:	9f 91       	pop	r25
 68a:	8f 91       	pop	r24
 68c:	7f 91       	pop	r23
 68e:	6f 91       	pop	r22
 690:	5f 91       	pop	r21
 692:	4f 91       	pop	r20
 694:	3f 91       	pop	r19
 696:	2f 91       	pop	r18
 698:	0f 90       	pop	r0
 69a:	0f be       	out	0x3f, r0	; 63
 69c:	0f 90       	pop	r0
 69e:	1f 90       	pop	r1
 6a0:	18 95       	reti

000006a2 <__vector_1>:
{
	return (((unsigned long)nb_impuls_wheel2 * 256) / MAX_IMPULSION);
}

ISR(INT0_vect)
{
 6a2:	1f 92       	push	r1
 6a4:	0f 92       	push	r0
 6a6:	0f b6       	in	r0, 0x3f	; 63
 6a8:	0f 92       	push	r0
 6aa:	11 24       	eor	r1, r1
 6ac:	2f 93       	push	r18
 6ae:	3f 93       	push	r19
 6b0:	4f 93       	push	r20
 6b2:	5f 93       	push	r21
 6b4:	6f 93       	push	r22
 6b6:	7f 93       	push	r23
 6b8:	8f 93       	push	r24
 6ba:	9f 93       	push	r25
 6bc:	af 93       	push	r26
 6be:	bf 93       	push	r27
 6c0:	ef 93       	push	r30
 6c2:	ff 93       	push	r31
	if(get_rotation_motor1() == CLOCKWISE)	//Sens à vérifier !
 6c4:	d6 dd       	rcall	.-1108   	; 0x272 <get_rotation_motor1>
 6c6:	81 30       	cpi	r24, 0x01	; 1
 6c8:	31 f4       	brne	.+12     	; 0x6d6 <__vector_1+0x34>
		nb_impuls_wheel1++;
 6ca:	80 91 0b 01 	lds	r24, 0x010B
 6ce:	90 91 0c 01 	lds	r25, 0x010C
 6d2:	01 96       	adiw	r24, 0x01	; 1
 6d4:	05 c0       	rjmp	.+10     	; 0x6e0 <__vector_1+0x3e>
	else
		nb_impuls_wheel1--;
 6d6:	80 91 0b 01 	lds	r24, 0x010B
 6da:	90 91 0c 01 	lds	r25, 0x010C
 6de:	01 97       	sbiw	r24, 0x01	; 1
 6e0:	90 93 0c 01 	sts	0x010C, r25
 6e4:	80 93 0b 01 	sts	0x010B, r24
}
 6e8:	ff 91       	pop	r31
 6ea:	ef 91       	pop	r30
 6ec:	bf 91       	pop	r27
 6ee:	af 91       	pop	r26
 6f0:	9f 91       	pop	r25
 6f2:	8f 91       	pop	r24
 6f4:	7f 91       	pop	r23
 6f6:	6f 91       	pop	r22
 6f8:	5f 91       	pop	r21
 6fa:	4f 91       	pop	r20
 6fc:	3f 91       	pop	r19
 6fe:	2f 91       	pop	r18
 700:	0f 90       	pop	r0
 702:	0f be       	out	0x3f, r0	; 63
 704:	0f 90       	pop	r0
 706:	1f 90       	pop	r1
 708:	18 95       	reti

0000070a <init_timer1>:

#include "timer1.h"

void init_timer1(void)
{
	TCCR1B |= (1<<WGM12);	//CTC
 70a:	e1 e8       	ldi	r30, 0x81	; 129
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	80 81       	ld	r24, Z
 710:	88 60       	ori	r24, 0x08	; 8
 712:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A);	//Enable OCIE1A
 714:	ef e6       	ldi	r30, 0x6F	; 111
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	80 81       	ld	r24, Z
 71a:	82 60       	ori	r24, 0x02	; 2
 71c:	80 83       	st	Z, r24

	flag_timer1 = FALSE;
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	80 93 03 01 	sts	0x0103, r24
}
 724:	08 95       	ret

00000726 <start_timer1>:

//Prescaler 8 => 65536ms MAX
void start_timer1(unsigned int time)
{
	cli();
 726:	f8 94       	cli
	OCR1A = time;
 728:	90 93 89 00 	sts	0x0089, r25
 72c:	80 93 88 00 	sts	0x0088, r24
	sei();
 730:	78 94       	sei

	TCCR1B |= (1<<CS11);  //start - Prescaler 8
 732:	e1 e8       	ldi	r30, 0x81	; 129
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	80 81       	ld	r24, Z
 738:	82 60       	ori	r24, 0x02	; 2
 73a:	80 83       	st	Z, r24
}
 73c:	08 95       	ret

0000073e <stop_timer1>:

void stop_timer1(void)
{
	TCCR1B &= 0b11111101;
 73e:	e1 e8       	ldi	r30, 0x81	; 129
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	80 81       	ld	r24, Z
 744:	8d 7f       	andi	r24, 0xFD	; 253
 746:	80 83       	st	Z, r24

	cli();	//Reset timer
 748:	f8 94       	cli
	TCNT1 = 0;
 74a:	10 92 85 00 	sts	0x0085, r1
 74e:	10 92 84 00 	sts	0x0084, r1
	sei();
 752:	78 94       	sei
}
 754:	08 95       	ret

00000756 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 756:	1f 92       	push	r1
 758:	0f 92       	push	r0
 75a:	0f b6       	in	r0, 0x3f	; 63
 75c:	0f 92       	push	r0
 75e:	11 24       	eor	r1, r1
	flag_timer1 = TRUE;	//Force à quitter la boucle de getchar_usart();
 760:	10 92 03 01 	sts	0x0103, r1
}
 764:	0f 90       	pop	r0
 766:	0f be       	out	0x3f, r0	; 63
 768:	0f 90       	pop	r0
 76a:	1f 90       	pop	r1
 76c:	18 95       	reti

0000076e <__udivmodsi4>:
 76e:	a1 e2       	ldi	r26, 0x21	; 33
 770:	1a 2e       	mov	r1, r26
 772:	aa 1b       	sub	r26, r26
 774:	bb 1b       	sub	r27, r27
 776:	fd 01       	movw	r30, r26
 778:	0d c0       	rjmp	.+26     	; 0x794 <__udivmodsi4_ep>

0000077a <__udivmodsi4_loop>:
 77a:	aa 1f       	adc	r26, r26
 77c:	bb 1f       	adc	r27, r27
 77e:	ee 1f       	adc	r30, r30
 780:	ff 1f       	adc	r31, r31
 782:	a2 17       	cp	r26, r18
 784:	b3 07       	cpc	r27, r19
 786:	e4 07       	cpc	r30, r20
 788:	f5 07       	cpc	r31, r21
 78a:	20 f0       	brcs	.+8      	; 0x794 <__udivmodsi4_ep>
 78c:	a2 1b       	sub	r26, r18
 78e:	b3 0b       	sbc	r27, r19
 790:	e4 0b       	sbc	r30, r20
 792:	f5 0b       	sbc	r31, r21

00000794 <__udivmodsi4_ep>:
 794:	66 1f       	adc	r22, r22
 796:	77 1f       	adc	r23, r23
 798:	88 1f       	adc	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	1a 94       	dec	r1
 79e:	69 f7       	brne	.-38     	; 0x77a <__udivmodsi4_loop>
 7a0:	60 95       	com	r22
 7a2:	70 95       	com	r23
 7a4:	80 95       	com	r24
 7a6:	90 95       	com	r25
 7a8:	9b 01       	movw	r18, r22
 7aa:	ac 01       	movw	r20, r24
 7ac:	bd 01       	movw	r22, r26
 7ae:	cf 01       	movw	r24, r30
 7b0:	08 95       	ret

000007b2 <memset>:
 7b2:	dc 01       	movw	r26, r24
 7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <memset+0x6>
 7b6:	6d 93       	st	X+, r22
 7b8:	41 50       	subi	r20, 0x01	; 1
 7ba:	50 40       	sbci	r21, 0x00	; 0
 7bc:	e0 f7       	brcc	.-8      	; 0x7b6 <memset+0x4>
 7be:	08 95       	ret

000007c0 <_exit>:
 7c0:	f8 94       	cli

000007c2 <__stop_program>:
 7c2:	ff cf       	rjmp	.-2      	; 0x7c2 <__stop_program>
