
Carte_capteur.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000112  00800100  00001ba6  00001c3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ba6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000057  00800212  00800212  00001d4c  2**0
                  ALLOC
  3 .debug_aranges 000001a0  00000000  00000000  00001d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006c9  00000000  00000000  00001eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001448  00000000  00000000  000025b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090a  00000000  00000000  000039fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001807  00000000  00000000  00004307  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000380  00000000  00000000  00005b10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000803  00000000  00000000  00005e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000911  00000000  00000000  00006693  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	6e c6       	rjmp	.+3292   	; 0xcea <__vector_6>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	f5 c5       	rjmp	.+3050   	; 0xc02 <__vector_11>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	3f c2       	rjmp	.+1150   	; 0x4a4 <__vector_18>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	d4 e0       	ldi	r29, 0x04	; 4
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
      40:	12 e0       	ldi	r17, 0x02	; 2
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	b1 e0       	ldi	r27, 0x01	; 1
      46:	e6 ea       	ldi	r30, 0xA6	; 166
      48:	fb e1       	ldi	r31, 0x1B	; 27
      4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
      50:	a2 31       	cpi	r26, 0x12	; 18
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
      56:	12 e0       	ldi	r17, 0x02	; 2
      58:	a2 e1       	ldi	r26, 0x12	; 18
      5a:	b2 e0       	ldi	r27, 0x02	; 2
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	a9 36       	cpi	r26, 0x69	; 105
      62:	b1 07       	cpc	r27, r17
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	ad d2       	rcall	.+1370   	; 0x5c2 <main>
      68:	9c cd       	rjmp	.-1224   	; 0xfffffba2 <__eeprom_end+0xff7efba2>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <process_bcc_3964r>:
//Permet de pré-calculer le bcc avant l'envoi d'une trame
//Paramètres : - data[] => tableau à envoyer par le protocole
//			   - lenght => longueur du tableau data[]
//Valeur de retour : - le bcc pré-calculé
char process_bcc_3964r(char data[], unsigned char lenght)
{
      6c:	fc 01       	movw	r30, r24
      6e:	92 e0       	ldi	r25, 0x02	; 2
      70:	20 e0       	ldi	r18, 0x00	; 0
      72:	07 c0       	rjmp	.+14     	; 0x82 <process_bcc_3964r+0x16>
	unsigned char bcc = 0, i;

	bcc ^= STX;
	for(i=0; i<lenght; i++)
	{
		bcc ^= data[i];
      74:	80 81       	ld	r24, Z
      76:	98 27       	eor	r25, r24
		//On compte un double DLE
		if(data[i] == DLE)
      78:	80 31       	cpi	r24, 0x10	; 16
      7a:	09 f4       	brne	.+2      	; 0x7e <process_bcc_3964r+0x12>
			bcc ^= DLE;
      7c:	98 27       	eor	r25, r24
char process_bcc_3964r(char data[], unsigned char lenght)
{
	unsigned char bcc = 0, i;

	bcc ^= STX;
	for(i=0; i<lenght; i++)
      7e:	2f 5f       	subi	r18, 0xFF	; 255
      80:	31 96       	adiw	r30, 0x01	; 1
      82:	26 17       	cp	r18, r22
      84:	b8 f3       	brcs	.-18     	; 0x74 <process_bcc_3964r+0x8>
	}
	bcc ^= DLE;
	bcc ^= ETX;

	return bcc;
}
      86:	83 e1       	ldi	r24, 0x13	; 19
      88:	89 27       	eor	r24, r25
      8a:	08 95       	ret

0000008c <sum_error_3964r>:
char sum_error_3964r(void)
{
	unsigned char sum, i;

	for(i=0, sum=0; i<NB_ERRORS; i++)
		sum += tab_error_3964r[i];
      8c:	80 91 18 02 	lds	r24, 0x0218
      90:	90 91 17 02 	lds	r25, 0x0217
      94:	89 0f       	add	r24, r25
      96:	90 91 19 02 	lds	r25, 0x0219
      9a:	89 0f       	add	r24, r25
      9c:	90 91 1a 02 	lds	r25, 0x021A
      a0:	89 0f       	add	r24, r25
      a2:	90 91 1b 02 	lds	r25, 0x021B

	return sum;
}
      a6:	89 0f       	add	r24, r25
      a8:	08 95       	ret

000000aa <get_data_3964r>:
//Fonction get_data_3964r
//Recoi des données sur le protocole 3964 par le port série
//Paramètres : - data[] => tableau qui va recevoir les données par le protocole
//Valeur de retour : Aucune
void get_data_3964r(char data[])
{
      aa:	9f 92       	push	r9
      ac:	af 92       	push	r10
      ae:	bf 92       	push	r11
      b0:	cf 92       	push	r12
      b2:	df 92       	push	r13
      b4:	ef 92       	push	r14
      b6:	ff 92       	push	r15
      b8:	0f 93       	push	r16
      ba:	1f 93       	push	r17
      bc:	df 93       	push	r29
      be:	cf 93       	push	r28
      c0:	00 d0       	rcall	.+0      	; 0xc2 <get_data_3964r+0x18>
      c2:	0f 92       	push	r0
      c4:	cd b7       	in	r28, 0x3d	; 61
      c6:	de b7       	in	r29, 0x3e	; 62
      c8:	6c 01       	movw	r12, r24
      ca:	10 e0       	ldi	r17, 0x00	; 0
		//Désactivation de l'interruption de reception usart
		DISABLE_RX_INT_USART;	
		//Initialisation des variables
		i = 0;
		prev_c = 0;
		flag_timer1 = FALSE;
      cc:	99 24       	eor	r9, r9
      ce:	93 94       	inc	r9
		flag_error	= FALSE;
		//Initialise le tableau flag_dle avec la valeur FALSE
		memset(flag_dle,FALSE,3);
      d0:	5e 01       	movw	r10, r28
      d2:	08 94       	sec
      d4:	a1 1c       	adc	r10, r1
      d6:	b1 1c       	adc	r11, r1

	pass = 0;
	do
	{
		//Désactivation de l'interruption de reception usart
		DISABLE_RX_INT_USART;	
      d8:	80 91 c1 00 	lds	r24, 0x00C1
      dc:	8f 77       	andi	r24, 0x7F	; 127
      de:	80 93 c1 00 	sts	0x00C1, r24
		//Initialisation des variables
		i = 0;
		prev_c = 0;
		flag_timer1 = FALSE;
      e2:	90 92 1c 02 	sts	0x021C, r9
		flag_error	= FALSE;
		//Initialise le tableau flag_dle avec la valeur FALSE
		memset(flag_dle,FALSE,3);
      e6:	c5 01       	movw	r24, r10
      e8:	61 e0       	ldi	r22, 0x01	; 1
      ea:	70 e0       	ldi	r23, 0x00	; 0
      ec:	43 e0       	ldi	r20, 0x03	; 3
      ee:	50 e0       	ldi	r21, 0x00	; 0
      f0:	ef dc       	rcall	.-1570   	; 0xfffffad0 <__eeprom_end+0xff7efad0>
	
		//On attend de recevoir un caractère
		if (pass==1)	
      f2:	11 30       	cpi	r17, 0x01	; 1
      f4:	11 f4       	brne	.+4      	; 0xfa <get_data_3964r+0x50>
		{
			c = getchar_usart();
      f6:	ac d5       	rcall	.+2904   	; 0xc50 <getchar_usart>
      f8:	02 c0       	rjmp	.+4      	; 0xfe <get_data_3964r+0x54>
		}
		else
		{
			c = UDR0 ;// Mettre dans le buffer l'octet reçu sur RX	
      fa:	80 91 c6 00 	lds	r24, 0x00C6
			pass=1;
		}

		//Si on reçoi un STX
		if(c == STX)
      fe:	82 30       	cpi	r24, 0x02	; 2
     100:	09 f0       	breq	.+2      	; 0x104 <get_data_3964r+0x5a>
     102:	55 c0       	rjmp	.+170    	; 0x1ae <get_data_3964r+0x104>
		{
			//Calcul du bcc
			bcc = STX;

			//On répond DLE
			putchar_usart(DLE);
     104:	80 e1       	ldi	r24, 0x10	; 16
     106:	9c d5       	rcall	.+2872   	; 0xc40 <putchar_usart>
     108:	ff 24       	eor	r15, r15
     10a:	10 e0       	ldi	r17, 0x00	; 0
     10c:	82 e0       	ldi	r24, 0x02	; 2
     10e:	e8 2e       	mov	r14, r24

			//Début de la boucle de réception
			do
			{
				//Démarrage du timer avec la valeur de timeout TIMEOUT_MS
				start_timer1(TIMEOUT_MS);
     110:	80 e8       	ldi	r24, 0x80	; 128
     112:	9a e1       	ldi	r25, 0x1A	; 26
     114:	5e d5       	rcall	.+2748   	; 0xbd2 <start_timer1>
				
				//Attend de recoir un caractère
				//Passage à l'instruction suivant si le timeout est déclenché (flag_timer1 == TRUE)
				c = getchar_usart();
     116:	9c d5       	rcall	.+2872   	; 0xc50 <getchar_usart>
     118:	08 2f       	mov	r16, r24
				//Stop le timer1
				stop_timer1();
     11a:	67 d5       	rcall	.+2766   	; 0xbea <stop_timer1>
				
				//Si le timeout n'a pas expiré
				if(flag_timer1 == FALSE)
     11c:	90 91 1c 02 	lds	r25, 0x021C
     120:	91 30       	cpi	r25, 0x01	; 1
     122:	41 f5       	brne	.+80     	; 0x174 <get_data_3964r+0xca>
				{
					//Calcul du bcc					
					bcc ^= c;
     124:	e0 26       	eor	r14, r16
					//Machine d'état pour le contrôle des double DLE
					//Cette machine d'état permet de différencier 
					//les doubles DLE et le DLE de terminaison des données utiles.

					//Si le caractère précédent est différent d'un DLE et que le caractère reçu est un DLE
					if((prev_c != DLE) && (c == DLE))
     126:	80 e1       	ldi	r24, 0x10	; 16
     128:	f8 16       	cp	r15, r24
     12a:	19 f0       	breq	.+6      	; 0x132 <get_data_3964r+0x88>
     12c:	00 31       	cpi	r16, 0x10	; 16
     12e:	a9 f4       	brne	.+42     	; 0x15a <get_data_3964r+0xb0>
     130:	0d c0       	rjmp	.+26     	; 0x14c <get_data_3964r+0xa2>
						flag_dle[2] = FALSE;
					}
					else
					{
						//Si on est en présence d'un double DLE
						if((prev_c == DLE) && (c == DLE))
     132:	00 31       	cpi	r16, 0x10	; 16
     134:	79 f4       	brne	.+30     	; 0x154 <get_data_3964r+0xaa>
						{
							//Vérification d'état (1er passage)
							if(flag_dle[1] == FALSE)
     136:	8a 81       	ldd	r24, Y+2	; 0x02
     138:	81 30       	cpi	r24, 0x01	; 1
     13a:	41 f4       	brne	.+16     	; 0x14c <get_data_3964r+0xa2>
							{
								//Mise à jour des états
								flag_dle[0] = FALSE;
     13c:	89 83       	std	Y+1, r24	; 0x01
								flag_dle[1] = TRUE;
     13e:	1a 82       	std	Y+2, r1	; 0x02
								flag_dle[2] = FALSE;
     140:	8b 83       	std	Y+3, r24	; 0x03
								
								//Place la valeur DLE dans le tabeau data
								data[i] = DLE;
     142:	f6 01       	movw	r30, r12
     144:	e1 0f       	add	r30, r17
     146:	f1 1d       	adc	r31, r1
     148:	f0 82       	st	Z, r15
     14a:	0e c0       	rjmp	.+28     	; 0x168 <get_data_3964r+0xbe>
							}
							//Si 3 DLE consécutifs
							else
							{
								//Mise à jour des états
								flag_dle[0] = TRUE;
     14c:	19 82       	std	Y+1, r1	; 0x01
								flag_dle[1] = FALSE;
     14e:	9a 83       	std	Y+2, r25	; 0x02
								flag_dle[2] = FALSE;
     150:	9b 83       	std	Y+3, r25	; 0x03
     152:	0b c0       	rjmp	.+22     	; 0x16a <get_data_3964r+0xc0>
						{
							//Si le caractère présent est différent de DLE mais que le précédent est un DLE
							if((prev_c == DLE) && (c != DLE))
							{
								//Mise à jour des états
								flag_dle[1] = FALSE;
     154:	9a 83       	std	Y+2, r25	; 0x02
								flag_dle[2] = TRUE;
     156:	1b 82       	std	Y+3, r1	; 0x03
     158:	03 c0       	rjmp	.+6      	; 0x160 <get_data_3964r+0xb6>
							}

							else
							{
								//Mise à jour des états
								flag_dle[0] = FALSE;
     15a:	99 83       	std	Y+1, r25	; 0x01
								flag_dle[1] = FALSE;
     15c:	9a 83       	std	Y+2, r25	; 0x02
								flag_dle[2] = FALSE;
     15e:	9b 83       	std	Y+3, r25	; 0x03
								
								//Place la valeur c dans le tabeau data
								data[i] = c;
     160:	f6 01       	movw	r30, r12
     162:	e1 0f       	add	r30, r17
     164:	f1 1d       	adc	r31, r1
     166:	00 83       	st	Z, r16
								//Incrémentation de l'indice du tableau
								i++;
     168:	1f 5f       	subi	r17, 0xFF	; 255
     16a:	f0 2e       	mov	r15, r16
					putchar_usart(NAK);
					//Sort de la boucle de reception
					break;
				}
			//On continue de recevoir des caractères tant que on a pas déterminer le DLE de terminaison
			}while(!((flag_dle[0] == TRUE) && (flag_dle[2] == TRUE)));
     16c:	89 81       	ldd	r24, Y+1	; 0x01
     16e:	88 23       	and	r24, r24
     170:	79 f6       	brne	.-98     	; 0x110 <get_data_3964r+0x66>
     172:	03 c0       	rjmp	.+6      	; 0x17a <get_data_3964r+0xd0>
				}
				//Si le timeout a expiré
				else
				{
					//Envoi du caractère NAK
					putchar_usart(NAK);
     174:	85 e1       	ldi	r24, 0x15	; 21
     176:	64 d5       	rcall	.+2760   	; 0xc40 <putchar_usart>
     178:	04 c0       	rjmp	.+8      	; 0x182 <get_data_3964r+0xd8>
					//Sort de la boucle de reception
					break;
     17a:	f0 2e       	mov	r15, r16
				}
			//On continue de recevoir des caractères tant que on a pas déterminer le DLE de terminaison
			}while(!((flag_dle[0] == TRUE) && (flag_dle[2] == TRUE)));
     17c:	8b 81       	ldd	r24, Y+3	; 0x03
     17e:	88 23       	and	r24, r24
     180:	39 f6       	brne	.-114    	; 0x110 <get_data_3964r+0x66>

			//Si le timeout n'a pas expiré
			if(flag_timer1 == FALSE)
     182:	80 91 1c 02 	lds	r24, 0x021C
     186:	81 30       	cpi	r24, 0x01	; 1
     188:	91 f4       	brne	.+36     	; 0x1ae <get_data_3964r+0x104>
			{
				//Si le caractère dernier après le DLE est ETX
				if(c == ETX)
     18a:	03 30       	cpi	r16, 0x03	; 3
     18c:	81 f4       	brne	.+32     	; 0x1ae <get_data_3964r+0x104>
				{
					//Démarrage du timer1 avec valeur de timeout TIMEOUT_MS
					start_timer1(TIMEOUT_MS);
     18e:	80 e8       	ldi	r24, 0x80	; 128
     190:	9a e1       	ldi	r25, 0x1A	; 26
     192:	1f d5       	rcall	.+2622   	; 0xbd2 <start_timer1>
					//Attend de recevoir un caractère sur le port série
					c = getchar_usart();
     194:	5d d5       	rcall	.+2746   	; 0xc50 <getchar_usart>
     196:	18 2f       	mov	r17, r24
					//Arret du timeout
					stop_timer1();
     198:	28 d5       	rcall	.+2640   	; 0xbea <stop_timer1>
					
					//Si le timeout n'a pas expiré
					if(flag_timer1 == FALSE)
     19a:	80 91 1c 02 	lds	r24, 0x021C
     19e:	81 30       	cpi	r24, 0x01	; 1
     1a0:	31 f4       	brne	.+12     	; 0x1ae <get_data_3964r+0x104>
					{
						//Si le bcc reçu est égale au bcc calculé
						if(c == bcc)
     1a2:	1e 15       	cp	r17, r14
     1a4:	21 f4       	brne	.+8      	; 0x1ae <get_data_3964r+0x104>
							//Envoi d'un DLE
							putchar_usart(DLE);
     1a6:	80 e1       	ldi	r24, 0x10	; 16
     1a8:	4b d5       	rcall	.+2710   	; 0xc40 <putchar_usart>
     1aa:	91 e0       	ldi	r25, 0x01	; 1
     1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <get_data_3964r+0x10a>
		}
		//Si le 1er caractère de la trame n'est pas STX
		else
		{
			//Envoi un NAK
			putchar_usart(NAK);
     1ae:	85 e1       	ldi	r24, 0x15	; 21
     1b0:	47 d5       	rcall	.+2702   	; 0xc40 <putchar_usart>
     1b2:	90 e0       	ldi	r25, 0x00	; 0
			flag_error = TRUE;
		}
	//On continue la reception tant que le flag_timer1 ou le flag_error est à TRUE
	}while((flag_timer1 == TRUE) || (flag_error == TRUE));
     1b4:	80 91 1c 02 	lds	r24, 0x021C
     1b8:	11 e0       	ldi	r17, 0x01	; 1
     1ba:	88 23       	and	r24, r24
     1bc:	09 f4       	brne	.+2      	; 0x1c0 <get_data_3964r+0x116>
     1be:	8c cf       	rjmp	.-232    	; 0xd8 <get_data_3964r+0x2e>
     1c0:	99 23       	and	r25, r25
     1c2:	09 f4       	brne	.+2      	; 0x1c6 <get_data_3964r+0x11c>
     1c4:	89 cf       	rjmp	.-238    	; 0xd8 <get_data_3964r+0x2e>

	//On réactive les interruptions sur usart
	ENABLE_RX_INT_USART;
     1c6:	80 91 c1 00 	lds	r24, 0x00C1
     1ca:	80 68       	ori	r24, 0x80	; 128
     1cc:	80 93 c1 00 	sts	0x00C1, r24
}
     1d0:	0f 90       	pop	r0
     1d2:	0f 90       	pop	r0
     1d4:	0f 90       	pop	r0
     1d6:	cf 91       	pop	r28
     1d8:	df 91       	pop	r29
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	df 90       	pop	r13
     1e4:	cf 90       	pop	r12
     1e6:	bf 90       	pop	r11
     1e8:	af 90       	pop	r10
     1ea:	9f 90       	pop	r9
     1ec:	08 95       	ret

000001ee <send_data_3964r>:
//			   - lenght => longueur du tableau data[]
//Valeur de retour : - TRANSMISSION_SUCCESS
//					 - TRANSMISSION_FAILED
//					 - RECEPTION_MODE
char send_data_3964r(char data[], unsigned char lenght)
{
     1ee:	cf 92       	push	r12
     1f0:	df 92       	push	r13
     1f2:	ef 92       	push	r14
     1f4:	ff 92       	push	r15
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	d8 2e       	mov	r13, r24
     200:	e9 2e       	mov	r14, r25
     202:	f6 2e       	mov	r15, r22
	unsigned char bcc, i, c;
	//Initialisation du tableau tab_error_3964r
	memset(tab_error_3964r,0,5);
     204:	85 e0       	ldi	r24, 0x05	; 5
     206:	e7 e1       	ldi	r30, 0x17	; 23
     208:	f2 e0       	ldi	r31, 0x02	; 2
     20a:	df 01       	movw	r26, r30
     20c:	1d 92       	st	X+, r1
     20e:	8a 95       	dec	r24
     210:	e9 f7       	brne	.-6      	; 0x20c <send_data_3964r+0x1e>
     212:	2d 2d       	mov	r18, r13
     214:	39 2f       	mov	r19, r25
     216:	c9 01       	movw	r24, r18
     218:	fc 01       	movw	r30, r24
     21a:	20 e0       	ldi	r18, 0x00	; 0
     21c:	92 e0       	ldi	r25, 0x02	; 2
     21e:	07 c0       	rjmp	.+14     	; 0x22e <send_data_3964r+0x40>
	unsigned char bcc = 0, i;

	bcc ^= STX;
	for(i=0; i<lenght; i++)
	{
		bcc ^= data[i];
     220:	80 81       	ld	r24, Z
     222:	98 27       	eor	r25, r24
		//On compte un double DLE
		if(data[i] == DLE)
     224:	80 31       	cpi	r24, 0x10	; 16
     226:	09 f4       	brne	.+2      	; 0x22a <send_data_3964r+0x3c>
			bcc ^= DLE;
     228:	98 27       	eor	r25, r24
char process_bcc_3964r(char data[], unsigned char lenght)
{
	unsigned char bcc = 0, i;

	bcc ^= STX;
	for(i=0; i<lenght; i++)
     22a:	2f 5f       	subi	r18, 0xFF	; 255
     22c:	31 96       	adiw	r30, 0x01	; 1
     22e:	2f 15       	cp	r18, r15
     230:	b8 f3       	brcs	.-18     	; 0x220 <send_data_3964r+0x32>
		//On compte un double DLE
		if(data[i] == DLE)
			bcc ^= DLE;
	}
	bcc ^= DLE;
	bcc ^= ETX;
     232:	03 e1       	ldi	r16, 0x13	; 19
     234:	09 27       	eor	r16, r25
	bcc = process_bcc_3964r(data, lenght);

	do
	{
		//Initialisation des différents flag
		flag_timer1 = FALSE;
     236:	cc 24       	eor	r12, r12
     238:	c3 94       	inc	r12
     23a:	c0 92 1c 02 	sts	0x021C, r12
		flag_usart	= FALSE;
     23e:	c0 92 16 02 	sts	0x0216, r12

		//Envoie du caractère STX
		putchar_usart(STX);
     242:	82 e0       	ldi	r24, 0x02	; 2
     244:	fd d4       	rcall	.+2554   	; 0xc40 <putchar_usart>

		//Démarre le timer avec la valeur de timeout TIMEOUT_MS
		start_timer1(TIMEOUT_MS);
     246:	80 e8       	ldi	r24, 0x80	; 128
     248:	9a e1       	ldi	r25, 0x1A	; 26
     24a:	c3 d4       	rcall	.+2438   	; 0xbd2 <start_timer1>
		//Attend de recevoir un caractère
		//Si on a pas reçu de caractère avant le timeout, flag_timer1 se met à TRUE et on continue l'execution du programme
		c = getchar_usart();
     24c:	01 d5       	rcall	.+2562   	; 0xc50 <getchar_usart>
     24e:	18 2f       	mov	r17, r24
		//On arrete le timer1
		stop_timer1();
     250:	cc d4       	rcall	.+2456   	; 0xbea <stop_timer1>

		//On vérifie le timeout n'a pas été déclenché
		if(flag_timer1 == FALSE)
     252:	80 91 1c 02 	lds	r24, 0x021C
     256:	81 30       	cpi	r24, 0x01	; 1
     258:	09 f0       	breq	.+2      	; 0x25c <send_data_3964r+0x6e>
     25a:	7a c0       	rjmp	.+244    	; 0x350 <send_data_3964r+0x162>
		{
			//Si le caractère reçu est un DLE
			if(c == DLE)
     25c:	10 31       	cpi	r17, 0x10	; 16
     25e:	09 f0       	breq	.+2      	; 0x262 <send_data_3964r+0x74>
     260:	6d c0       	rjmp	.+218    	; 0x33c <send_data_3964r+0x14e>
			{
				//Activation l'interruption de l'usart en reception
				//Si un caracère est reçu durant l'envoie, flag_usart est mis à TRUE
				ENABLE_RX_INT_USART;
     262:	80 91 c1 00 	lds	r24, 0x00C1
     266:	80 68       	ori	r24, 0x80	; 128
     268:	80 93 c1 00 	sts	0x00C1, r24
     26c:	2d 2d       	mov	r18, r13
     26e:	3e 2d       	mov	r19, r14
     270:	c9 01       	movw	r24, r18
     272:	ec 01       	movw	r28, r24
     274:	10 e0       	ldi	r17, 0x00	; 0
     276:	11 c0       	rjmp	.+34     	; 0x29a <send_data_3964r+0xac>
				//On envoie le contenu du tableau data[]
				//En fonction de la longueur donnée en paramètre
				for(i=0; i<lenght; i++)
				{
					//Si on a pas reçu de caractère
					if(flag_usart == FALSE)
     278:	80 91 16 02 	lds	r24, 0x0216
     27c:	81 30       	cpi	r24, 0x01	; 1
     27e:	79 f4       	brne	.+30     	; 0x29e <send_data_3964r+0xb0>
					{
						//Envoi des caractères du tableau data[]
						putchar_usart(data[i]);
     280:	88 81       	ld	r24, Y
     282:	de d4       	rcall	.+2492   	; 0xc40 <putchar_usart>
						//Traitement du double DLE
						if(data[i] == DLE)
     284:	88 81       	ld	r24, Y
     286:	80 31       	cpi	r24, 0x10	; 16
     288:	31 f4       	brne	.+12     	; 0x296 <send_data_3964r+0xa8>
						{
							//Revérification du flag_usart
							if(flag_usart == FALSE)
     28a:	80 91 16 02 	lds	r24, 0x0216
     28e:	81 30       	cpi	r24, 0x01	; 1
     290:	31 f4       	brne	.+12     	; 0x29e <send_data_3964r+0xb0>
								//Envoi du 2eme DLE
								putchar_usart(DLE);
     292:	80 e1       	ldi	r24, 0x10	; 16
     294:	d5 d4       	rcall	.+2474   	; 0xc40 <putchar_usart>
				//Si un caracère est reçu durant l'envoie, flag_usart est mis à TRUE
				ENABLE_RX_INT_USART;
				
				//On envoie le contenu du tableau data[]
				//En fonction de la longueur donnée en paramètre
				for(i=0; i<lenght; i++)
     296:	1f 5f       	subi	r17, 0xFF	; 255
     298:	21 96       	adiw	r28, 0x01	; 1
     29a:	1f 15       	cp	r17, r15
     29c:	68 f3       	brcs	.-38     	; 0x278 <send_data_3964r+0x8a>
					else
						break;
				}
				
				//Vérification du flag_usart	
				if(flag_usart == FALSE)
     29e:	80 91 16 02 	lds	r24, 0x0216
     2a2:	81 30       	cpi	r24, 0x01	; 1
     2a4:	79 f5       	brne	.+94     	; 0x304 <send_data_3964r+0x116>
				{
					//Envoi du DLE pour signifier la fin des données utiles
					putchar_usart(DLE);
     2a6:	80 e1       	ldi	r24, 0x10	; 16
     2a8:	cb d4       	rcall	.+2454   	; 0xc40 <putchar_usart>
					//Vérification du flag_usart
					if(flag_usart == FALSE)
     2aa:	80 91 16 02 	lds	r24, 0x0216
     2ae:	81 30       	cpi	r24, 0x01	; 1
     2b0:	49 f5       	brne	.+82     	; 0x304 <send_data_3964r+0x116>
					{
						//Envoi de ETX
						putchar_usart(ETX);
     2b2:	83 e0       	ldi	r24, 0x03	; 3
     2b4:	c5 d4       	rcall	.+2442   	; 0xc40 <putchar_usart>
						//Vérification du flag_usart
						if(flag_usart == FALSE)
     2b6:	80 91 16 02 	lds	r24, 0x0216
     2ba:	81 30       	cpi	r24, 0x01	; 1
     2bc:	19 f5       	brne	.+70     	; 0x304 <send_data_3964r+0x116>
						{
							//Désactivation de l'interruption de reception usart
							DISABLE_RX_INT_USART;
     2be:	80 91 c1 00 	lds	r24, 0x00C1
     2c2:	8f 77       	andi	r24, 0x7F	; 127
     2c4:	80 93 c1 00 	sts	0x00C1, r24
							
							//Envoi du bcc
							putchar_usart(bcc);
     2c8:	80 2f       	mov	r24, r16
     2ca:	ba d4       	rcall	.+2420   	; 0xc40 <putchar_usart>

							//Vérification du flag_usart
							if(flag_usart == FALSE)
     2cc:	80 91 16 02 	lds	r24, 0x0216
     2d0:	81 30       	cpi	r24, 0x01	; 1
     2d2:	e9 f4       	brne	.+58     	; 0x30e <send_data_3964r+0x120>
							{
								//Démarrage du timer1 avec timeout de valeur TIMEOUT_MS
								start_timer1(TIMEOUT_MS);
     2d4:	80 e8       	ldi	r24, 0x80	; 128
     2d6:	9a e1       	ldi	r25, 0x1A	; 26
     2d8:	7c d4       	rcall	.+2296   	; 0xbd2 <start_timer1>
								//Attend la reception d'un caractère
								c = getchar_usart();
     2da:	ba d4       	rcall	.+2420   	; 0xc50 <getchar_usart>
     2dc:	18 2f       	mov	r17, r24
								//Arrete le timer1
								stop_timer1();
     2de:	85 d4       	rcall	.+2314   	; 0xbea <stop_timer1>

								//Vérification que le timeout n'a pas expiré
								if(flag_timer1 == FALSE)
     2e0:	80 91 1c 02 	lds	r24, 0x021C
     2e4:	81 30       	cpi	r24, 0x01	; 1
     2e6:	41 f4       	brne	.+16     	; 0x2f8 <send_data_3964r+0x10a>
								{
									//Si on a reçu un caractère différent de DLE
									if(c != DLE)
     2e8:	10 31       	cpi	r17, 0x10	; 16
     2ea:	b1 f0       	breq	.+44     	; 0x318 <send_data_3964r+0x12a>
										//Incrémentation du nombre d'erreurs
										tab_error_3964r[1]++;
     2ec:	80 91 18 02 	lds	r24, 0x0218
     2f0:	8f 5f       	subi	r24, 0xFF	; 255
     2f2:	80 93 18 02 	sts	0x0218, r24
     2f6:	10 c0       	rjmp	.+32     	; 0x318 <send_data_3964r+0x12a>
								}
								else
									//Incrémentation du nombre d'erreurs
									tab_error_3964r[2]++;
     2f8:	80 91 19 02 	lds	r24, 0x0219
     2fc:	8f 5f       	subi	r24, 0xFF	; 255
     2fe:	80 93 19 02 	sts	0x0219, r24
     302:	0a c0       	rjmp	.+20     	; 0x318 <send_data_3964r+0x12a>
					}
					//Si interruption par l'usart
					else
					{
						//Désactivation de l'interruption de reception usart
						DISABLE_RX_INT_USART;
     304:	80 91 c1 00 	lds	r24, 0x00C1
     308:	8f 77       	andi	r24, 0x7F	; 127
     30a:	80 93 c1 00 	sts	0x00C1, r24
						//Incrémentation du nombre d'erreurs
						tab_error_3964r[3]++;
     30e:	80 91 1a 02 	lds	r24, 0x021A
     312:	8f 5f       	subi	r24, 0xFF	; 255
     314:	80 93 1a 02 	sts	0x021A, r24
char sum_error_3964r(void)
{
	unsigned char sum, i;

	for(i=0, sum=0; i<NB_ERRORS; i++)
		sum += tab_error_3964r[i];
     318:	80 91 18 02 	lds	r24, 0x0218
     31c:	90 91 17 02 	lds	r25, 0x0217
     320:	89 0f       	add	r24, r25
     322:	90 91 19 02 	lds	r25, 0x0219
     326:	89 0f       	add	r24, r25
     328:	90 91 1a 02 	lds	r25, 0x021A
     32c:	89 0f       	add	r24, r25
		else
			//Incrémentation du nombre d'erreurs
			tab_error_3964r[4]++;

		//Si la somme des erreurs est supérieur au seuil max
		if(sum_error_3964r() == MAX_ERRORS)
     32e:	90 91 1b 02 	lds	r25, 0x021B
     332:	89 0f       	add	r24, r25
     334:	86 30       	cpi	r24, 0x06	; 6
     336:	91 f4       	brne	.+36     	; 0x35c <send_data_3964r+0x16e>
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	1b c0       	rjmp	.+54     	; 0x372 <send_data_3964r+0x184>
			}
			//Si le 1er caractère reçu n'est pas un DLE
			else
			{
				//Si le caractère est un STX
				if(c == STX)
     33c:	12 30       	cpi	r17, 0x02	; 2
     33e:	11 f4       	brne	.+4      	; 0x344 <send_data_3964r+0x156>
     340:	82 e0       	ldi	r24, 0x02	; 2
     342:	17 c0       	rjmp	.+46     	; 0x372 <send_data_3964r+0x184>
						flag_timer1 = TRUE;
				}
				//Si le 1er caractère est différent de DLE et STX
				else
					//Incrémentation du nombre d'erreurs
					tab_error_3964r[0]++;
     344:	80 91 17 02 	lds	r24, 0x0217
     348:	8f 5f       	subi	r24, 0xFF	; 255
     34a:	80 93 17 02 	sts	0x0217, r24
     34e:	e4 cf       	rjmp	.-56     	; 0x318 <send_data_3964r+0x12a>
			}
		}
		//Si le périphérique n'a pas répondu au STX
		else
			//Incrémentation du nombre d'erreurs
			tab_error_3964r[4]++;
     350:	80 91 1b 02 	lds	r24, 0x021B
     354:	8f 5f       	subi	r24, 0xFF	; 255
     356:	80 93 1b 02 	sts	0x021B, r24
     35a:	de cf       	rjmp	.-68     	; 0x318 <send_data_3964r+0x12a>
		if(sum_error_3964r() == MAX_ERRORS)
			//retourne une erreur de transmission
			return TRANSMISSION_FAILED;

	//On boucle tant que flag_timer1 ou flag_usart est a TRUE
	}while((flag_timer1 == TRUE) || (flag_usart == TRUE));
     35c:	80 91 1c 02 	lds	r24, 0x021C
     360:	88 23       	and	r24, r24
     362:	09 f4       	brne	.+2      	; 0x366 <send_data_3964r+0x178>
     364:	6a cf       	rjmp	.-300    	; 0x23a <send_data_3964r+0x4c>
     366:	80 91 16 02 	lds	r24, 0x0216
     36a:	88 23       	and	r24, r24
     36c:	09 f4       	brne	.+2      	; 0x370 <send_data_3964r+0x182>
     36e:	65 cf       	rjmp	.-310    	; 0x23a <send_data_3964r+0x4c>
     370:	80 e0       	ldi	r24, 0x00	; 0
	
	//la transmission s'est bien déroulée
	return TRANSMISSION_SUCCESS;
}
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	ff 90       	pop	r15
     37c:	ef 90       	pop	r14
     37e:	df 90       	pop	r13
     380:	cf 90       	pop	r12
     382:	08 95       	ret

00000384 <init_3964r>:
unsigned char tab_error_3964r[NB_ERRORS];

//Initialise les différents composants pour la communication en 3964r
void init_3964r(void)
{
	init_usart(MYUBRR);
     384:	87 e6       	ldi	r24, 0x67	; 103
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	48 d4       	rcall	.+2192   	; 0xc1a <init_usart>
	init_timer1();
     38a:	15 d4       	rcall	.+2090   	; 0xbb6 <init_timer1>

	//memset permet d'initialiser un tableau avec un valeur par default
	//On place la valeur 0 dans les 5 cellules de tab_error_3964r
	memset(tab_error_3964r,0,5);
     38c:	85 e0       	ldi	r24, 0x05	; 5
     38e:	e7 e1       	ldi	r30, 0x17	; 23
     390:	f2 e0       	ldi	r31, 0x02	; 2
     392:	df 01       	movw	r26, r30
     394:	1d 92       	st	X+, r1
     396:	8a 95       	dec	r24
     398:	e9 f7       	brne	.-6      	; 0x394 <init_3964r+0x10>
}
     39a:	08 95       	ret

0000039c <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     39c:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     3a0:	80 e2       	ldi	r24, 0x20	; 32
     3a2:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
     3a6:	08 95       	ret

000003a8 <i2c_start>:
  Issues a start condition and sends address and transfer direction.
  (7 bits for address and 1 bit for read/write)
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
     3a8:	98 2f       	mov	r25, r24
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     3aa:	84 ea       	ldi	r24, 0xA4	; 164
     3ac:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     3b0:	80 91 bc 00 	lds	r24, 0x00BC
     3b4:	87 ff       	sbrs	r24, 7
     3b6:	fc cf       	rjmp	.-8      	; 0x3b0 <i2c_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     3b8:	80 91 b9 00 	lds	r24, 0x00B9
     3bc:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     3be:	88 30       	cpi	r24, 0x08	; 8
     3c0:	21 f0       	breq	.+8      	; 0x3ca <i2c_start+0x22>
     3c2:	80 31       	cpi	r24, 0x10	; 16
     3c4:	11 f0       	breq	.+4      	; 0x3ca <i2c_start+0x22>
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	08 95       	ret

	// send device address (load address, and start transmission of address)
	TWDR = address; 
     3ca:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
     3ce:	84 e8       	ldi	r24, 0x84	; 132
     3d0:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed (when TWINT is set) and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     3d4:	80 91 bc 00 	lds	r24, 0x00BC
     3d8:	87 ff       	sbrs	r24, 7
     3da:	fc cf       	rjmp	.-8      	; 0x3d4 <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     3dc:	90 91 b9 00 	lds	r25, 0x00B9
     3e0:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     3e2:	98 31       	cpi	r25, 0x18	; 24
     3e4:	11 f4       	brne	.+4      	; 0x3ea <i2c_start+0x42>
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	08 95       	ret
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 34       	cpi	r25, 0x40	; 64
     3ee:	09 f0       	breq	.+2      	; 0x3f2 <i2c_start+0x4a>
     3f0:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
     3f2:	08 95       	ret

000003f4 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     3f4:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     3f6:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
     3f8:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     3fa:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     3fc:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     400:	80 91 bc 00 	lds	r24, 0x00BC
     404:	87 ff       	sbrs	r24, 7
     406:	fc cf       	rjmp	.-8      	; 0x400 <i2c_start_wait+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     408:	80 91 b9 00 	lds	r24, 0x00B9
     40c:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     40e:	88 30       	cpi	r24, 0x08	; 8
     410:	11 f0       	breq	.+4      	; 0x416 <i2c_start_wait+0x22>
     412:	80 31       	cpi	r24, 0x10	; 16
     414:	99 f7       	brne	.-26     	; 0x3fc <i2c_start_wait+0x8>
    
    	// send device address
    	TWDR = address;
     416:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
     41a:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     41e:	80 91 bc 00 	lds	r24, 0x00BC
     422:	87 ff       	sbrs	r24, 7
     424:	fc cf       	rjmp	.-8      	; 0x41e <i2c_start_wait+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     426:	80 91 b9 00 	lds	r24, 0x00B9
     42a:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     42c:	80 32       	cpi	r24, 0x20	; 32
     42e:	11 f0       	breq	.+4      	; 0x434 <i2c_start_wait+0x40>
     430:	88 35       	cpi	r24, 0x58	; 88
     432:	39 f4       	brne	.+14     	; 0x442 <i2c_start_wait+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     434:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     438:	80 91 bc 00 	lds	r24, 0x00BC
     43c:	84 fd       	sbrc	r24, 4
     43e:	fc cf       	rjmp	.-8      	; 0x438 <i2c_start_wait+0x44>
     440:	dd cf       	rjmp	.-70     	; 0x3fc <i2c_start_wait+0x8>
     442:	08 95       	ret

00000444 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     444:	b1 df       	rcall	.-158    	; 0x3a8 <i2c_start>

}/* i2c_rep_start */
     446:	08 95       	ret

00000448 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     448:	84 e9       	ldi	r24, 0x94	; 148
     44a:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     44e:	80 91 bc 00 	lds	r24, 0x00BC
     452:	84 fd       	sbrc	r24, 4
     454:	fc cf       	rjmp	.-8      	; 0x44e <i2c_stop+0x6>

}/* i2c_stop */
     456:	08 95       	ret

00000458 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     458:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     45c:	84 e8       	ldi	r24, 0x84	; 132
     45e:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     462:	80 91 bc 00 	lds	r24, 0x00BC
     466:	87 ff       	sbrs	r24, 7
     468:	fc cf       	rjmp	.-8      	; 0x462 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     46a:	80 91 b9 00 	lds	r24, 0x00B9
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	88 7f       	andi	r24, 0xF8	; 248
     472:	88 32       	cpi	r24, 0x28	; 40
     474:	09 f0       	breq	.+2      	; 0x478 <i2c_write+0x20>
     476:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     478:	89 2f       	mov	r24, r25
     47a:	08 95       	ret

0000047c <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     47c:	84 ec       	ldi	r24, 0xC4	; 196
     47e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     482:	80 91 bc 00 	lds	r24, 0x00BC
     486:	87 ff       	sbrs	r24, 7
     488:	fc cf       	rjmp	.-8      	; 0x482 <i2c_readAck+0x6>

    return TWDR;
     48a:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
     48e:	08 95       	ret

00000490 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     490:	84 e8       	ldi	r24, 0x84	; 132
     492:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     496:	80 91 bc 00 	lds	r24, 0x00BC
     49a:	87 ff       	sbrs	r24, 7
     49c:	fc cf       	rjmp	.-8      	; 0x496 <i2c_readNak+0x6>
	
    return TWDR;
     49e:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
     4a2:	08 95       	ret

000004a4 <__vector_18>:
/*************************/

/***** Interruption usart en reception *****/

ISR(USART_RX_vect)
{
     4a4:	1f 92       	push	r1
     4a6:	0f 92       	push	r0
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	0f 92       	push	r0
     4ac:	11 24       	eor	r1, r1
     4ae:	2f 93       	push	r18
     4b0:	8f 93       	push	r24
     4b2:	9f 93       	push	r25
     4b4:	ef 93       	push	r30
     4b6:	ff 93       	push	r31
	if(debug==FALSE)
     4b8:	80 91 06 01 	lds	r24, 0x0106
     4bc:	81 30       	cpi	r24, 0x01	; 1
     4be:	61 f4       	brne	.+24     	; 0x4d8 <__vector_18+0x34>
	{
		if(fonctionnement_RX==0) // mode d'envoi
     4c0:	80 91 38 02 	lds	r24, 0x0238
     4c4:	88 23       	and	r24, r24
     4c6:	19 f4       	brne	.+6      	; 0x4ce <__vector_18+0x2a>
		{
			//Si un caractère est reçu, on set le flag_usart à TRUE pour quitter la boucle de getchar_usart
			flag_usart = TRUE;
     4c8:	10 92 16 02 	sts	0x0216, r1
     4cc:	14 c0       	rjmp	.+40     	; 0x4f6 <__vector_18+0x52>
		}
		else if (fonctionnement_RX==1) // mode de réception
     4ce:	81 30       	cpi	r24, 0x01	; 1
     4d0:	91 f4       	brne	.+36     	; 0x4f6 <__vector_18+0x52>
		{
			NEED_RECEIVED = TRUE;		
     4d2:	10 92 03 01 	sts	0x0103, r1
     4d6:	0f c0       	rjmp	.+30     	; 0x4f6 <__vector_18+0x52>
		}
	}
	else
	{	
		data[datanumber] = UDR0;
     4d8:	80 91 13 02 	lds	r24, 0x0213
     4dc:	90 91 14 02 	lds	r25, 0x0214
     4e0:	20 91 c6 00 	lds	r18, 0x00C6
     4e4:	fc 01       	movw	r30, r24
     4e6:	e1 5c       	subi	r30, 0xC1	; 193
     4e8:	fd 4f       	sbci	r31, 0xFD	; 253
     4ea:	20 83       	st	Z, r18
		datanumber++;
     4ec:	01 96       	adiw	r24, 0x01	; 1
     4ee:	90 93 14 02 	sts	0x0214, r25
     4f2:	80 93 13 02 	sts	0x0213, r24
	}
}
     4f6:	ff 91       	pop	r31
     4f8:	ef 91       	pop	r30
     4fa:	9f 91       	pop	r25
     4fc:	8f 91       	pop	r24
     4fe:	2f 91       	pop	r18
     500:	0f 90       	pop	r0
     502:	0f be       	out	0x3f, r0	; 63
     504:	0f 90       	pop	r0
     506:	1f 90       	pop	r1
     508:	18 95       	reti

0000050a <transmission>:
}


/***** Transmission vers FoxBoard *****/
void transmission(char commande, char data_low, char data_high)
{
     50a:	ff 92       	push	r15
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	16 2f       	mov	r17, r22
     512:	04 2f       	mov	r16, r20
	if(debug==FALSE)
     514:	f0 90 06 01 	lds	r15, 0x0106
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	f9 16       	cp	r15, r25
     51c:	d9 f4       	brne	.+54     	; 0x554 <transmission+0x4a>
	{
		data_to_transmit[0]=commande;
     51e:	80 93 24 02 	sts	0x0224, r24
		data_to_transmit[1]=data_high;								// Charge le byte de poid faible dans le premier byte			
     522:	40 93 25 02 	sts	0x0225, r20
		data_to_transmit[2]=data_low;								// Charge le byte de poid fort dans le deuxième byte
     526:	60 93 26 02 	sts	0x0226, r22

		DISABLE_RX_INT_USART;
     52a:	80 91 c1 00 	lds	r24, 0x00C1
     52e:	8f 77       	andi	r24, 0x7F	; 127
     530:	80 93 c1 00 	sts	0x00C1, r24
		fonctionnement_RX = 0 ; 									// Indique que l'on va se mettre en mode d'envoi de donné vers la Fox
     534:	10 92 38 02 	sts	0x0238, r1
		TRANSMIT_STATUT = send_data_3964r(data_to_transmit,3);			// Envoie les deux bytes en protocole 3964	
     538:	84 e2       	ldi	r24, 0x24	; 36
     53a:	92 e0       	ldi	r25, 0x02	; 2
     53c:	63 e0       	ldi	r22, 0x03	; 3
     53e:	57 de       	rcall	.-850    	; 0x1ee <send_data_3964r>
     540:	80 93 29 02 	sts	0x0229, r24
		fonctionnement_RX = 1 ;									// Indique que l'on se remet en mode de réception de donnée venant de la Fox
     544:	f0 92 38 02 	sts	0x0238, r15
	
		ENABLE_RX_INT_USART;
     548:	80 91 c1 00 	lds	r24, 0x00C1
     54c:	80 68       	ori	r24, 0x80	; 128
     54e:	80 93 c1 00 	sts	0x00C1, r24
     552:	05 c0       	rjmp	.+10     	; 0x55e <transmission+0x54>
	}
	else
	{
		putchar_usart(commande);
     554:	75 d3       	rcall	.+1770   	; 0xc40 <putchar_usart>
		putchar_usart(data_low);
     556:	81 2f       	mov	r24, r17
     558:	73 d3       	rcall	.+1766   	; 0xc40 <putchar_usart>
		putchar_usart(data_high);
     55a:	80 2f       	mov	r24, r16
     55c:	71 d3       	rcall	.+1762   	; 0xc40 <putchar_usart>
	}
}
     55e:	1f 91       	pop	r17
     560:	0f 91       	pop	r16
     562:	ff 90       	pop	r15
     564:	08 95       	ret

00000566 <init>:

/***** Initialisation *****/
void init()							
{
	unsigned char i ;
	cli();							// Désactiver toutes les interruptions
     566:	f8 94       	cli

	sDDR(DDRD,1);					// mettre port TX en sortie
     568:	51 9a       	sbi	0x0a, 1	; 10
	sbiBF(PORTD,0); 				// mettre pull-up sur RX
     56a:	58 9a       	sbi	0x0b, 0	; 11
     56c:	ef e3       	ldi	r30, 0x3F	; 63
     56e:	f2 e0       	ldi	r31, 0x02	; 2

	for(i=0;i<=DATADIMENSION-1;i++)				// Initialiser les demandes à 0 qui signifie qu'il n'y a pas de demande de la part de la FoxBoard
	{
		data[i]=0x00;
     570:	11 92       	st	Z+, r1
	cli();							// Désactiver toutes les interruptions

	sDDR(DDRD,1);					// mettre port TX en sortie
	sbiBF(PORTD,0); 				// mettre pull-up sur RX

	for(i=0;i<=DATADIMENSION-1;i++)				// Initialiser les demandes à 0 qui signifie qu'il n'y a pas de demande de la part de la FoxBoard
     572:	82 e0       	ldi	r24, 0x02	; 2
     574:	e8 35       	cpi	r30, 0x58	; 88
     576:	f8 07       	cpc	r31, r24
     578:	d9 f7       	brne	.-10     	; 0x570 <init+0xa>
	{
		data[i]=0x00;
	}

    i2c_init();              		// Initialisation interface I2C
     57a:	10 df       	rcall	.-480    	; 0x39c <i2c_init>

	init_3964r();					// Initialisation de la communication en protocole 3964 avec la FoxBoard
     57c:	03 df       	rcall	.-506    	; 0x384 <init_3964r>
	ENABLE_RX_INT_USART;			// Autoriser les interruption série RX
     57e:	80 91 c1 00 	lds	r24, 0x00C1
     582:	80 68       	ori	r24, 0x80	; 128
     584:	80 93 c1 00 	sts	0x00C1, r24
	fonctionnement_RX = 1;			// mode de réception
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	80 93 38 02 	sts	0x0238, r24

	//init_watchdog();				// Initilise les reset

	InitADC();						// Initialise les ADC
     58e:	6d d4       	rcall	.+2266   	; 0xe6a <InitADC>

	StartADC(0);
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	8b d4       	rcall	.+2326   	; 0xeaa <StartADC>
	ReadADC(listTemp);
     594:	8d e1       	ldi	r24, 0x1D	; 29
     596:	92 e0       	ldi	r25, 0x02	; 2
     598:	7c d4       	rcall	.+2296   	; 0xe92 <ReadADC>
	convertPressure(listTemp, Result, 0);
     59a:	8d e1       	ldi	r24, 0x1D	; 29
     59c:	92 e0       	ldi	r25, 0x02	; 2
     59e:	63 e2       	ldi	r22, 0x23	; 35
     5a0:	72 e0       	ldi	r23, 0x02	; 2
     5a2:	40 e0       	ldi	r20, 0x00	; 0
     5a4:	50 e0       	ldi	r21, 0x00	; 0
     5a6:	21 d5       	rcall	.+2626   	; 0xfea <convertPressure>
	ProfInit = Result[0] + Result[1]*256;
     5a8:	90 91 24 02 	lds	r25, 0x0224
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	20 91 23 02 	lds	r18, 0x0223
     5b2:	82 0f       	add	r24, r18
     5b4:	91 1d       	adc	r25, r1
     5b6:	90 93 60 02 	sts	0x0260, r25
     5ba:	80 93 5f 02 	sts	0x025F, r24

	sei();							// Activer toutes les interruptions	
     5be:	78 94       	sei
	//transmission(0xFF, Result[0], Result[1]);
}
     5c0:	08 95       	ret

000005c2 <main>:
/*****************************************************************/
/*********************** Programme principal *********************/
/*****************************************************************/

int main(void)
{
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
	/***** Variables locales *****/
	unsigned char dev1_access, dev2_access, dev3_access, dev4_access, dev5_access, dev6_access, dev7_access, dev8_access, dev9_access;						// Indique si les informations ont bien été prise du capteur

	init();									// Initialisations globales
     5c6:	cf df       	rcall	.-98     	; 0x566 <init>
	
	dev1_access = initDS7505(ADD1_DS7505);	// Initialiser le capteur de T° n°1
     5c8:	80 e9       	ldi	r24, 0x90	; 144
     5ca:	bd d3       	rcall	.+1914   	; 0xd46 <initDS7505>
	dev2_access = initDS7505(ADD2_DS7505);	// Initialiser le capteur de T° n°2
     5cc:	82 e9       	ldi	r24, 0x92	; 146
     5ce:	bb d3       	rcall	.+1910   	; 0xd46 <initDS7505>
	dev3_access = initDS7505(ADD3_DS7505);	// Initialiser le capteur de T° n°3
     5d0:	84 e9       	ldi	r24, 0x94	; 148
     5d2:	b9 d3       	rcall	.+1906   	; 0xd46 <initDS7505>
	dev4_access = initDS7505(ADD4_DS7505);	// Initialiser le capteur de T° n°4
     5d4:	86 e9       	ldi	r24, 0x96	; 150
     5d6:	b7 d3       	rcall	.+1902   	; 0xd46 <initDS7505>
	dev5_access = initDS7505(ADD5_DS7505);	// Initialiser le capteur de T° n°5
     5d8:	88 e9       	ldi	r24, 0x98	; 152
     5da:	b5 d3       	rcall	.+1898   	; 0xd46 <initDS7505>
	dev6_access = initDS7505(ADD6_DS7505);	// Initialiser le capteur de T° n°6
     5dc:	8a e9       	ldi	r24, 0x9A	; 154
     5de:	b3 d3       	rcall	.+1894   	; 0xd46 <initDS7505>
	dev7_access = initDS7505(ADD7_DS7505);	// Initialiser le capteur de T° n°7
     5e0:	8c e9       	ldi	r24, 0x9C	; 156
     5e2:	b1 d3       	rcall	.+1890   	; 0xd46 <initDS7505>
	dev8_access = initDS7505(ADD8_DS7505);	// Initialiser le capteur de T° n°8
     5e4:	8e e9       	ldi	r24, 0x9E	; 158
     5e6:	af d3       	rcall	.+1886   	; 0xd46 <initDS7505>
	dev9_access = initSHT21(ADD1_SHT21);	// Initialiser le capteur d'%RH n°1	
     5e8:	80 e8       	ldi	r24, 0x80	; 128
     5ea:	c8 d4       	rcall	.+2448   	; 0xf7c <initSHT21>
	{	
		if(NEED_RECEIVED == TRUE) 
		{
			get_data_3964r(data);
			data[DATADIMENSION-1]=0x00; // Force le dernier bit des demandes à 0.  Au maximum 4 demandes qui n'ont pas été traitée peuvent être enregistrée.	
			NEED_RECEIVED = FALSE;
     5ec:	01 e0       	ldi	r16, 0x01	; 1
					HUM2L=0xFF;
					transmission(CMD_HYGROMETRE2, HUM2L, HUM2H);
					break;

				case CMD_BALLAST : // Envoie les informations de la position du ballast
					IMP1H=0xFF; 
     5ee:	1f ef       	ldi	r17, 0xFF	; 255


	/* boucle infinie */
	for(;;)
	{	
		if(NEED_RECEIVED == TRUE) 
     5f0:	80 91 03 01 	lds	r24, 0x0103
     5f4:	88 23       	and	r24, r24
     5f6:	39 f4       	brne	.+14     	; 0x606 <main+0x44>
		{
			get_data_3964r(data);
     5f8:	8f e3       	ldi	r24, 0x3F	; 63
     5fa:	92 e0       	ldi	r25, 0x02	; 2
     5fc:	56 dd       	rcall	.-1364   	; 0xaa <get_data_3964r>
			data[DATADIMENSION-1]=0x00; // Force le dernier bit des demandes à 0.  Au maximum 4 demandes qui n'ont pas été traitée peuvent être enregistrée.	
     5fe:	10 92 57 02 	sts	0x0257, r1
			NEED_RECEIVED = FALSE;
     602:	00 93 03 01 	sts	0x0103, r16
		}
		if( data[0] != 0x00 ) // Envoie des informations à la foxboard
     606:	80 91 3f 02 	lds	r24, 0x023F
     60a:	88 23       	and	r24, r24
     60c:	09 f4       	brne	.+2      	; 0x610 <main+0x4e>
     60e:	d1 c2       	rjmp	.+1442   	; 0xbb2 <main+0x5f0>
		{
			switch(data[0])
     610:	82 35       	cpi	r24, 0x52	; 82
     612:	09 f4       	brne	.+2      	; 0x616 <main+0x54>
     614:	a8 c1       	rjmp	.+848    	; 0x966 <main+0x3a4>
     616:	83 35       	cpi	r24, 0x53	; 83
     618:	40 f5       	brcc	.+80     	; 0x66a <main+0xa8>
     61a:	84 34       	cpi	r24, 0x44	; 68
     61c:	09 f4       	brne	.+2      	; 0x620 <main+0x5e>
     61e:	dc c0       	rjmp	.+440    	; 0x7d8 <main+0x216>
     620:	85 34       	cpi	r24, 0x45	; 69
     622:	80 f4       	brcc	.+32     	; 0x644 <main+0x82>
     624:	81 34       	cpi	r24, 0x41	; 65
     626:	09 f4       	brne	.+2      	; 0x62a <main+0x68>
     628:	89 c0       	rjmp	.+274    	; 0x73c <main+0x17a>
     62a:	82 34       	cpi	r24, 0x42	; 66
     62c:	20 f4       	brcc	.+8      	; 0x636 <main+0x74>
     62e:	80 34       	cpi	r24, 0x40	; 64
     630:	09 f0       	breq	.+2      	; 0x634 <main+0x72>
     632:	a3 c2       	rjmp	.+1350   	; 0xb7a <main+0x5b8>
     634:	69 c0       	rjmp	.+210    	; 0x708 <main+0x146>
     636:	82 34       	cpi	r24, 0x42	; 66
     638:	09 f4       	brne	.+2      	; 0x63c <main+0x7a>
     63a:	9a c0       	rjmp	.+308    	; 0x770 <main+0x1ae>
     63c:	83 34       	cpi	r24, 0x43	; 67
     63e:	09 f0       	breq	.+2      	; 0x642 <main+0x80>
     640:	9c c2       	rjmp	.+1336   	; 0xb7a <main+0x5b8>
     642:	b0 c0       	rjmp	.+352    	; 0x7a4 <main+0x1e2>
     644:	87 34       	cpi	r24, 0x47	; 71
     646:	09 f4       	brne	.+2      	; 0x64a <main+0x88>
     648:	15 c1       	rjmp	.+554    	; 0x874 <main+0x2b2>
     64a:	88 34       	cpi	r24, 0x48	; 72
     64c:	38 f4       	brcc	.+14     	; 0x65c <main+0x9a>
     64e:	85 34       	cpi	r24, 0x45	; 69
     650:	09 f4       	brne	.+2      	; 0x654 <main+0x92>
     652:	dc c0       	rjmp	.+440    	; 0x80c <main+0x24a>
     654:	86 34       	cpi	r24, 0x46	; 70
     656:	09 f0       	breq	.+2      	; 0x65a <main+0x98>
     658:	90 c2       	rjmp	.+1312   	; 0xb7a <main+0x5b8>
     65a:	f2 c0       	rjmp	.+484    	; 0x840 <main+0x27e>
     65c:	80 35       	cpi	r24, 0x50	; 80
     65e:	09 f4       	brne	.+2      	; 0x662 <main+0xa0>
     660:	23 c1       	rjmp	.+582    	; 0x8a8 <main+0x2e6>
     662:	81 35       	cpi	r24, 0x51	; 81
     664:	09 f0       	breq	.+2      	; 0x668 <main+0xa6>
     666:	89 c2       	rjmp	.+1298   	; 0xb7a <main+0x5b8>
     668:	37 c1       	rjmp	.+622    	; 0x8d8 <main+0x316>
     66a:	80 38       	cpi	r24, 0x80	; 128
     66c:	09 f4       	brne	.+2      	; 0x670 <main+0xae>
     66e:	40 c0       	rjmp	.+128    	; 0x6f0 <main+0x12e>
     670:	81 38       	cpi	r24, 0x81	; 129
     672:	78 f4       	brcc	.+30     	; 0x692 <main+0xd0>
     674:	80 36       	cpi	r24, 0x60	; 96
     676:	09 f4       	brne	.+2      	; 0x67a <main+0xb8>
     678:	bd c1       	rjmp	.+890    	; 0x9f4 <main+0x432>
     67a:	81 36       	cpi	r24, 0x61	; 97
     67c:	20 f4       	brcc	.+8      	; 0x686 <main+0xc4>
     67e:	83 35       	cpi	r24, 0x53	; 83
     680:	09 f0       	breq	.+2      	; 0x684 <main+0xc2>
     682:	7b c2       	rjmp	.+1270   	; 0xb7a <main+0x5b8>
     684:	51 c2       	rjmp	.+1186   	; 0xb28 <main+0x566>
     686:	80 37       	cpi	r24, 0x70	; 112
     688:	b1 f0       	breq	.+44     	; 0x6b6 <main+0xf4>
     68a:	81 37       	cpi	r24, 0x71	; 113
     68c:	09 f0       	breq	.+2      	; 0x690 <main+0xce>
     68e:	75 c2       	rjmp	.+1258   	; 0xb7a <main+0x5b8>
     690:	26 c0       	rjmp	.+76     	; 0x6de <main+0x11c>
     692:	81 39       	cpi	r24, 0x91	; 145
     694:	09 f4       	brne	.+2      	; 0x698 <main+0xd6>
     696:	61 c2       	rjmp	.+1218   	; 0xb5a <main+0x598>
     698:	82 39       	cpi	r24, 0x92	; 146
     69a:	30 f4       	brcc	.+12     	; 0x6a8 <main+0xe6>
     69c:	81 38       	cpi	r24, 0x81	; 129
     69e:	71 f1       	breq	.+92     	; 0x6fc <main+0x13a>
     6a0:	80 39       	cpi	r24, 0x90	; 144
     6a2:	09 f0       	breq	.+2      	; 0x6a6 <main+0xe4>
     6a4:	6a c2       	rjmp	.+1236   	; 0xb7a <main+0x5b8>
     6a6:	54 c2       	rjmp	.+1192   	; 0xb50 <main+0x58e>
     6a8:	82 39       	cpi	r24, 0x92	; 146
     6aa:	09 f4       	brne	.+2      	; 0x6ae <main+0xec>
     6ac:	5b c2       	rjmp	.+1206   	; 0xb64 <main+0x5a2>
     6ae:	83 39       	cpi	r24, 0x93	; 147
     6b0:	09 f0       	breq	.+2      	; 0x6b4 <main+0xf2>
     6b2:	63 c2       	rjmp	.+1222   	; 0xb7a <main+0x5b8>
     6b4:	5c c2       	rjmp	.+1208   	; 0xb6e <main+0x5ac>
			{
				case CMD_HYGROMETRE1 : // Envoie les informations d'humidité du premier capteur hygrométrique
					dev9_access = get_SHT21_Devices(ADD1_SHT21, listTemp);
     6b6:	80 e8       	ldi	r24, 0x80	; 128
     6b8:	6d e1       	ldi	r22, 0x1D	; 29
     6ba:	72 e0       	ldi	r23, 0x02	; 2
     6bc:	75 d4       	rcall	.+2282   	; 0xfa8 <get_SHT21_Devices>
					if(dev9_access) {HUM1H=0xFF; HUM1L=0xFF;}
     6be:	88 23       	and	r24, r24
     6c0:	29 f4       	brne	.+10     	; 0x6cc <main+0x10a>
					else tempHum = convertHum(listTemp);
     6c2:	8d e1       	ldi	r24, 0x1D	; 29
     6c4:	92 e0       	ldi	r25, 0x02	; 2
     6c6:	23 d4       	rcall	.+2118   	; 0xf0e <convertHum>
     6c8:	80 93 2e 02 	sts	0x022E, r24
					HUM1H = tempHum;
     6cc:	40 91 2e 02 	lds	r20, 0x022E
     6d0:	40 93 61 02 	sts	0x0261, r20
					HUM1L = 0;					
     6d4:	10 92 26 02 	sts	0x0226, r1
					transmission(CMD_HYGROMETRE1, HUM1L, HUM1H);
     6d8:	80 e7       	ldi	r24, 0x70	; 112
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	07 c0       	rjmp	.+14     	; 0x6ec <main+0x12a>
					break;

				case CMD_HYGROMETRE2 : // Envoie les informations d'humidité du deuxième capteur hygrométrique
					HUM2H=0xFF; 
     6de:	10 93 68 02 	sts	0x0268, r17
					HUM2L=0xFF;
     6e2:	10 93 28 02 	sts	0x0228, r17
					transmission(CMD_HYGROMETRE2, HUM2L, HUM2H);
     6e6:	81 e7       	ldi	r24, 0x71	; 113
     6e8:	6f ef       	ldi	r22, 0xFF	; 255
     6ea:	4f ef       	ldi	r20, 0xFF	; 255
     6ec:	0e df       	rcall	.-484    	; 0x50a <transmission>
     6ee:	46 c2       	rjmp	.+1164   	; 0xb7c <main+0x5ba>
					break;

				case CMD_BALLAST : // Envoie les informations de la position du ballast
					IMP1H=0xFF; 
     6f0:	10 93 22 02 	sts	0x0222, r17
					IMP1L=0xFF;
     6f4:	10 93 5c 02 	sts	0x025C, r17
					transmission(CMD_BALLAST, IMP1L, IMP1H);
     6f8:	80 e8       	ldi	r24, 0x80	; 128
     6fa:	f6 cf       	rjmp	.-20     	; 0x6e8 <main+0x126>
					break;

				case CMD_SYSTEME_BALLAST : // Envoie les informations de la position du chariot portant le ballast
					IMP2H=0xFF; 
     6fc:	10 93 5b 02 	sts	0x025B, r17
					IMP2L=0xFF;
     700:	10 93 30 02 	sts	0x0230, r17
					transmission(CMD_SYSTEME_BALLAST, IMP2L, IMP2H);
     704:	81 e8       	ldi	r24, 0x81	; 129
     706:	f0 cf       	rjmp	.-32     	; 0x6e8 <main+0x126>
					break;

				case CMD_TEMP1 : // Envoie les informations de température du premier capteur
					dev1_access = get_DS7505_Devices(ADD1_DS7505, listTemp); // Récupérer T° capteur n°1
     708:	80 e9       	ldi	r24, 0x90	; 144
     70a:	6d e1       	ldi	r22, 0x1D	; 29
     70c:	72 e0       	ldi	r23, 0x02	; 2
     70e:	2e d3       	rcall	.+1628   	; 0xd6c <get_DS7505_Devices>
					if(dev1_access) {Result[0]=0xFF; Result[1]=0xFF;}
     710:	88 23       	and	r24, r24
     712:	29 f0       	breq	.+10     	; 0x71e <main+0x15c>
     714:	10 93 23 02 	sts	0x0223, r17
     718:	10 93 24 02 	sts	0x0224, r17
     71c:	05 c0       	rjmp	.+10     	; 0x728 <main+0x166>
					else convertTemp(listTemp, Result);
     71e:	8d e1       	ldi	r24, 0x1D	; 29
     720:	92 e0       	ldi	r25, 0x02	; 2
     722:	63 e2       	ldi	r22, 0x23	; 35
     724:	72 e0       	ldi	r23, 0x02	; 2
     726:	42 d3       	rcall	.+1668   	; 0xdac <convertTemp>
					TEMP1H = Result[0];
     728:	40 91 23 02 	lds	r20, 0x0223
     72c:	40 93 20 02 	sts	0x0220, r20
					TEMP1L = Result[1];
     730:	60 91 24 02 	lds	r22, 0x0224
     734:	60 93 65 02 	sts	0x0265, r22
					transmission(CMD_TEMP1, TEMP1L, TEMP1H);
     738:	80 e4       	ldi	r24, 0x40	; 64
     73a:	d8 cf       	rjmp	.-80     	; 0x6ec <main+0x12a>
					break;

				case CMD_TEMP2 : // Envoie les informations de température du deuxième capteur
					dev2_access = get_DS7505_Devices(ADD2_DS7505, listTemp); // Récupérer T° capteur n°2					
     73c:	82 e9       	ldi	r24, 0x92	; 146
     73e:	6d e1       	ldi	r22, 0x1D	; 29
     740:	72 e0       	ldi	r23, 0x02	; 2
     742:	14 d3       	rcall	.+1576   	; 0xd6c <get_DS7505_Devices>
					if(dev2_access) {Result[0]=0xFF; Result[1]=0xFF;}
     744:	88 23       	and	r24, r24
     746:	29 f0       	breq	.+10     	; 0x752 <main+0x190>
     748:	10 93 23 02 	sts	0x0223, r17
     74c:	10 93 24 02 	sts	0x0224, r17
     750:	05 c0       	rjmp	.+10     	; 0x75c <main+0x19a>
					else convertTemp(listTemp, Result);
     752:	8d e1       	ldi	r24, 0x1D	; 29
     754:	92 e0       	ldi	r25, 0x02	; 2
     756:	63 e2       	ldi	r22, 0x23	; 35
     758:	72 e0       	ldi	r23, 0x02	; 2
     75a:	28 d3       	rcall	.+1616   	; 0xdac <convertTemp>
					TEMP2H = Result[0];
     75c:	40 91 23 02 	lds	r20, 0x0223
     760:	40 93 2c 02 	sts	0x022C, r20
					TEMP2L = Result[1];
     764:	60 91 24 02 	lds	r22, 0x0224
     768:	60 93 66 02 	sts	0x0266, r22
					transmission(CMD_TEMP2, TEMP2L, TEMP2H);
     76c:	81 e4       	ldi	r24, 0x41	; 65
     76e:	be cf       	rjmp	.-132    	; 0x6ec <main+0x12a>
					break;

				case CMD_TEMP3 : // Envoie les informations de température du troisième capteur
					dev3_access = get_DS7505_Devices(ADD3_DS7505, listTemp); // Récupérer T° capteur n°3					
     770:	84 e9       	ldi	r24, 0x94	; 148
     772:	6d e1       	ldi	r22, 0x1D	; 29
     774:	72 e0       	ldi	r23, 0x02	; 2
     776:	fa d2       	rcall	.+1524   	; 0xd6c <get_DS7505_Devices>
					if(dev3_access) {Result[0]=0xFF; Result[1]=0xFF;}
     778:	88 23       	and	r24, r24
     77a:	29 f0       	breq	.+10     	; 0x786 <main+0x1c4>
     77c:	10 93 23 02 	sts	0x0223, r17
     780:	10 93 24 02 	sts	0x0224, r17
     784:	05 c0       	rjmp	.+10     	; 0x790 <main+0x1ce>
					else convertTemp(listTemp, Result);
     786:	8d e1       	ldi	r24, 0x1D	; 29
     788:	92 e0       	ldi	r25, 0x02	; 2
     78a:	63 e2       	ldi	r22, 0x23	; 35
     78c:	72 e0       	ldi	r23, 0x02	; 2
     78e:	0e d3       	rcall	.+1564   	; 0xdac <convertTemp>
					TEMP3H = Result[0];
     790:	40 91 23 02 	lds	r20, 0x0223
     794:	40 93 64 02 	sts	0x0264, r20
					TEMP3L = Result[1];
     798:	60 91 24 02 	lds	r22, 0x0224
     79c:	60 93 67 02 	sts	0x0267, r22
					transmission(CMD_TEMP3, TEMP3L, TEMP3H);
     7a0:	82 e4       	ldi	r24, 0x42	; 66
     7a2:	a4 cf       	rjmp	.-184    	; 0x6ec <main+0x12a>
					break;

				case CMD_TEMP4 : // Envoie les informations de température du quatrième capteur
					dev4_access = get_DS7505_Devices(ADD4_DS7505, listTemp); // Récupérer T° capteur n°3					
     7a4:	86 e9       	ldi	r24, 0x96	; 150
     7a6:	6d e1       	ldi	r22, 0x1D	; 29
     7a8:	72 e0       	ldi	r23, 0x02	; 2
     7aa:	e0 d2       	rcall	.+1472   	; 0xd6c <get_DS7505_Devices>
					if(dev4_access) {Result[0]=0xFF; Result[1]=0xFF;}
     7ac:	88 23       	and	r24, r24
     7ae:	29 f0       	breq	.+10     	; 0x7ba <main+0x1f8>
     7b0:	10 93 23 02 	sts	0x0223, r17
     7b4:	10 93 24 02 	sts	0x0224, r17
     7b8:	05 c0       	rjmp	.+10     	; 0x7c4 <main+0x202>
					else convertTemp(listTemp, Result);
     7ba:	8d e1       	ldi	r24, 0x1D	; 29
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	63 e2       	ldi	r22, 0x23	; 35
     7c0:	72 e0       	ldi	r23, 0x02	; 2
     7c2:	f4 d2       	rcall	.+1512   	; 0xdac <convertTemp>
					TEMP4H = Result[0];
     7c4:	40 91 23 02 	lds	r20, 0x0223
     7c8:	40 93 62 02 	sts	0x0262, r20
					TEMP4L = Result[1];
     7cc:	60 91 24 02 	lds	r22, 0x0224
     7d0:	60 93 5e 02 	sts	0x025E, r22
					transmission(CMD_TEMP4,TEMP4L, TEMP4H);
     7d4:	83 e4       	ldi	r24, 0x43	; 67
     7d6:	8a cf       	rjmp	.-236    	; 0x6ec <main+0x12a>
					break;

				case CMD_TEMP5 : // Envoie les informations de température du cinquième capteur
					dev5_access = get_DS7505_Devices(ADD5_DS7505, listTemp); // Récupérer T° capteur n°3					
     7d8:	88 e9       	ldi	r24, 0x98	; 152
     7da:	6d e1       	ldi	r22, 0x1D	; 29
     7dc:	72 e0       	ldi	r23, 0x02	; 2
     7de:	c6 d2       	rcall	.+1420   	; 0xd6c <get_DS7505_Devices>
					if(dev5_access) {Result[0]=0xFF; Result[1]=0xFF;}
     7e0:	88 23       	and	r24, r24
     7e2:	29 f0       	breq	.+10     	; 0x7ee <main+0x22c>
     7e4:	10 93 23 02 	sts	0x0223, r17
     7e8:	10 93 24 02 	sts	0x0224, r17
     7ec:	05 c0       	rjmp	.+10     	; 0x7f8 <main+0x236>
					else convertTemp(listTemp, Result);
     7ee:	8d e1       	ldi	r24, 0x1D	; 29
     7f0:	92 e0       	ldi	r25, 0x02	; 2
     7f2:	63 e2       	ldi	r22, 0x23	; 35
     7f4:	72 e0       	ldi	r23, 0x02	; 2
     7f6:	da d2       	rcall	.+1460   	; 0xdac <convertTemp>
					TEMP5H = Result[0];
     7f8:	40 91 23 02 	lds	r20, 0x0223
     7fc:	40 93 2f 02 	sts	0x022F, r20
					TEMP5L = Result[1];
     800:	60 91 24 02 	lds	r22, 0x0224
     804:	60 93 58 02 	sts	0x0258, r22
					transmission(CMD_TEMP5, TEMP5L, TEMP5H);
     808:	84 e4       	ldi	r24, 0x44	; 68
     80a:	70 cf       	rjmp	.-288    	; 0x6ec <main+0x12a>
					break;

				case CMD_TEMP6 : // Envoie les informations de température du sixième capteur
					dev6_access = get_DS7505_Devices(ADD6_DS7505, listTemp); // Récupérer T° capteur n°3					
     80c:	8a e9       	ldi	r24, 0x9A	; 154
     80e:	6d e1       	ldi	r22, 0x1D	; 29
     810:	72 e0       	ldi	r23, 0x02	; 2
     812:	ac d2       	rcall	.+1368   	; 0xd6c <get_DS7505_Devices>
					if(dev6_access) {Result[0]=0xFF; Result[1]=0xFF;}
     814:	88 23       	and	r24, r24
     816:	29 f0       	breq	.+10     	; 0x822 <main+0x260>
     818:	10 93 23 02 	sts	0x0223, r17
     81c:	10 93 24 02 	sts	0x0224, r17
     820:	05 c0       	rjmp	.+10     	; 0x82c <main+0x26a>
					else convertTemp(listTemp, Result);
     822:	8d e1       	ldi	r24, 0x1D	; 29
     824:	92 e0       	ldi	r25, 0x02	; 2
     826:	63 e2       	ldi	r22, 0x23	; 35
     828:	72 e0       	ldi	r23, 0x02	; 2
     82a:	c0 d2       	rcall	.+1408   	; 0xdac <convertTemp>
					TEMP6H = Result[0];
     82c:	40 91 23 02 	lds	r20, 0x0223
     830:	40 93 27 02 	sts	0x0227, r20
					TEMP6L = Result[1];
     834:	60 91 24 02 	lds	r22, 0x0224
     838:	60 93 3d 02 	sts	0x023D, r22
					transmission(CMD_TEMP6, TEMP6L, TEMP6H);
     83c:	85 e4       	ldi	r24, 0x45	; 69
     83e:	56 cf       	rjmp	.-340    	; 0x6ec <main+0x12a>
					break;

				case CMD_TEMP7 : // Envoie les informations de température du septième capteur
					dev7_access = get_DS7505_Devices(ADD7_DS7505, listTemp); // Récupérer T° capteur n°3					
     840:	8c e9       	ldi	r24, 0x9C	; 156
     842:	6d e1       	ldi	r22, 0x1D	; 29
     844:	72 e0       	ldi	r23, 0x02	; 2
     846:	92 d2       	rcall	.+1316   	; 0xd6c <get_DS7505_Devices>
					if(dev7_access) {Result[0]=0xFF; Result[1]=0xFF;}
     848:	88 23       	and	r24, r24
     84a:	29 f0       	breq	.+10     	; 0x856 <main+0x294>
     84c:	10 93 23 02 	sts	0x0223, r17
     850:	10 93 24 02 	sts	0x0224, r17
     854:	05 c0       	rjmp	.+10     	; 0x860 <main+0x29e>
					else convertTemp(listTemp, Result);
     856:	8d e1       	ldi	r24, 0x1D	; 29
     858:	92 e0       	ldi	r25, 0x02	; 2
     85a:	63 e2       	ldi	r22, 0x23	; 35
     85c:	72 e0       	ldi	r23, 0x02	; 2
     85e:	a6 d2       	rcall	.+1356   	; 0xdac <convertTemp>
					TEMP7H = Result[0];
     860:	40 91 23 02 	lds	r20, 0x0223
     864:	40 93 2a 02 	sts	0x022A, r20
					TEMP7L = Result[1];
     868:	60 91 24 02 	lds	r22, 0x0224
     86c:	60 93 2b 02 	sts	0x022B, r22
					transmission(CMD_TEMP7, TEMP7L, TEMP7H);
     870:	86 e4       	ldi	r24, 0x46	; 70
     872:	3c cf       	rjmp	.-392    	; 0x6ec <main+0x12a>
					break;

				case CMD_TEMP8 :  // Envoie les informations de température du huitième capteur
					dev8_access = get_DS7505_Devices(ADD8_DS7505, listTemp); // Récupérer T° capteur n°3					
     874:	8e e9       	ldi	r24, 0x9E	; 158
     876:	6d e1       	ldi	r22, 0x1D	; 29
     878:	72 e0       	ldi	r23, 0x02	; 2
     87a:	78 d2       	rcall	.+1264   	; 0xd6c <get_DS7505_Devices>
					if(dev8_access) {Result[0]=0xFF; Result[1]=0xFF;}
     87c:	88 23       	and	r24, r24
     87e:	29 f0       	breq	.+10     	; 0x88a <main+0x2c8>
     880:	10 93 23 02 	sts	0x0223, r17
     884:	10 93 24 02 	sts	0x0224, r17
     888:	05 c0       	rjmp	.+10     	; 0x894 <main+0x2d2>
					else convertTemp(listTemp, Result);
     88a:	8d e1       	ldi	r24, 0x1D	; 29
     88c:	92 e0       	ldi	r25, 0x02	; 2
     88e:	63 e2       	ldi	r22, 0x23	; 35
     890:	72 e0       	ldi	r23, 0x02	; 2
     892:	8c d2       	rcall	.+1304   	; 0xdac <convertTemp>
					TEMP8H = Result[0];
     894:	40 91 23 02 	lds	r20, 0x0223
     898:	40 93 2d 02 	sts	0x022D, r20
					TEMP8L = Result[1];
     89c:	60 91 24 02 	lds	r22, 0x0224
     8a0:	60 93 33 02 	sts	0x0233, r22
					transmission(CMD_TEMP8, TEMP8L, TEMP8H);
     8a4:	87 e4       	ldi	r24, 0x47	; 71
     8a6:	22 cf       	rjmp	.-444    	; 0x6ec <main+0x12a>
					break;
				
				case CMD_PROFONDEUR : // Envoie les informations de pression reçue par le capteur de pression comme indicatif de la profondeur
					StartADC(0);
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	ff d2       	rcall	.+1534   	; 0xeaa <StartADC>
					//ReadADC(Result);
					ReadADC(listTemp);
     8ac:	8d e1       	ldi	r24, 0x1D	; 29
     8ae:	92 e0       	ldi	r25, 0x02	; 2
     8b0:	f0 d2       	rcall	.+1504   	; 0xe92 <ReadADC>
					convertPressure(listTemp, Result, ProfInit);
     8b2:	40 91 5f 02 	lds	r20, 0x025F
     8b6:	50 91 60 02 	lds	r21, 0x0260
     8ba:	8d e1       	ldi	r24, 0x1D	; 29
     8bc:	92 e0       	ldi	r25, 0x02	; 2
     8be:	63 e2       	ldi	r22, 0x23	; 35
     8c0:	72 e0       	ldi	r23, 0x02	; 2
     8c2:	93 d3       	rcall	.+1830   	; 0xfea <convertPressure>
					ADC1L = Result[0];
     8c4:	60 91 23 02 	lds	r22, 0x0223
     8c8:	60 93 21 02 	sts	0x0221, r22
					ADC1H = Result[1];
     8cc:	40 91 24 02 	lds	r20, 0x0224
     8d0:	40 93 59 02 	sts	0x0259, r20
					transmission(CMD_PROFONDEUR, ADC1L, ADC1H);
     8d4:	80 e5       	ldi	r24, 0x50	; 80
     8d6:	0a cf       	rjmp	.-492    	; 0x6ec <main+0x12a>
					break;

				case CMD_ADC2 : // Envoie les informations du deuxième convertisseur ADC
					//ReadADC(Result);
					StartADC(1);
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	e7 d2       	rcall	.+1486   	; 0xeaa <StartADC>
					ReadADC(listTemp);	
     8dc:	8d e1       	ldi	r24, 0x1D	; 29
     8de:	92 e0       	ldi	r25, 0x02	; 2
     8e0:	d8 d2       	rcall	.+1456   	; 0xe92 <ReadADC>
					convertAcc(listTemp, Result);				
     8e2:	8d e1       	ldi	r24, 0x1D	; 29
     8e4:	92 e0       	ldi	r25, 0x02	; 2
     8e6:	63 e2       	ldi	r22, 0x23	; 35
     8e8:	72 e0       	ldi	r23, 0x02	; 2
     8ea:	db d3       	rcall	.+1974   	; 0x10a2 <convertAcc>
					ADC2L = Result[0];
     8ec:	80 91 23 02 	lds	r24, 0x0223
     8f0:	80 93 31 02 	sts	0x0231, r24
					ADC2H = Result[1];
     8f4:	80 91 24 02 	lds	r24, 0x0224
     8f8:	80 93 3e 02 	sts	0x023E, r24
					for(i = 0; i <= NombreDePassage - 2; i++)
     8fc:	10 92 35 02 	sts	0x0235, r1
     900:	10 92 34 02 	sts	0x0234, r1
     904:	1e c0       	rjmp	.+60     	; 0x942 <main+0x380>
					{
						StartADC(1);
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	d0 d2       	rcall	.+1440   	; 0xeaa <StartADC>
						ReadADC(listTemp);	
     90a:	8d e1       	ldi	r24, 0x1D	; 29
     90c:	92 e0       	ldi	r25, 0x02	; 2
     90e:	c1 d2       	rcall	.+1410   	; 0xe92 <ReadADC>
						convertAcc(listTemp, Result);				
     910:	8d e1       	ldi	r24, 0x1D	; 29
     912:	92 e0       	ldi	r25, 0x02	; 2
     914:	63 e2       	ldi	r22, 0x23	; 35
     916:	72 e0       	ldi	r23, 0x02	; 2
     918:	c4 d3       	rcall	.+1928   	; 0x10a2 <convertAcc>
						ADC2L = (ADC2L + Result[0])/2;
     91a:	80 91 23 02 	lds	r24, 0x0223
     91e:	20 91 31 02 	lds	r18, 0x0231
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	28 0f       	add	r18, r24
     926:	31 1d       	adc	r19, r1
     928:	35 95       	asr	r19
     92a:	27 95       	ror	r18
     92c:	20 93 31 02 	sts	0x0231, r18
					StartADC(1);
					ReadADC(listTemp);	
					convertAcc(listTemp, Result);				
					ADC2L = Result[0];
					ADC2H = Result[1];
					for(i = 0; i <= NombreDePassage - 2; i++)
     930:	80 91 34 02 	lds	r24, 0x0234
     934:	90 91 35 02 	lds	r25, 0x0235
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	90 93 35 02 	sts	0x0235, r25
     93e:	80 93 34 02 	sts	0x0234, r24
     942:	80 91 04 01 	lds	r24, 0x0104
     946:	90 91 05 01 	lds	r25, 0x0105
     94a:	02 97       	sbiw	r24, 0x02	; 2
     94c:	20 91 34 02 	lds	r18, 0x0234
     950:	30 91 35 02 	lds	r19, 0x0235
     954:	82 17       	cp	r24, r18
     956:	93 07       	cpc	r25, r19
     958:	b0 f6       	brcc	.-84     	; 0x906 <main+0x344>
						StartADC(1);
						ReadADC(listTemp);	
						convertAcc(listTemp, Result);				
						ADC2L = (ADC2L + Result[0])/2;
					}
					transmission(CMD_ADC2, ADC2L, ADC2H);
     95a:	81 e5       	ldi	r24, 0x51	; 81
     95c:	60 91 31 02 	lds	r22, 0x0231
     960:	40 91 3e 02 	lds	r20, 0x023E
     964:	c3 ce       	rjmp	.-634    	; 0x6ec <main+0x12a>
					break;

				case CMD_ADC3 : // Envoie les informations du troisième convertisseur ADC
					//ReadADC(Result);
					StartADC(2);
     966:	82 e0       	ldi	r24, 0x02	; 2
     968:	a0 d2       	rcall	.+1344   	; 0xeaa <StartADC>
					ReadADC(listTemp);	
     96a:	8d e1       	ldi	r24, 0x1D	; 29
     96c:	92 e0       	ldi	r25, 0x02	; 2
     96e:	91 d2       	rcall	.+1314   	; 0xe92 <ReadADC>
					convertAcc(listTemp, Result);				
     970:	8d e1       	ldi	r24, 0x1D	; 29
     972:	92 e0       	ldi	r25, 0x02	; 2
     974:	63 e2       	ldi	r22, 0x23	; 35
     976:	72 e0       	ldi	r23, 0x02	; 2
     978:	94 d3       	rcall	.+1832   	; 0x10a2 <convertAcc>
					ADC3L = Result[0];
     97a:	80 91 23 02 	lds	r24, 0x0223
     97e:	80 93 3a 02 	sts	0x023A, r24
					ADC3H = Result[1];
     982:	80 91 24 02 	lds	r24, 0x0224
     986:	80 93 37 02 	sts	0x0237, r24
					for(i = 0; i <= NombreDePassage - 2; i++)
     98a:	10 92 35 02 	sts	0x0235, r1
     98e:	10 92 34 02 	sts	0x0234, r1
     992:	1e c0       	rjmp	.+60     	; 0x9d0 <main+0x40e>
					{
						StartADC(2);
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	89 d2       	rcall	.+1298   	; 0xeaa <StartADC>
						ReadADC(listTemp);	
     998:	8d e1       	ldi	r24, 0x1D	; 29
     99a:	92 e0       	ldi	r25, 0x02	; 2
     99c:	7a d2       	rcall	.+1268   	; 0xe92 <ReadADC>
						convertAcc(listTemp, Result);				
     99e:	8d e1       	ldi	r24, 0x1D	; 29
     9a0:	92 e0       	ldi	r25, 0x02	; 2
     9a2:	63 e2       	ldi	r22, 0x23	; 35
     9a4:	72 e0       	ldi	r23, 0x02	; 2
     9a6:	7d d3       	rcall	.+1786   	; 0x10a2 <convertAcc>
						ADC3L = (ADC3L + Result[0])/2;
     9a8:	80 91 23 02 	lds	r24, 0x0223
     9ac:	20 91 3a 02 	lds	r18, 0x023A
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	28 0f       	add	r18, r24
     9b4:	31 1d       	adc	r19, r1
     9b6:	35 95       	asr	r19
     9b8:	27 95       	ror	r18
     9ba:	20 93 3a 02 	sts	0x023A, r18
					StartADC(2);
					ReadADC(listTemp);	
					convertAcc(listTemp, Result);				
					ADC3L = Result[0];
					ADC3H = Result[1];
					for(i = 0; i <= NombreDePassage - 2; i++)
     9be:	80 91 34 02 	lds	r24, 0x0234
     9c2:	90 91 35 02 	lds	r25, 0x0235
     9c6:	01 96       	adiw	r24, 0x01	; 1
     9c8:	90 93 35 02 	sts	0x0235, r25
     9cc:	80 93 34 02 	sts	0x0234, r24
     9d0:	80 91 04 01 	lds	r24, 0x0104
     9d4:	90 91 05 01 	lds	r25, 0x0105
     9d8:	02 97       	sbiw	r24, 0x02	; 2
     9da:	20 91 34 02 	lds	r18, 0x0234
     9de:	30 91 35 02 	lds	r19, 0x0235
     9e2:	82 17       	cp	r24, r18
     9e4:	93 07       	cpc	r25, r19
     9e6:	b0 f6       	brcc	.-84     	; 0x994 <main+0x3d2>
						StartADC(2);
						ReadADC(listTemp);	
						convertAcc(listTemp, Result);				
						ADC3L = (ADC3L + Result[0])/2;
					}
					transmission(CMD_ADC3, ADC3L, ADC3H);
     9e8:	82 e5       	ldi	r24, 0x52	; 82
     9ea:	60 91 3a 02 	lds	r22, 0x023A
     9ee:	40 91 37 02 	lds	r20, 0x0237
     9f2:	7c ce       	rjmp	.-776    	; 0x6ec <main+0x12a>
					break;
					
				case CMD_INCLINAISON : // Envoie les informations d'inclinaisons du sous-marin
					// ADC1
					StartADC(1);
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	59 d2       	rcall	.+1202   	; 0xeaa <StartADC>
					ReadADC(listTemp);	
     9f8:	8d e1       	ldi	r24, 0x1D	; 29
     9fa:	92 e0       	ldi	r25, 0x02	; 2
     9fc:	4a d2       	rcall	.+1172   	; 0xe92 <ReadADC>
					convertAcc(listTemp, Result);				
     9fe:	8d e1       	ldi	r24, 0x1D	; 29
     a00:	92 e0       	ldi	r25, 0x02	; 2
     a02:	63 e2       	ldi	r22, 0x23	; 35
     a04:	72 e0       	ldi	r23, 0x02	; 2
     a06:	4d d3       	rcall	.+1690   	; 0x10a2 <convertAcc>
					ADC2L = Result[0];
     a08:	80 91 23 02 	lds	r24, 0x0223
     a0c:	80 93 31 02 	sts	0x0231, r24
					ADC2H = Result[1];
     a10:	80 91 24 02 	lds	r24, 0x0224
     a14:	80 93 3e 02 	sts	0x023E, r24
					for(i = 0; i <= NombreDePassage - 2; i++)
     a18:	10 92 35 02 	sts	0x0235, r1
     a1c:	10 92 34 02 	sts	0x0234, r1
     a20:	1e c0       	rjmp	.+60     	; 0xa5e <main+0x49c>
					{
						StartADC(1);
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	42 d2       	rcall	.+1156   	; 0xeaa <StartADC>
						ReadADC(listTemp);	
     a26:	8d e1       	ldi	r24, 0x1D	; 29
     a28:	92 e0       	ldi	r25, 0x02	; 2
     a2a:	33 d2       	rcall	.+1126   	; 0xe92 <ReadADC>
						convertAcc(listTemp, Result);				
     a2c:	8d e1       	ldi	r24, 0x1D	; 29
     a2e:	92 e0       	ldi	r25, 0x02	; 2
     a30:	63 e2       	ldi	r22, 0x23	; 35
     a32:	72 e0       	ldi	r23, 0x02	; 2
     a34:	36 d3       	rcall	.+1644   	; 0x10a2 <convertAcc>
						ADC2L = (ADC2L + Result[0])/2;
     a36:	80 91 23 02 	lds	r24, 0x0223
     a3a:	20 91 31 02 	lds	r18, 0x0231
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	28 0f       	add	r18, r24
     a42:	31 1d       	adc	r19, r1
     a44:	35 95       	asr	r19
     a46:	27 95       	ror	r18
     a48:	20 93 31 02 	sts	0x0231, r18
					StartADC(1);
					ReadADC(listTemp);	
					convertAcc(listTemp, Result);				
					ADC2L = Result[0];
					ADC2H = Result[1];
					for(i = 0; i <= NombreDePassage - 2; i++)
     a4c:	80 91 34 02 	lds	r24, 0x0234
     a50:	90 91 35 02 	lds	r25, 0x0235
     a54:	01 96       	adiw	r24, 0x01	; 1
     a56:	90 93 35 02 	sts	0x0235, r25
     a5a:	80 93 34 02 	sts	0x0234, r24
     a5e:	80 91 04 01 	lds	r24, 0x0104
     a62:	90 91 05 01 	lds	r25, 0x0105
     a66:	02 97       	sbiw	r24, 0x02	; 2
     a68:	20 91 34 02 	lds	r18, 0x0234
     a6c:	30 91 35 02 	lds	r19, 0x0235
     a70:	82 17       	cp	r24, r18
     a72:	93 07       	cpc	r25, r19
     a74:	b0 f6       	brcc	.-84     	; 0xa22 <main+0x460>
						ReadADC(listTemp);	
						convertAcc(listTemp, Result);				
						ADC2L = (ADC2L + Result[0])/2;
					}
					// ADC2
					StartADC(2);
     a76:	82 e0       	ldi	r24, 0x02	; 2
     a78:	18 d2       	rcall	.+1072   	; 0xeaa <StartADC>
					ReadADC(listTemp);	
     a7a:	8d e1       	ldi	r24, 0x1D	; 29
     a7c:	92 e0       	ldi	r25, 0x02	; 2
     a7e:	09 d2       	rcall	.+1042   	; 0xe92 <ReadADC>
					convertAcc(listTemp, Result);				
     a80:	8d e1       	ldi	r24, 0x1D	; 29
     a82:	92 e0       	ldi	r25, 0x02	; 2
     a84:	63 e2       	ldi	r22, 0x23	; 35
     a86:	72 e0       	ldi	r23, 0x02	; 2
     a88:	0c d3       	rcall	.+1560   	; 0x10a2 <convertAcc>
					ADC3L = Result[0];
     a8a:	80 91 23 02 	lds	r24, 0x0223
     a8e:	80 93 3a 02 	sts	0x023A, r24
					ADC3H = Result[1];
     a92:	80 91 24 02 	lds	r24, 0x0224
     a96:	80 93 37 02 	sts	0x0237, r24
					for(i = 0; i <= NombreDePassage - 2; i++)
     a9a:	10 92 35 02 	sts	0x0235, r1
     a9e:	10 92 34 02 	sts	0x0234, r1
     aa2:	1e c0       	rjmp	.+60     	; 0xae0 <main+0x51e>
					{
						StartADC(2);
     aa4:	82 e0       	ldi	r24, 0x02	; 2
     aa6:	01 d2       	rcall	.+1026   	; 0xeaa <StartADC>
						ReadADC(listTemp);	
     aa8:	8d e1       	ldi	r24, 0x1D	; 29
     aaa:	92 e0       	ldi	r25, 0x02	; 2
     aac:	f2 d1       	rcall	.+996    	; 0xe92 <ReadADC>
						convertAcc(listTemp, Result);				
     aae:	8d e1       	ldi	r24, 0x1D	; 29
     ab0:	92 e0       	ldi	r25, 0x02	; 2
     ab2:	63 e2       	ldi	r22, 0x23	; 35
     ab4:	72 e0       	ldi	r23, 0x02	; 2
     ab6:	f5 d2       	rcall	.+1514   	; 0x10a2 <convertAcc>
						ADC3L = (ADC3L + Result[0])/2;
     ab8:	80 91 23 02 	lds	r24, 0x0223
     abc:	20 91 3a 02 	lds	r18, 0x023A
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	28 0f       	add	r18, r24
     ac4:	31 1d       	adc	r19, r1
     ac6:	35 95       	asr	r19
     ac8:	27 95       	ror	r18
     aca:	20 93 3a 02 	sts	0x023A, r18
					StartADC(2);
					ReadADC(listTemp);	
					convertAcc(listTemp, Result);				
					ADC3L = Result[0];
					ADC3H = Result[1];
					for(i = 0; i <= NombreDePassage - 2; i++)
     ace:	80 91 34 02 	lds	r24, 0x0234
     ad2:	90 91 35 02 	lds	r25, 0x0235
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	90 93 35 02 	sts	0x0235, r25
     adc:	80 93 34 02 	sts	0x0234, r24
     ae0:	80 91 04 01 	lds	r24, 0x0104
     ae4:	90 91 05 01 	lds	r25, 0x0105
     ae8:	02 97       	sbiw	r24, 0x02	; 2
     aea:	20 91 34 02 	lds	r18, 0x0234
     aee:	30 91 35 02 	lds	r19, 0x0235
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	b0 f6       	brcc	.-84     	; 0xaa4 <main+0x4e2>
						StartADC(2);
						ReadADC(listTemp);	
						convertAcc(listTemp, Result);				
						ADC3L = (ADC3L + Result[0])/2;
					}
					ACCH = (ADC2H + ADC3H)/2;
     af8:	80 91 37 02 	lds	r24, 0x0237
     afc:	40 91 3e 02 	lds	r20, 0x023E
     b00:	50 e0       	ldi	r21, 0x00	; 0
     b02:	48 0f       	add	r20, r24
     b04:	51 1d       	adc	r21, r1
     b06:	55 95       	asr	r21
     b08:	47 95       	ror	r20
     b0a:	40 93 39 02 	sts	0x0239, r20
					ACCL = (ADC2L + ADC3L)/2;
     b0e:	80 91 3a 02 	lds	r24, 0x023A
     b12:	60 91 31 02 	lds	r22, 0x0231
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	68 0f       	add	r22, r24
     b1a:	71 1d       	adc	r23, r1
     b1c:	75 95       	asr	r23
     b1e:	67 95       	ror	r22
     b20:	60 93 36 02 	sts	0x0236, r22
					transmission(CMD_INCLINAISON, ACCL, ACCH);
     b24:	80 e6       	ldi	r24, 0x60	; 96
     b26:	e2 cd       	rjmp	.-1084   	; 0x6ec <main+0x12a>
					break;

				case CMD_ADC4 : // Envoie les informations du quatrième convertisseur ADC
					StartADC(3);
     b28:	83 e0       	ldi	r24, 0x03	; 3
     b2a:	bf d1       	rcall	.+894    	; 0xeaa <StartADC>
					//ReadADC(Result);
					ReadADC(listTemp);
     b2c:	8d e1       	ldi	r24, 0x1D	; 29
     b2e:	92 e0       	ldi	r25, 0x02	; 2
     b30:	b0 d1       	rcall	.+864    	; 0xe92 <ReadADC>
					convertAcc(listTemp, Result);
     b32:	8d e1       	ldi	r24, 0x1D	; 29
     b34:	92 e0       	ldi	r25, 0x02	; 2
     b36:	63 e2       	ldi	r22, 0x23	; 35
     b38:	72 e0       	ldi	r23, 0x02	; 2
     b3a:	b3 d2       	rcall	.+1382   	; 0x10a2 <convertAcc>
					ADC4L = Result[0];
     b3c:	60 91 23 02 	lds	r22, 0x0223
     b40:	60 93 63 02 	sts	0x0263, r22
					ADC4H = Result[1];
     b44:	40 91 24 02 	lds	r20, 0x0224
     b48:	40 93 3c 02 	sts	0x023C, r20
					transmission(CMD_ADC4, ADC4L, ADC4H);
     b4c:	83 e5       	ldi	r24, 0x53	; 83
     b4e:	ce cd       	rjmp	.-1124   	; 0x6ec <main+0x12a>
					break;

				case CMD_SENS_0_POSITIF :
					Sens_0 = 1 ;
     b50:	00 93 01 01 	sts	0x0101, r16
					transmission(CMD_SENS_0_POSITIF,Conf_sens0p, 0x00 );
     b54:	80 e9       	ldi	r24, 0x90	; 144
     b56:	60 ea       	ldi	r22, 0xA0	; 160
     b58:	0e c0       	rjmp	.+28     	; 0xb76 <main+0x5b4>
					break;

				case CMD_SENS_0_NEGATIF :
					Sens_0 = 0 ;
     b5a:	10 92 01 01 	sts	0x0101, r1
					transmission(CMD_SENS_0_NEGATIF,Conf_sens0n, 0x00 );
     b5e:	81 e9       	ldi	r24, 0x91	; 145
     b60:	61 ea       	ldi	r22, 0xA1	; 161
     b62:	09 c0       	rjmp	.+18     	; 0xb76 <main+0x5b4>
					break;

				case CMD_SENS_1_POSITIF :
					Sens_1 = 1 ;
     b64:	00 93 02 01 	sts	0x0102, r16
					transmission(CMD_SENS_1_POSITIF,Conf_sens1p, 0x00 );
     b68:	82 e9       	ldi	r24, 0x92	; 146
     b6a:	62 ea       	ldi	r22, 0xA2	; 162
     b6c:	04 c0       	rjmp	.+8      	; 0xb76 <main+0x5b4>
					break;

				case CMD_SENS_1_NEGATIF :
					Sens_1 = 0 ;
     b6e:	10 92 02 01 	sts	0x0102, r1
					transmission(CMD_SENS_1_NEGATIF, Conf_sens1n, 0x00 );
     b72:	83 e9       	ldi	r24, 0x93	; 147
     b74:	63 ea       	ldi	r22, 0xA3	; 163
     b76:	40 e0       	ldi	r20, 0x00	; 0
     b78:	b9 cd       	rjmp	.-1166   	; 0x6ec <main+0x12a>
					break;

				default :
					asm("nop");
     b7a:	00 00       	nop
					break;
			}

			for(decalage=0;decalage<=DATADIMENSION-1;decalage++) // Décale les demandes pour supprimer la première et passer au traitement de la demande suivante
     b7c:	10 92 3b 02 	sts	0x023B, r1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	07 c0       	rjmp	.+14     	; 0xb92 <main+0x5d0>
			{
				data[decalage]=data[decalage+1];	
     b84:	e9 2f       	mov	r30, r25
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	e1 5c       	subi	r30, 0xC1	; 193
     b8a:	fd 4f       	sbci	r31, 0xFD	; 253
     b8c:	81 81       	ldd	r24, Z+1	; 0x01
     b8e:	80 83       	st	Z, r24
     b90:	9f 5f       	subi	r25, 0xFF	; 255
				default :
					asm("nop");
					break;
			}

			for(decalage=0;decalage<=DATADIMENSION-1;decalage++) // Décale les demandes pour supprimer la première et passer au traitement de la demande suivante
     b92:	99 31       	cpi	r25, 0x19	; 25
     b94:	b8 f3       	brcs	.-18     	; 0xb84 <main+0x5c2>
     b96:	90 93 3b 02 	sts	0x023B, r25
			{
				data[decalage]=data[decalage+1];	
			}
			data[DATADIMENSION-1] = 0x00 ;
     b9a:	10 92 57 02 	sts	0x0257, r1
			datanumber--;
     b9e:	80 91 13 02 	lds	r24, 0x0213
     ba2:	90 91 14 02 	lds	r25, 0x0214
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	90 93 14 02 	sts	0x0214, r25
     bac:	80 93 13 02 	sts	0x0213, r24
     bb0:	1f cd       	rjmp	.-1474   	; 0x5f0 <main+0x2e>
		}
		else
		{
			asm("nop");
     bb2:	00 00       	nop
     bb4:	1d cd       	rjmp	.-1478   	; 0x5f0 <main+0x2e>

00000bb6 <init_timer1>:

#include "timer1.h"

void init_timer1(void)
{
	TCCR1B |= (1<<WGM12);	//CTC
     bb6:	e1 e8       	ldi	r30, 0x81	; 129
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	88 60       	ori	r24, 0x08	; 8
     bbe:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A);	//Enable OCIE1A
     bc0:	ef e6       	ldi	r30, 0x6F	; 111
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	82 60       	ori	r24, 0x02	; 2
     bc8:	80 83       	st	Z, r24

	flag_timer1 = FALSE;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	80 93 1c 02 	sts	0x021C, r24
}
     bd0:	08 95       	ret

00000bd2 <start_timer1>:

//Prescaler 8 => 65536ms MAX
void start_timer1(unsigned int time)
{
	cli();
     bd2:	f8 94       	cli
	OCR1A = time;
     bd4:	90 93 89 00 	sts	0x0089, r25
     bd8:	80 93 88 00 	sts	0x0088, r24
	sei();
     bdc:	78 94       	sei

	//TCCR1B |= (1<<CS11);  //start - Prescaler 8
	TCCR1B |= (1<<CS10) | (1<<CS12);  //start - Prescaler 1024
     bde:	e1 e8       	ldi	r30, 0x81	; 129
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	85 60       	ori	r24, 0x05	; 5
     be6:	80 83       	st	Z, r24
}
     be8:	08 95       	ret

00000bea <stop_timer1>:

void stop_timer1(void)
{
	TCCR1B &= 0b11111101;
     bea:	e1 e8       	ldi	r30, 0x81	; 129
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	8d 7f       	andi	r24, 0xFD	; 253
     bf2:	80 83       	st	Z, r24
	//TCCR1B &= 0b11111010;

	//Reset timer
	//Obligation d'arreter les interruptions car le timer est un 16bits => 2 instructions (voir datasheet)
	cli();
     bf4:	f8 94       	cli
	TCNT1 = 0;
     bf6:	10 92 85 00 	sts	0x0085, r1
     bfa:	10 92 84 00 	sts	0x0084, r1
	sei();
     bfe:	78 94       	sei
}
     c00:	08 95       	ret

00000c02 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
     c02:	1f 92       	push	r1
     c04:	0f 92       	push	r0
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	0f 92       	push	r0
     c0a:	11 24       	eor	r1, r1
	flag_timer1 = TRUE;	//Force à quitter la boucle de getchar_usart();
     c0c:	10 92 1c 02 	sts	0x021C, r1
}
     c10:	0f 90       	pop	r0
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	0f 90       	pop	r0
     c16:	1f 90       	pop	r1
     c18:	18 95       	reti

00000c1a <init_usart>:

//Initialisation de l'usart
void init_usart(unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     c1a:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
     c1e:	80 93 c4 00 	sts	0x00C4, r24
	/*Double speed*/
	UCSR0A = (1<<U2X0);
     c22:	82 e0       	ldi	r24, 0x02	; 2
     c24:	80 93 c0 00 	sts	0x00C0, r24
	/*Enable receiver and transmitter */
	UCSR0B |= (1<<TXEN0) | (1<<RXEN0);
     c28:	e1 ec       	ldi	r30, 0xC1	; 193
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	88 61       	ori	r24, 0x18	; 24
     c30:	80 83       	st	Z, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (3<<UCSZ00);
     c32:	86 e0       	ldi	r24, 0x06	; 6
     c34:	80 93 c2 00 	sts	0x00C2, r24

	flag_usart = FALSE;
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	80 93 16 02 	sts	0x0216, r24
}
     c3e:	08 95       	ret

00000c40 <putchar_usart>:

//Permet l'envoi d'un caractère
void putchar_usart(char c)
{
     c40:	98 2f       	mov	r25, r24
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1<<UDRE0)));
     c42:	80 91 c0 00 	lds	r24, 0x00C0
     c46:	85 ff       	sbrs	r24, 5
     c48:	fc cf       	rjmp	.-8      	; 0xc42 <putchar_usart+0x2>
	/* Put data into buffer, sends the data */
	UDR0 = c;
     c4a:	90 93 c6 00 	sts	0x00C6, r25
}
     c4e:	08 95       	ret

00000c50 <getchar_usart>:
//Permet la reception d'un caractère
char getchar_usart(void)
{
	/* Wait for data to be received */
	//Si le flag_timer1 est différent de FALSE, on sort de la boucle
	while ((!(UCSR0A & (1<<RXC0))) && (flag_timer1 == FALSE));
     c50:	80 91 c0 00 	lds	r24, 0x00C0
     c54:	87 fd       	sbrc	r24, 7
     c56:	04 c0       	rjmp	.+8      	; 0xc60 <getchar_usart+0x10>
     c58:	80 91 1c 02 	lds	r24, 0x021C
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	c1 f3       	breq	.-16     	; 0xc50 <getchar_usart>
	/* Get and return received data from buffer */
	if((UCSR0A & (1<<RXC0)))
     c60:	80 91 c0 00 	lds	r24, 0x00C0
     c64:	87 fd       	sbrc	r24, 7
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <getchar_usart+0x1c>
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	08 95       	ret
	{
		return UDR0;
     c6c:	80 91 c6 00 	lds	r24, 0x00C6
	}
	else
	{
		return 0;
	}
}
     c70:	08 95       	ret

00000c72 <gets_usart>:
		putchar_usart(string[i]);
}

//Permet de recevoir une chaine de caractère sur l'usart
void gets_usart(char string[], unsigned char len)
{
     c72:	fc 01       	movw	r30, r24
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	12 c0       	rjmp	.+36     	; 0xc9c <gets_usart+0x2a>
//Permet la reception d'un caractère
char getchar_usart(void)
{
	/* Wait for data to be received */
	//Si le flag_timer1 est différent de FALSE, on sort de la boucle
	while ((!(UCSR0A & (1<<RXC0))) && (flag_timer1 == FALSE));
     c78:	80 91 c0 00 	lds	r24, 0x00C0
     c7c:	87 fd       	sbrc	r24, 7
     c7e:	04 c0       	rjmp	.+8      	; 0xc88 <gets_usart+0x16>
     c80:	80 91 1c 02 	lds	r24, 0x021C
     c84:	81 30       	cpi	r24, 0x01	; 1
     c86:	c1 f3       	breq	.-16     	; 0xc78 <gets_usart+0x6>
	/* Get and return received data from buffer */
	if((UCSR0A & (1<<RXC0)))
     c88:	80 91 c0 00 	lds	r24, 0x00C0
     c8c:	87 fd       	sbrc	r24, 7
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <gets_usart+0x22>
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <gets_usart+0x26>
	{
		return UDR0;
     c94:	80 91 c6 00 	lds	r24, 0x00C6
void gets_usart(char string[], unsigned char len)
{
	unsigned char i;
	
	for(i=0; i<len; i++)
		string[i] = getchar_usart();
     c98:	81 93       	st	Z+, r24
//Permet de recevoir une chaine de caractère sur l'usart
void gets_usart(char string[], unsigned char len)
{
	unsigned char i;
	
	for(i=0; i<len; i++)
     c9a:	9f 5f       	subi	r25, 0xFF	; 255
     c9c:	96 17       	cp	r25, r22
     c9e:	60 f3       	brcs	.-40     	; 0xc78 <gets_usart+0x6>
		string[i] = getchar_usart();
}
     ca0:	08 95       	ret

00000ca2 <puts_usart>:
	}
}

//Permet d'écrire une chaine de caractère sur l'usart
void puts_usart(char string[])
{
     ca2:	9c 01       	movw	r18, r24
	unsigned char i;

	for(i=0; i<strlen(string); i++)
     ca4:	dc 01       	movw	r26, r24
     ca6:	0d 90       	ld	r0, X+
     ca8:	00 20       	and	r0, r0
     caa:	e9 f7       	brne	.-6      	; 0xca6 <puts_usart+0x4>
     cac:	11 97       	sbiw	r26, 0x01	; 1
     cae:	a8 1b       	sub	r26, r24
     cb0:	b9 0b       	sbc	r27, r25
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0a c0       	rjmp	.+20     	; 0xcca <puts_usart+0x28>
		putchar_usart(string[i]);
     cb6:	e2 0f       	add	r30, r18
     cb8:	f3 1f       	adc	r31, r19
     cba:	40 81       	ld	r20, Z

//Permet l'envoi d'un caractère
void putchar_usart(char c)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1<<UDRE0)));
     cbc:	80 91 c0 00 	lds	r24, 0x00C0
     cc0:	85 ff       	sbrs	r24, 5
     cc2:	fc cf       	rjmp	.-8      	; 0xcbc <puts_usart+0x1a>
	/* Put data into buffer, sends the data */
	UDR0 = c;
     cc4:	40 93 c6 00 	sts	0x00C6, r20
//Permet d'écrire une chaine de caractère sur l'usart
void puts_usart(char string[])
{
	unsigned char i;

	for(i=0; i<strlen(string); i++)
     cc8:	9f 5f       	subi	r25, 0xFF	; 255
     cca:	e9 2f       	mov	r30, r25
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	ea 17       	cp	r30, r26
     cd0:	fb 07       	cpc	r31, r27
     cd2:	88 f3       	brcs	.-30     	; 0xcb6 <puts_usart+0x14>
		putchar_usart(string[i]);
}
     cd4:	08 95       	ret

00000cd6 <init_watchdog>:

volatile unsigned int timeout = TIMEOUT_RESET;

void init_watchdog(void)
{
	cli();
     cd6:	f8 94       	cli

	//reset watchdog
	wdt_reset();
     cd8:	a8 95       	wdr
	//set up WDT Interrupt Mode
	WDTCSR = (1<<WDCE)|(1<<WDE);
     cda:	e0 e6       	ldi	r30, 0x60	; 96
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	88 e1       	ldi	r24, 0x18	; 24
     ce0:	80 83       	st	Z, r24
	//Start watchdog timer with 8s prescaller
	WDTCSR = (1<<WDIE)|(1<<WDP3)|(1<<WDP0);
     ce2:	81 e6       	ldi	r24, 0x61	; 97
     ce4:	80 83       	st	Z, r24

	sei();
     ce6:	78 94       	sei
}
     ce8:	08 95       	ret

00000cea <__vector_6>:

ISR(WDT_vect)
{
     cea:	1f 92       	push	r1
     cec:	0f 92       	push	r0
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	0f 92       	push	r0
     cf2:	11 24       	eor	r1, r1
     cf4:	8f 93       	push	r24
     cf6:	9f 93       	push	r25
	cli();
     cf8:	f8 94       	cli
	if(timeout != 0)
     cfa:	80 91 07 01 	lds	r24, 0x0107
     cfe:	90 91 08 01 	lds	r25, 0x0108
     d02:	89 2b       	or	r24, r25
     d04:	89 f0       	breq	.+34     	; 0xd28 <__vector_6+0x3e>
	{
		//reset watchdog
		wdt_reset();
     d06:	a8 95       	wdr
		//set up WDT Interrupt Mode
		WDTCSR = (1<<WDCE)|(1<<WDE);
     d08:	88 e1       	ldi	r24, 0x18	; 24
     d0a:	80 93 60 00 	sts	0x0060, r24
		//Start watchdog timer with 8s prescaller
		WDTCSR = (1<<WDIE)|(1<<WDP3)|(1<<WDP0);
     d0e:	81 e6       	ldi	r24, 0x61	; 97
     d10:	80 93 60 00 	sts	0x0060, r24
		
		timeout--;
     d14:	80 91 07 01 	lds	r24, 0x0107
     d18:	90 91 08 01 	lds	r25, 0x0108
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	90 93 08 01 	sts	0x0108, r25
     d22:	80 93 07 01 	sts	0x0107, r24
     d26:	07 c0       	rjmp	.+14     	; 0xd36 <__vector_6+0x4c>
	}
	else
	{
		//reset watchdog
		wdt_reset();
     d28:	a8 95       	wdr
		//set up WDT Reset Mode
		WDTCSR = (1<<WDCE)|(1<<WDE);
     d2a:	88 e1       	ldi	r24, 0x18	; 24
     d2c:	80 93 60 00 	sts	0x0060, r24
		//Reset Mode
		WDTCSR = (1<<WDE);
     d30:	88 e0       	ldi	r24, 0x08	; 8
     d32:	80 93 60 00 	sts	0x0060, r24
	}
	sei();
     d36:	78 94       	sei
}
     d38:	9f 91       	pop	r25
     d3a:	8f 91       	pop	r24
     d3c:	0f 90       	pop	r0
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	0f 90       	pop	r0
     d42:	1f 90       	pop	r1
     d44:	18 95       	reti

00000d46 <initDS7505>:

/*********************************************************************/
// FUNCTION: char initDS7505(unsigned char addr_mode)
// PURPOSE: Initialisation d'un capteur de T° dont l'adresse I2C est spécifiée
unsigned char initDS7505(unsigned char addr_mode)
{
     d46:	1f 93       	push	r17
	unsigned char ret;

    ret = i2c_start(addr_mode+I2C_WRITE);       // Start avec adresse capteur + write bit
     d48:	2f db       	rcall	.-2466   	; 0x3a8 <i2c_start>
     d4a:	18 2f       	mov	r17, r24
	/* Si le capteur n'est pas présent sur le bus I2C */
    if ( ret ) 
     d4c:	88 23       	and	r24, r24
     d4e:	11 f0       	breq	.+4      	; 0xd54 <initDS7505+0xe>
	{
        i2c_stop();		// Fin de communication sur le bus I2C
     d50:	7b db       	rcall	.-2314   	; 0x448 <i2c_stop>
     d52:	09 c0       	rjmp	.+18     	; 0xd66 <initDS7505+0x20>
    }
	/* Le capteur est présent sur le bus I2C */
	else 
	{
        i2c_write(CONF_REG); 	// Envoyer commande "Configuration register"
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	80 db       	rcall	.-2304   	; 0x458 <i2c_write>
        i2c_write(RES_10);  	// Conversion 10 bits 
     d58:	80 e2       	ldi	r24, 0x20	; 32
     d5a:	7e db       	rcall	.-2308   	; 0x458 <i2c_write>
		i2c_stop();				// Fin de communication sur le bus I2C
     d5c:	75 db       	rcall	.-2326   	; 0x448 <i2c_stop>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d5e:	80 e3       	ldi	r24, 0x30	; 48
     d60:	95 e7       	ldi	r25, 0x75	; 117
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	f1 f7       	brne	.-4      	; 0xd62 <initDS7505+0x1c>
		_delay_ms(15);			// Délais avant de communiquer à nouveau avec le capteur
	}
	return ret;
}
     d66:	81 2f       	mov	r24, r17
     d68:	1f 91       	pop	r17
     d6a:	08 95       	ret

00000d6c <get_DS7505_Devices>:

/*********************************************************************/
// FUNCTION: get_DS7505_Devices(unsigned char addr_mode, char *listTemp)
// PURPOSE: Aquérir la T° d'un DS7505 dont l'adresse I2C est spécifiée
unsigned char get_DS7505_Devices(unsigned char addr_mode, char *listTemp)
{
     d6c:	0f 93       	push	r16
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	18 2f       	mov	r17, r24
     d76:	eb 01       	movw	r28, r22
	unsigned char ret;
	ret = i2c_start(addr_mode+I2C_WRITE);       // Start avec adresse capteur + write bit
     d78:	17 db       	rcall	.-2514   	; 0x3a8 <i2c_start>
     d7a:	08 2f       	mov	r16, r24
	i2c_stop();
     d7c:	65 db       	rcall	.-2358   	; 0x448 <i2c_stop>

	if (!ret)/* Si le capteur est présent sur le bus I2C */
     d7e:	00 23       	and	r16, r16
     d80:	69 f4       	brne	.+26     	; 0xd9c <get_DS7505_Devices+0x30>
	{
	    i2c_start_wait(addr_mode+I2C_WRITE);    	// Start avec adresse capteur + write bit
     d82:	81 2f       	mov	r24, r17
     d84:	37 db       	rcall	.-2450   	; 0x3f4 <i2c_start_wait>
													// Et attend que le bus soit libéré
	    i2c_write(TEMP_REG);  						// Envoyer commande "Read Temperature"
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	67 db       	rcall	.-2354   	; 0x458 <i2c_write>
		i2c_rep_start(addr_mode+I2C_READ);        	// Repeated start avec adresse capteur + write bit
     d8a:	81 2f       	mov	r24, r17
     d8c:	8f 5f       	subi	r24, 0xFF	; 255
     d8e:	5a db       	rcall	.-2380   	; 0x444 <i2c_rep_start>

		listTemp[0] = i2c_readAck();	// Sauvegarder les bits de poids fort + Acknowledge
     d90:	75 db       	rcall	.-2326   	; 0x47c <i2c_readAck>
     d92:	88 83       	st	Y, r24
		listTemp[1] = i2c_readNak();	// Sauvegarder les bits de poids faible + Not acknowledge
     d94:	7d db       	rcall	.-2310   	; 0x490 <i2c_readNak>
     d96:	89 83       	std	Y+1, r24	; 0x01

	    i2c_stop();						// Fin de communication sur le bus I2C
     d98:	57 db       	rcall	.-2386   	; 0x448 <i2c_stop>
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <get_DS7505_Devices+0x34>
	}
	else/* Le capteur n'est pas présent sur le bus I2C */
	{
		listTemp[0] = 0;				// Mettre à zéro l'octet de poids fort
     d9c:	18 82       	st	Y, r1
		listTemp[1] = 0;				// Mettre à zéro l'octet de poids faible
     d9e:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret ;						// Fin de communication sur le bus I2C
}
     da0:	80 2f       	mov	r24, r16
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	1f 91       	pop	r17
     da8:	0f 91       	pop	r16
     daa:	08 95       	ret

00000dac <convertTemp>:
     dac:	fc 01       	movw	r30, r24
     dae:	db 01       	movw	r26, r22
     db0:	40 81       	ld	r20, Z
     db2:	47 fd       	sbrc	r20, 7
     db4:	03 c0       	rjmp	.+6      	; 0xdbc <convertTemp+0x10>
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	03 c0       	rjmp	.+6      	; 0xdc2 <convertTemp+0x16>
     dbc:	41 95       	neg	r20
     dbe:	20 e8       	ldi	r18, 0x80	; 128
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	81 81       	ldd	r24, Z+1	; 0x01
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	80 7c       	andi	r24, 0xC0	; 192
     dc8:	90 70       	andi	r25, 0x00	; 0
     dca:	80 38       	cpi	r24, 0x80	; 128
     dcc:	91 05       	cpc	r25, r1
     dce:	49 f0       	breq	.+18     	; 0xde2 <convertTemp+0x36>
     dd0:	80 3c       	cpi	r24, 0xC0	; 192
     dd2:	91 05       	cpc	r25, r1
     dd4:	49 f0       	breq	.+18     	; 0xde8 <convertTemp+0x3c>
     dd6:	80 34       	cpi	r24, 0x40	; 64
     dd8:	91 05       	cpc	r25, r1
     dda:	41 f4       	brne	.+16     	; 0xdec <convertTemp+0x40>
     ddc:	27 5e       	subi	r18, 0xE7	; 231
     dde:	3f 4f       	sbci	r19, 0xFF	; 255
     de0:	05 c0       	rjmp	.+10     	; 0xdec <convertTemp+0x40>
     de2:	2e 5c       	subi	r18, 0xCE	; 206
     de4:	3f 4f       	sbci	r19, 0xFF	; 255
     de6:	02 c0       	rjmp	.+4      	; 0xdec <convertTemp+0x40>
     de8:	25 5b       	subi	r18, 0xB5	; 181
     dea:	3f 4f       	sbci	r19, 0xFF	; 255
     dec:	4c 93       	st	X, r20
     dee:	11 96       	adiw	r26, 0x01	; 1
     df0:	2c 93       	st	X, r18
     df2:	08 95       	ret

00000df4 <stringTemp>:
     df4:	dc 01       	movw	r26, r24
     df6:	fb 01       	movw	r30, r22
     df8:	8c 91       	ld	r24, X
     dfa:	6a e0       	ldi	r22, 0x0A	; 10
     dfc:	8f d6       	rcall	.+3358   	; 0x1b1c <__udivmodqi4>
     dfe:	80 5d       	subi	r24, 0xD0	; 208
     e00:	81 83       	std	Z+1, r24	; 0x01
     e02:	8c 91       	ld	r24, X
     e04:	8b d6       	rcall	.+3350   	; 0x1b1c <__udivmodqi4>
     e06:	90 5d       	subi	r25, 0xD0	; 208
     e08:	92 83       	std	Z+2, r25	; 0x02
     e0a:	11 96       	adiw	r26, 0x01	; 1
     e0c:	8c 91       	ld	r24, X
     e0e:	11 97       	sbiw	r26, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	8f 77       	andi	r24, 0x7F	; 127
     e14:	90 70       	andi	r25, 0x00	; 0
     e16:	89 31       	cpi	r24, 0x19	; 25
     e18:	91 05       	cpc	r25, r1
     e1a:	79 f0       	breq	.+30     	; 0xe3a <stringTemp+0x46>
     e1c:	8a 31       	cpi	r24, 0x1A	; 26
     e1e:	91 05       	cpc	r25, r1
     e20:	1c f4       	brge	.+6      	; 0xe28 <stringTemp+0x34>
     e22:	89 2b       	or	r24, r25
     e24:	41 f0       	breq	.+16     	; 0xe36 <stringTemp+0x42>
     e26:	13 c0       	rjmp	.+38     	; 0xe4e <stringTemp+0x5a>
     e28:	82 33       	cpi	r24, 0x32	; 50
     e2a:	91 05       	cpc	r25, r1
     e2c:	41 f0       	breq	.+16     	; 0xe3e <stringTemp+0x4a>
     e2e:	8b 34       	cpi	r24, 0x4B	; 75
     e30:	91 05       	cpc	r25, r1
     e32:	69 f4       	brne	.+26     	; 0xe4e <stringTemp+0x5a>
     e34:	08 c0       	rjmp	.+16     	; 0xe46 <stringTemp+0x52>
     e36:	80 e3       	ldi	r24, 0x30	; 48
     e38:	0b c0       	rjmp	.+22     	; 0xe50 <stringTemp+0x5c>
     e3a:	82 e3       	ldi	r24, 0x32	; 50
     e3c:	05 c0       	rjmp	.+10     	; 0xe48 <stringTemp+0x54>
     e3e:	85 e3       	ldi	r24, 0x35	; 53
     e40:	83 83       	std	Z+3, r24	; 0x03
     e42:	80 e3       	ldi	r24, 0x30	; 48
     e44:	06 c0       	rjmp	.+12     	; 0xe52 <stringTemp+0x5e>
     e46:	87 e3       	ldi	r24, 0x37	; 55
     e48:	83 83       	std	Z+3, r24	; 0x03
     e4a:	85 e3       	ldi	r24, 0x35	; 53
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <stringTemp+0x5e>
     e4e:	85 e2       	ldi	r24, 0x25	; 37
     e50:	83 83       	std	Z+3, r24	; 0x03
     e52:	84 83       	std	Z+4, r24	; 0x04
     e54:	11 96       	adiw	r26, 0x01	; 1
     e56:	8c 91       	ld	r24, X
     e58:	80 78       	andi	r24, 0x80	; 128
     e5a:	80 83       	st	Z, r24
     e5c:	80 38       	cpi	r24, 0x80	; 128
     e5e:	11 f4       	brne	.+4      	; 0xe64 <stringTemp+0x70>
     e60:	8d e2       	ldi	r24, 0x2D	; 45
     e62:	01 c0       	rjmp	.+2      	; 0xe66 <stringTemp+0x72>
     e64:	80 e2       	ldi	r24, 0x20	; 32
     e66:	80 83       	st	Z, r24
     e68:	08 95       	ret

00000e6a <InitADC>:
	//cbiBF(DDRC,0);
	//cbiBF(DDRC,1);
	//cbiBF(DDRC,2);
	//cbiBF(DDRC,3);
	// Selection du voltage de référence sur AREF, les données seront ajustées à gauche
	ADMUX |= (0<<REFS1)|(0<<REFS0)|(1<<ADLAR);
     e6a:	ec e7       	ldi	r30, 0x7C	; 124
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	80 62       	ori	r24, 0x20	; 32
     e72:	80 83       	st	Z, r24
	//	Bit 	15		14		13		12		11		10 		9 		8
	//	(0x79) 	ADC9 	ADC8 	ADC7 	ADC6 	ADC5 	ADC4 	ADC3 	ADC2 	ADCH
	//	(0x78) 	ADC1 	ADC0 	 		 										ADCL
	// Activer l' ADC
	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     e74:	ea e7       	ldi	r30, 0x7A	; 122
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	87 68       	ori	r24, 0x87	; 135
     e7c:	80 83       	st	Z, r24
	// ADCSRA |= (1<<ADSC);
	// Digital Input Disable (mise à 1 pour diminuer la puissance et favoriser entrée analogique)
	//DIDR0 |= (1<<ADC3D)|(1<<ADC2D)|(1<<ADC1D)|(1<<ADC0D);
	
	
}
     e7e:	08 95       	ret

00000e80 <ClearFlagADC>:

void ClearFlagADC(void)
{
	// ADC Interrupt Flag => mis à 1 quand conversation terminée ; forcer à un pour mettre à 0
	ADCSRA |= (1<<ADIF);
     e80:	ea e7       	ldi	r30, 0x7A	; 122
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	80 61       	ori	r24, 0x10	; 16
     e88:	80 83       	st	Z, r24
	// Clear pour éviter conversion
	ADCSRA &= ~(1<<ADSC);
     e8a:	80 81       	ld	r24, Z
     e8c:	8f 7b       	andi	r24, 0xBF	; 191
     e8e:	80 83       	st	Z, r24
}
     e90:	08 95       	ret

00000e92 <ReadADC>:

void ReadADC(char EnregistrementADC[])
{
     e92:	fc 01       	movw	r30, r24
	// Attendre que la conversion soit finie
	while(((ADCSRA)&(1<<ADIF))==0);
     e94:	80 91 7a 00 	lds	r24, 0x007A
     e98:	84 ff       	sbrs	r24, 4
     e9a:	fc cf       	rjmp	.-8      	; 0xe94 <ReadADC+0x2>
	// Enregistre les données
	EnregistrementADC[0] = ADCL;
     e9c:	80 91 78 00 	lds	r24, 0x0078
     ea0:	80 83       	st	Z, r24
	EnregistrementADC[1] = ADCH;
     ea2:	80 91 79 00 	lds	r24, 0x0079
     ea6:	81 83       	std	Z+1, r24	; 0x01
}
     ea8:	08 95       	ret

00000eaa <StartADC>:

void StartADC(unsigned char multiplexeur)
{
	// Selection le canal ADC
	if(multiplexeur==0)
     eaa:	88 23       	and	r24, r24
     eac:	39 f4       	brne	.+14     	; 0xebc <StartADC+0x12>
	{
		DIDR0 |= (0<<ADC3D)|(0<<ADC2D)|(0<<ADC1D)|(1<<ADC0D);
     eae:	80 91 7e 00 	lds	r24, 0x007E
     eb2:	81 60       	ori	r24, 0x01	; 1
     eb4:	80 93 7e 00 	sts	0x007E, r24
		ADMUX = CHANNEL0;
     eb8:	80 e2       	ldi	r24, 0x20	; 32
     eba:	08 c0       	rjmp	.+16     	; 0xecc <StartADC+0x22>
	}
	else if(multiplexeur==1)
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	49 f4       	brne	.+18     	; 0xed2 <StartADC+0x28>
	{
		DIDR0 |= (0<<ADC3D)|(0<<ADC2D)|(1<<ADC1D)|(0<<ADC0D);
     ec0:	80 91 7e 00 	lds	r24, 0x007E
     ec4:	82 60       	ori	r24, 0x02	; 2
     ec6:	80 93 7e 00 	sts	0x007E, r24
		ADMUX = CHANNEL1;
     eca:	81 e2       	ldi	r24, 0x21	; 33
     ecc:	80 93 7c 00 	sts	0x007C, r24
     ed0:	13 c0       	rjmp	.+38     	; 0xef8 <StartADC+0x4e>
	}
	else if(multiplexeur==2)
     ed2:	82 30       	cpi	r24, 0x02	; 2
     ed4:	39 f4       	brne	.+14     	; 0xee4 <StartADC+0x3a>
	{
		DIDR0 |= (0<<ADC3D)|(1<<ADC2D)|(0<<ADC1D)|(0<<ADC0D);
     ed6:	80 91 7e 00 	lds	r24, 0x007E
     eda:	84 60       	ori	r24, 0x04	; 4
     edc:	80 93 7e 00 	sts	0x007E, r24
		ADMUX = CHANNEL2;
     ee0:	82 e2       	ldi	r24, 0x22	; 34
     ee2:	f4 cf       	rjmp	.-24     	; 0xecc <StartADC+0x22>
	}
	else if(multiplexeur==3)
     ee4:	83 30       	cpi	r24, 0x03	; 3
     ee6:	39 f4       	brne	.+14     	; 0xef6 <StartADC+0x4c>
	{
		DIDR0 |= (1<<ADC3D)|(0<<ADC2D)|(0<<ADC1D)|(0<<ADC0D);
     ee8:	80 91 7e 00 	lds	r24, 0x007E
     eec:	88 60       	ori	r24, 0x08	; 8
     eee:	80 93 7e 00 	sts	0x007E, r24
		ADMUX = CHANNEL3; 
     ef2:	83 e2       	ldi	r24, 0x23	; 35
     ef4:	eb cf       	rjmp	.-42     	; 0xecc <StartADC+0x22>
	}
	else asm("nop");	
     ef6:	00 00       	nop

	// Commence la conversion
	ADCSRA |= (1<<ADSC);
     ef8:	80 91 7a 00 	lds	r24, 0x007A
     efc:	80 64       	ori	r24, 0x40	; 64
     efe:	80 93 7a 00 	sts	0x007A, r24
	// desactiver le power reduction register pour adc pour permettre conversion un par un
	PRR &= ~(1<<PRADC);
     f02:	80 91 64 00 	lds	r24, 0x0064
     f06:	8e 7f       	andi	r24, 0xFE	; 254
     f08:	80 93 64 00 	sts	0x0064, r24
}
     f0c:	08 95       	ret

00000f0e <convertHum>:
     f0e:	fc 01       	movw	r30, r24
     f10:	70 81       	ld	r23, Z
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	88 27       	eor	r24, r24
     f16:	77 fd       	sbrc	r23, 7
     f18:	80 95       	com	r24
     f1a:	98 2f       	mov	r25, r24
     f1c:	21 81       	ldd	r18, Z+1	; 0x01
     f1e:	62 0f       	add	r22, r18
     f20:	71 1d       	adc	r23, r1
     f22:	81 1d       	adc	r24, r1
     f24:	91 1d       	adc	r25, r1
     f26:	6c 7f       	andi	r22, 0xFC	; 252
     f28:	2d e7       	ldi	r18, 0x7D	; 125
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e0       	ldi	r20, 0x00	; 0
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	d6 d5       	rcall	.+2988   	; 0x1ade <__mulsi3>
     f32:	bc 01       	movw	r22, r24
     f34:	88 27       	eor	r24, r24
     f36:	99 27       	eor	r25, r25
     f38:	26 2f       	mov	r18, r22
     f3a:	26 50       	subi	r18, 0x06	; 6
     f3c:	27 3b       	cpi	r18, 0xB7	; 183
     f3e:	08 f0       	brcs	.+2      	; 0xf42 <convertHum+0x34>
     f40:	22 58       	subi	r18, 0x82	; 130
     f42:	82 2f       	mov	r24, r18
     f44:	08 95       	ret

00000f46 <stringHum>:
     f46:	28 2f       	mov	r18, r24
     f48:	fb 01       	movw	r30, r22
     f4a:	6a e0       	ldi	r22, 0x0A	; 10
     f4c:	e7 d5       	rcall	.+3022   	; 0x1b1c <__udivmodqi4>
     f4e:	80 5d       	subi	r24, 0xD0	; 208
     f50:	80 83       	st	Z, r24
     f52:	82 2f       	mov	r24, r18
     f54:	e3 d5       	rcall	.+3014   	; 0x1b1c <__udivmodqi4>
     f56:	90 5d       	subi	r25, 0xD0	; 208
     f58:	91 83       	std	Z+1, r25	; 0x01
     f5a:	08 95       	ret

00000f5c <SHT21_SoftReset>:

/*********************************************************************/
// FUNCTION: unsigned char SHT21_SoftReset(unsigned char addr_mode)
// PURPOSE: Soft reset du capteur d'humité SHT21
unsigned char SHT21_SoftReset(unsigned char addr_mode)
{
     f5c:	1f 93       	push	r17
	unsigned char ret;
	ret = i2c_start(addr_mode+I2C_WRITE);       // Start avec adresse capteur + write bit
     f5e:	24 da       	rcall	.-3000   	; 0x3a8 <i2c_start>
     f60:	18 2f       	mov	r17, r24

	if ( ret ) 									// Si le capteur n'est pas présent sur le bus I2C
     f62:	88 23       	and	r24, r24
     f64:	11 f0       	breq	.+4      	; 0xf6a <SHT21_SoftReset+0xe>
	{
        i2c_stop();								// Fin de communication sur le bus I2C
     f66:	70 da       	rcall	.-2848   	; 0x448 <i2c_stop>
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <SHT21_SoftReset+0x12>
    }
	/* Le capteur est présent sur le bus I2C */
	else
	{
		i2c_write(SOFT_RESET); 					// Envoyer commande "Soft reset"
     f6a:	8e ef       	ldi	r24, 0xFE	; 254
     f6c:	75 da       	rcall	.-2838   	; 0x458 <i2c_write>
     f6e:	80 e3       	ldi	r24, 0x30	; 48
     f70:	95 e7       	ldi	r25, 0x75	; 117
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <SHT21_SoftReset+0x16>
	}
	_delay_ms(15);								// Délais avant de communiquer à nouveau avec le capteur

  	return ret;
}
     f76:	81 2f       	mov	r24, r17
     f78:	1f 91       	pop	r17
     f7a:	08 95       	ret

00000f7c <initSHT21>:
/*********************************************************************/
// FUNCTION: get_SHT21_Devices(unsigned char addr_mode, char *listHum)
// PURPOSE: Acquérir l'humidité relative d'un SHT21 dont l'adresse
// I2C est spécifiée
unsigned char initSHT21(unsigned char addr_mode)
{
     f7c:	1f 93       	push	r17
     f7e:	18 2f       	mov	r17, r24
	unsigned char ret;
	ret = SHT21_SoftReset(addr_mode);
     f80:	ed df       	rcall	.-38     	; 0xf5c <SHT21_SoftReset>

    ret = i2c_start(addr_mode+I2C_WRITE);       // Start avec adresse capteur + write bit
     f82:	81 2f       	mov	r24, r17
     f84:	11 da       	rcall	.-3038   	; 0x3a8 <i2c_start>
     f86:	18 2f       	mov	r17, r24
	/* Si le capteur n'est pas présent sur le bus I2C */
    if ( ret ) // Si le capteur n'est pas présent sur le bus I2C
     f88:	88 23       	and	r24, r24
     f8a:	11 f0       	breq	.+4      	; 0xf90 <initSHT21+0x14>
	{
        i2c_stop();		// Fin de communication sur le bus I2C
     f8c:	5d da       	rcall	.-2886   	; 0x448 <i2c_stop>
     f8e:	09 c0       	rjmp	.+18     	; 0xfa2 <initSHT21+0x26>
    }
	/* Le capteur est présent sur le bus I2C */
	else 
	{
        i2c_write(W_USER_REG); 	// Envoyer commande "Write user register"
     f90:	86 ee       	ldi	r24, 0xE6	; 230
     f92:	62 da       	rcall	.-2876   	; 0x458 <i2c_write>
        i2c_write(RES_RH_8);  	// Conversion 8 bits 
     f94:	83 e0       	ldi	r24, 0x03	; 3
     f96:	60 da       	rcall	.-2880   	; 0x458 <i2c_write>
		i2c_stop();				// Fin de communication sur le bus I2C
     f98:	57 da       	rcall	.-2898   	; 0x448 <i2c_stop>
     f9a:	80 e3       	ldi	r24, 0x30	; 48
     f9c:	95 e7       	ldi	r25, 0x75	; 117
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <initSHT21+0x22>
		_delay_ms(15);			// Délais avant de communiquer à nouveau avec le capteur
	}
	return ret;
}
     fa2:	81 2f       	mov	r24, r17
     fa4:	1f 91       	pop	r17
     fa6:	08 95       	ret

00000fa8 <get_SHT21_Devices>:

/*********************************************************************/
// FUNCTION: get_SHT21_Devices(unsigned char addr_mode, char *listHum)
// PURPOSE: Aquérir la T° d'un SHT21 dont l'adresse I2C est spécifiée
unsigned char get_SHT21_Devices(unsigned char addr_mode, char *listHum)
{
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	18 2f       	mov	r17, r24
     fb2:	eb 01       	movw	r28, r22
	unsigned char ret;
	ret = i2c_start(addr_mode+I2C_WRITE);       // Start avec adresse capteur + write bit
     fb4:	f9 d9       	rcall	.-3086   	; 0x3a8 <i2c_start>
     fb6:	08 2f       	mov	r16, r24
	i2c_stop();
     fb8:	47 da       	rcall	.-2930   	; 0x448 <i2c_stop>

	if (!ret)/* Si le capteur est présent sur le bus I2C */
     fba:	00 23       	and	r16, r16
     fbc:	79 f4       	brne	.+30     	; 0xfdc <get_SHT21_Devices+0x34>
	{
		i2c_start_wait(addr_mode+I2C_WRITE);    	// Start avec adresse capteur + write bit
     fbe:	81 2f       	mov	r24, r17
     fc0:	19 da       	rcall	.-3022   	; 0x3f4 <i2c_start_wait>
													// Et attend que le bus soit libéré
		i2c_write(TRIG_RH);  						// Envoyer commande "Trigger Temperature measurement (hold master)"
     fc2:	85 ee       	ldi	r24, 0xE5	; 229
     fc4:	49 da       	rcall	.-2926   	; 0x458 <i2c_write>
		i2c_start_wait(addr_mode+I2C_READ);    	// Start avec adresse capteur + write bit
     fc6:	81 2f       	mov	r24, r17
     fc8:	8f 5f       	subi	r24, 0xFF	; 255
     fca:	14 da       	rcall	.-3032   	; 0x3f4 <i2c_start_wait>
													// Et attend que le bus soit libéré
		
		// Attente la fin de la conversion A/D, selon la résolution	
		//_delay_ms(15);

		listHum[0] = i2c_readAck();	// Sauvegarder les bits de poids fort + Acknowledge
     fcc:	57 da       	rcall	.-2898   	; 0x47c <i2c_readAck>
     fce:	88 83       	st	Y, r24
		listHum[1] = i2c_readAck();	// Sauvegarder les bits de poids faible + Not acknowledge
     fd0:	55 da       	rcall	.-2902   	; 0x47c <i2c_readAck>
     fd2:	89 83       	std	Y+1, r24	; 0x01
		listHum[2] = i2c_readNak(); // CRC checksum
     fd4:	5d da       	rcall	.-2886   	; 0x490 <i2c_readNak>
     fd6:	8a 83       	std	Y+2, r24	; 0x02

		i2c_stop();							// Fin de communication sur le bus I2C
     fd8:	37 da       	rcall	.-2962   	; 0x448 <i2c_stop>
     fda:	01 c0       	rjmp	.+2      	; 0xfde <get_SHT21_Devices+0x36>
	}
	else/* Le capteur n'est pas présent sur le bus I2C */
	{
		listHum[0] = 0;				// Mettre à zéro l'octet de poids fort
		listHum[0] = 0;				// Mettre à zéro l'octet de poids faible
		listHum[0] = 0;
     fdc:	18 82       	st	Y, r1
	}
	return ret ;						// Fin de communication sur le bus I2C
}                                                                                                                                                      
     fde:	80 2f       	mov	r24, r16
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	08 95       	ret

00000fea <convertPressure>:

/*********************************************************************/
// FUNCTION: convertTemp(char *tempMes, char *tempResult)
// PURPOSE: Convertir la valeur de T° brute, en valeur exploitable
void convertPressure(char *tempMes, char *tempResult, int InitialProfondeur)		
{
     fea:	cf 92       	push	r12
     fec:	df 92       	push	r13
     fee:	ef 92       	push	r14
     ff0:	ff 92       	push	r15
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	fc 01       	movw	r30, r24
     ffc:	eb 01       	movw	r28, r22
     ffe:	6a 01       	movw	r12, r20
	int temp = 0;
	if(tempMes[0]==0 && tempMes[1]==0) { tempResult[0]=0; tempResult[1]=0; return; }
    1000:	80 81       	ld	r24, Z
    1002:	61 81       	ldd	r22, Z+1	; 0x01
    1004:	88 23       	and	r24, r24
    1006:	29 f4       	brne	.+10     	; 0x1012 <convertPressure+0x28>
    1008:	66 23       	and	r22, r22
    100a:	81 f4       	brne	.+32     	; 0x102c <convertPressure+0x42>
    100c:	18 82       	st	Y, r1
    100e:	19 82       	std	Y+1, r1	; 0x01
    1010:	3f c0       	rjmp	.+126    	; 0x1090 <convertPressure+0xa6>
	else if(tempMes[0]!=0) temp = tempMes[0]/64 + tempMes[1]*4;
    1012:	26 2f       	mov	r18, r22
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	22 0f       	add	r18, r18
    1018:	33 1f       	adc	r19, r19
    101a:	22 0f       	add	r18, r18
    101c:	33 1f       	adc	r19, r19
    101e:	82 95       	swap	r24
    1020:	86 95       	lsr	r24
    1022:	86 95       	lsr	r24
    1024:	83 70       	andi	r24, 0x03	; 3
    1026:	28 0f       	add	r18, r24
    1028:	31 1d       	adc	r19, r1
    102a:	06 c0       	rjmp	.+12     	; 0x1038 <convertPressure+0x4e>
	else temp = tempMes[1]*4;
    102c:	26 2f       	mov	r18, r22
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	22 0f       	add	r18, r18
    1032:	33 1f       	adc	r19, r19
    1034:	22 0f       	add	r18, r18
    1036:	33 1f       	adc	r19, r19
	temp = (temp*3.323-InitialProfondeur);//(((temp/1023*3.3)*(18+33)/33) / 20 * 1000 *10);
    1038:	b9 01       	movw	r22, r18
    103a:	88 27       	eor	r24, r24
    103c:	77 fd       	sbrc	r23, 7
    103e:	80 95       	com	r24
    1040:	98 2f       	mov	r25, r24
    1042:	ff d2       	rcall	.+1534   	; 0x1642 <__floatsisf>
    1044:	28 e0       	ldi	r18, 0x08	; 8
    1046:	3c ea       	ldi	r19, 0xAC	; 172
    1048:	44 e5       	ldi	r20, 0x54	; 84
    104a:	50 e4       	ldi	r21, 0x40	; 64
    104c:	05 d2       	rcall	.+1034   	; 0x1458 <__mulsf3>
    104e:	7b 01       	movw	r14, r22
    1050:	8c 01       	movw	r16, r24
    1052:	b6 01       	movw	r22, r12
    1054:	88 27       	eor	r24, r24
    1056:	77 fd       	sbrc	r23, 7
    1058:	80 95       	com	r24
    105a:	98 2f       	mov	r25, r24
    105c:	f2 d2       	rcall	.+1508   	; 0x1642 <__floatsisf>
    105e:	9b 01       	movw	r18, r22
    1060:	ac 01       	movw	r20, r24
    1062:	c8 01       	movw	r24, r16
    1064:	b7 01       	movw	r22, r14
    1066:	a6 d1       	rcall	.+844    	; 0x13b4 <__subsf3>
    1068:	46 d3       	rcall	.+1676   	; 0x16f6 <__fixsfsi>
    106a:	9b 01       	movw	r18, r22
	if(temp>=0) 
    106c:	77 fd       	sbrc	r23, 7
    106e:	06 c0       	rjmp	.+12     	; 0x107c <convertPressure+0x92>
	{
		tempResult[0]=temp;
    1070:	68 83       	st	Y, r22
		tempResult[1]=(temp>>8);
    1072:	87 2f       	mov	r24, r23
    1074:	99 27       	eor	r25, r25
    1076:	87 fd       	sbrc	r24, 7
    1078:	9a 95       	dec	r25
    107a:	09 c0       	rjmp	.+18     	; 0x108e <convertPressure+0xa4>
	}
	else
	{
		temp = 0-temp;
    107c:	88 27       	eor	r24, r24
    107e:	99 27       	eor	r25, r25
    1080:	82 1b       	sub	r24, r18
    1082:	93 0b       	sbc	r25, r19
		tempResult[0]=temp;
    1084:	88 83       	st	Y, r24
		tempResult[1]=(temp>>8)+128;
    1086:	89 2f       	mov	r24, r25
    1088:	99 0f       	add	r25, r25
    108a:	99 0b       	sbc	r25, r25
    108c:	80 58       	subi	r24, 0x80	; 128
    108e:	89 83       	std	Y+1, r24	; 0x01
	}
}
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	ff 90       	pop	r15
    109a:	ef 90       	pop	r14
    109c:	df 90       	pop	r13
    109e:	cf 90       	pop	r12
    10a0:	08 95       	ret

000010a2 <convertAcc>:

/*********************************************************************/
// FUNCTION: convertTemp(char *tempMes, char *tempResult)
// PURPOSE: Convertir la valeur de T° brute, en valeur exploitable
void convertAcc(char *tempMes, char *tempResult)		
{
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	fc 01       	movw	r30, r24
    10a8:	eb 01       	movw	r28, r22
	int temp = 0;
	if(tempMes[0]!=0) temp = tempMes[0]/64 + tempMes[1]*4;
    10aa:	40 81       	ld	r20, Z
    10ac:	61 81       	ldd	r22, Z+1	; 0x01
    10ae:	44 23       	and	r20, r20
    10b0:	69 f0       	breq	.+26     	; 0x10cc <convertAcc+0x2a>
    10b2:	26 2f       	mov	r18, r22
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	22 0f       	add	r18, r18
    10b8:	33 1f       	adc	r19, r19
    10ba:	22 0f       	add	r18, r18
    10bc:	33 1f       	adc	r19, r19
    10be:	42 95       	swap	r20
    10c0:	46 95       	lsr	r20
    10c2:	46 95       	lsr	r20
    10c4:	43 70       	andi	r20, 0x03	; 3
    10c6:	24 0f       	add	r18, r20
    10c8:	31 1d       	adc	r19, r1
    10ca:	06 c0       	rjmp	.+12     	; 0x10d8 <convertAcc+0x36>
	else temp = tempMes[1]*4;
    10cc:	26 2f       	mov	r18, r22
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	22 0f       	add	r18, r18
    10d2:	33 1f       	adc	r19, r19
    10d4:	22 0f       	add	r18, r18
    10d6:	33 1f       	adc	r19, r19
	temp = (temp-517)*0.622; //(((((((3.3 * temp) / 1023)*33/(33+18)) - 1.5 )* 1000) / 420) * 90);
    10d8:	25 50       	subi	r18, 0x05	; 5
    10da:	32 40       	sbci	r19, 0x02	; 2
    10dc:	b9 01       	movw	r22, r18
    10de:	88 27       	eor	r24, r24
    10e0:	77 fd       	sbrc	r23, 7
    10e2:	80 95       	com	r24
    10e4:	98 2f       	mov	r25, r24
    10e6:	ad d2       	rcall	.+1370   	; 0x1642 <__floatsisf>
    10e8:	24 e6       	ldi	r18, 0x64	; 100
    10ea:	3b e3       	ldi	r19, 0x3B	; 59
    10ec:	4f e1       	ldi	r20, 0x1F	; 31
    10ee:	5f e3       	ldi	r21, 0x3F	; 63
    10f0:	b3 d1       	rcall	.+870    	; 0x1458 <__mulsf3>
    10f2:	01 d3       	rcall	.+1538   	; 0x16f6 <__fixsfsi>
    10f4:	9b 01       	movw	r18, r22
	if(temp>=0) 
    10f6:	77 fd       	sbrc	r23, 7
    10f8:	06 c0       	rjmp	.+12     	; 0x1106 <convertAcc+0x64>
	{
		tempResult[0]=temp;
    10fa:	68 83       	st	Y, r22
		tempResult[1]=(temp>>8);
    10fc:	87 2f       	mov	r24, r23
    10fe:	99 27       	eor	r25, r25
    1100:	87 fd       	sbrc	r24, 7
    1102:	9a 95       	dec	r25
    1104:	09 c0       	rjmp	.+18     	; 0x1118 <convertAcc+0x76>
	}
	else
	{
		temp = 0-temp;
    1106:	88 27       	eor	r24, r24
    1108:	99 27       	eor	r25, r25
    110a:	82 1b       	sub	r24, r18
    110c:	93 0b       	sbc	r25, r19
		tempResult[0]=temp;
    110e:	88 83       	st	Y, r24
		tempResult[1]=(temp>>8)+128;
    1110:	89 2f       	mov	r24, r25
    1112:	99 0f       	add	r25, r25
    1114:	99 0b       	sbc	r25, r25
    1116:	80 58       	subi	r24, 0x80	; 128
    1118:	89 83       	std	Y+1, r24	; 0x01
	}
}
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	08 95       	ret

00001120 <_fpadd_parts>:
    1120:	a0 e0       	ldi	r26, 0x00	; 0
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e5 e9       	ldi	r30, 0x95	; 149
    1126:	f8 e0       	ldi	r31, 0x08	; 8
    1128:	05 c5       	rjmp	.+2570   	; 0x1b34 <__prologue_saves__>
    112a:	dc 01       	movw	r26, r24
    112c:	2b 01       	movw	r4, r22
    112e:	fa 01       	movw	r30, r20
    1130:	9c 91       	ld	r25, X
    1132:	92 30       	cpi	r25, 0x02	; 2
    1134:	08 f4       	brcc	.+2      	; 0x1138 <_fpadd_parts+0x18>
    1136:	39 c1       	rjmp	.+626    	; 0x13aa <_fpadd_parts+0x28a>
    1138:	eb 01       	movw	r28, r22
    113a:	88 81       	ld	r24, Y
    113c:	82 30       	cpi	r24, 0x02	; 2
    113e:	08 f4       	brcc	.+2      	; 0x1142 <_fpadd_parts+0x22>
    1140:	33 c1       	rjmp	.+614    	; 0x13a8 <_fpadd_parts+0x288>
    1142:	94 30       	cpi	r25, 0x04	; 4
    1144:	69 f4       	brne	.+26     	; 0x1160 <_fpadd_parts+0x40>
    1146:	84 30       	cpi	r24, 0x04	; 4
    1148:	09 f0       	breq	.+2      	; 0x114c <_fpadd_parts+0x2c>
    114a:	2f c1       	rjmp	.+606    	; 0x13aa <_fpadd_parts+0x28a>
    114c:	11 96       	adiw	r26, 0x01	; 1
    114e:	9c 91       	ld	r25, X
    1150:	11 97       	sbiw	r26, 0x01	; 1
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	98 17       	cp	r25, r24
    1156:	09 f4       	brne	.+2      	; 0x115a <_fpadd_parts+0x3a>
    1158:	28 c1       	rjmp	.+592    	; 0x13aa <_fpadd_parts+0x28a>
    115a:	a9 e0       	ldi	r26, 0x09	; 9
    115c:	b1 e0       	ldi	r27, 0x01	; 1
    115e:	25 c1       	rjmp	.+586    	; 0x13aa <_fpadd_parts+0x28a>
    1160:	84 30       	cpi	r24, 0x04	; 4
    1162:	09 f4       	brne	.+2      	; 0x1166 <_fpadd_parts+0x46>
    1164:	21 c1       	rjmp	.+578    	; 0x13a8 <_fpadd_parts+0x288>
    1166:	82 30       	cpi	r24, 0x02	; 2
    1168:	a9 f4       	brne	.+42     	; 0x1194 <_fpadd_parts+0x74>
    116a:	92 30       	cpi	r25, 0x02	; 2
    116c:	09 f0       	breq	.+2      	; 0x1170 <_fpadd_parts+0x50>
    116e:	1d c1       	rjmp	.+570    	; 0x13aa <_fpadd_parts+0x28a>
    1170:	9a 01       	movw	r18, r20
    1172:	ad 01       	movw	r20, r26
    1174:	88 e0       	ldi	r24, 0x08	; 8
    1176:	ea 01       	movw	r28, r20
    1178:	09 90       	ld	r0, Y+
    117a:	ae 01       	movw	r20, r28
    117c:	e9 01       	movw	r28, r18
    117e:	09 92       	st	Y+, r0
    1180:	9e 01       	movw	r18, r28
    1182:	81 50       	subi	r24, 0x01	; 1
    1184:	c1 f7       	brne	.-16     	; 0x1176 <_fpadd_parts+0x56>
    1186:	e2 01       	movw	r28, r4
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	11 96       	adiw	r26, 0x01	; 1
    118c:	9c 91       	ld	r25, X
    118e:	89 23       	and	r24, r25
    1190:	81 83       	std	Z+1, r24	; 0x01
    1192:	08 c1       	rjmp	.+528    	; 0x13a4 <_fpadd_parts+0x284>
    1194:	92 30       	cpi	r25, 0x02	; 2
    1196:	09 f4       	brne	.+2      	; 0x119a <_fpadd_parts+0x7a>
    1198:	07 c1       	rjmp	.+526    	; 0x13a8 <_fpadd_parts+0x288>
    119a:	12 96       	adiw	r26, 0x02	; 2
    119c:	2d 90       	ld	r2, X+
    119e:	3c 90       	ld	r3, X
    11a0:	13 97       	sbiw	r26, 0x03	; 3
    11a2:	eb 01       	movw	r28, r22
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	9b 81       	ldd	r25, Y+3	; 0x03
    11a8:	14 96       	adiw	r26, 0x04	; 4
    11aa:	ad 90       	ld	r10, X+
    11ac:	bd 90       	ld	r11, X+
    11ae:	cd 90       	ld	r12, X+
    11b0:	dc 90       	ld	r13, X
    11b2:	17 97       	sbiw	r26, 0x07	; 7
    11b4:	ec 80       	ldd	r14, Y+4	; 0x04
    11b6:	fd 80       	ldd	r15, Y+5	; 0x05
    11b8:	0e 81       	ldd	r16, Y+6	; 0x06
    11ba:	1f 81       	ldd	r17, Y+7	; 0x07
    11bc:	91 01       	movw	r18, r2
    11be:	28 1b       	sub	r18, r24
    11c0:	39 0b       	sbc	r19, r25
    11c2:	b9 01       	movw	r22, r18
    11c4:	37 ff       	sbrs	r19, 7
    11c6:	04 c0       	rjmp	.+8      	; 0x11d0 <_fpadd_parts+0xb0>
    11c8:	66 27       	eor	r22, r22
    11ca:	77 27       	eor	r23, r23
    11cc:	62 1b       	sub	r22, r18
    11ce:	73 0b       	sbc	r23, r19
    11d0:	60 32       	cpi	r22, 0x20	; 32
    11d2:	71 05       	cpc	r23, r1
    11d4:	0c f0       	brlt	.+2      	; 0x11d8 <_fpadd_parts+0xb8>
    11d6:	61 c0       	rjmp	.+194    	; 0x129a <_fpadd_parts+0x17a>
    11d8:	12 16       	cp	r1, r18
    11da:	13 06       	cpc	r1, r19
    11dc:	6c f5       	brge	.+90     	; 0x1238 <_fpadd_parts+0x118>
    11de:	37 01       	movw	r6, r14
    11e0:	48 01       	movw	r8, r16
    11e2:	06 2e       	mov	r0, r22
    11e4:	04 c0       	rjmp	.+8      	; 0x11ee <_fpadd_parts+0xce>
    11e6:	96 94       	lsr	r9
    11e8:	87 94       	ror	r8
    11ea:	77 94       	ror	r7
    11ec:	67 94       	ror	r6
    11ee:	0a 94       	dec	r0
    11f0:	d2 f7       	brpl	.-12     	; 0x11e6 <_fpadd_parts+0xc6>
    11f2:	21 e0       	ldi	r18, 0x01	; 1
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	40 e0       	ldi	r20, 0x00	; 0
    11f8:	50 e0       	ldi	r21, 0x00	; 0
    11fa:	04 c0       	rjmp	.+8      	; 0x1204 <_fpadd_parts+0xe4>
    11fc:	22 0f       	add	r18, r18
    11fe:	33 1f       	adc	r19, r19
    1200:	44 1f       	adc	r20, r20
    1202:	55 1f       	adc	r21, r21
    1204:	6a 95       	dec	r22
    1206:	d2 f7       	brpl	.-12     	; 0x11fc <_fpadd_parts+0xdc>
    1208:	21 50       	subi	r18, 0x01	; 1
    120a:	30 40       	sbci	r19, 0x00	; 0
    120c:	40 40       	sbci	r20, 0x00	; 0
    120e:	50 40       	sbci	r21, 0x00	; 0
    1210:	2e 21       	and	r18, r14
    1212:	3f 21       	and	r19, r15
    1214:	40 23       	and	r20, r16
    1216:	51 23       	and	r21, r17
    1218:	21 15       	cp	r18, r1
    121a:	31 05       	cpc	r19, r1
    121c:	41 05       	cpc	r20, r1
    121e:	51 05       	cpc	r21, r1
    1220:	21 f0       	breq	.+8      	; 0x122a <_fpadd_parts+0x10a>
    1222:	21 e0       	ldi	r18, 0x01	; 1
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	40 e0       	ldi	r20, 0x00	; 0
    1228:	50 e0       	ldi	r21, 0x00	; 0
    122a:	79 01       	movw	r14, r18
    122c:	8a 01       	movw	r16, r20
    122e:	e6 28       	or	r14, r6
    1230:	f7 28       	or	r15, r7
    1232:	08 29       	or	r16, r8
    1234:	19 29       	or	r17, r9
    1236:	3c c0       	rjmp	.+120    	; 0x12b0 <_fpadd_parts+0x190>
    1238:	23 2b       	or	r18, r19
    123a:	d1 f1       	breq	.+116    	; 0x12b0 <_fpadd_parts+0x190>
    123c:	26 0e       	add	r2, r22
    123e:	37 1e       	adc	r3, r23
    1240:	35 01       	movw	r6, r10
    1242:	46 01       	movw	r8, r12
    1244:	06 2e       	mov	r0, r22
    1246:	04 c0       	rjmp	.+8      	; 0x1250 <_fpadd_parts+0x130>
    1248:	96 94       	lsr	r9
    124a:	87 94       	ror	r8
    124c:	77 94       	ror	r7
    124e:	67 94       	ror	r6
    1250:	0a 94       	dec	r0
    1252:	d2 f7       	brpl	.-12     	; 0x1248 <_fpadd_parts+0x128>
    1254:	21 e0       	ldi	r18, 0x01	; 1
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	40 e0       	ldi	r20, 0x00	; 0
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	04 c0       	rjmp	.+8      	; 0x1266 <_fpadd_parts+0x146>
    125e:	22 0f       	add	r18, r18
    1260:	33 1f       	adc	r19, r19
    1262:	44 1f       	adc	r20, r20
    1264:	55 1f       	adc	r21, r21
    1266:	6a 95       	dec	r22
    1268:	d2 f7       	brpl	.-12     	; 0x125e <_fpadd_parts+0x13e>
    126a:	21 50       	subi	r18, 0x01	; 1
    126c:	30 40       	sbci	r19, 0x00	; 0
    126e:	40 40       	sbci	r20, 0x00	; 0
    1270:	50 40       	sbci	r21, 0x00	; 0
    1272:	2a 21       	and	r18, r10
    1274:	3b 21       	and	r19, r11
    1276:	4c 21       	and	r20, r12
    1278:	5d 21       	and	r21, r13
    127a:	21 15       	cp	r18, r1
    127c:	31 05       	cpc	r19, r1
    127e:	41 05       	cpc	r20, r1
    1280:	51 05       	cpc	r21, r1
    1282:	21 f0       	breq	.+8      	; 0x128c <_fpadd_parts+0x16c>
    1284:	21 e0       	ldi	r18, 0x01	; 1
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	40 e0       	ldi	r20, 0x00	; 0
    128a:	50 e0       	ldi	r21, 0x00	; 0
    128c:	59 01       	movw	r10, r18
    128e:	6a 01       	movw	r12, r20
    1290:	a6 28       	or	r10, r6
    1292:	b7 28       	or	r11, r7
    1294:	c8 28       	or	r12, r8
    1296:	d9 28       	or	r13, r9
    1298:	0b c0       	rjmp	.+22     	; 0x12b0 <_fpadd_parts+0x190>
    129a:	82 15       	cp	r24, r2
    129c:	93 05       	cpc	r25, r3
    129e:	2c f0       	brlt	.+10     	; 0x12aa <_fpadd_parts+0x18a>
    12a0:	1c 01       	movw	r2, r24
    12a2:	aa 24       	eor	r10, r10
    12a4:	bb 24       	eor	r11, r11
    12a6:	65 01       	movw	r12, r10
    12a8:	03 c0       	rjmp	.+6      	; 0x12b0 <_fpadd_parts+0x190>
    12aa:	ee 24       	eor	r14, r14
    12ac:	ff 24       	eor	r15, r15
    12ae:	87 01       	movw	r16, r14
    12b0:	11 96       	adiw	r26, 0x01	; 1
    12b2:	9c 91       	ld	r25, X
    12b4:	d2 01       	movw	r26, r4
    12b6:	11 96       	adiw	r26, 0x01	; 1
    12b8:	8c 91       	ld	r24, X
    12ba:	98 17       	cp	r25, r24
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <_fpadd_parts+0x1a0>
    12be:	45 c0       	rjmp	.+138    	; 0x134a <_fpadd_parts+0x22a>
    12c0:	99 23       	and	r25, r25
    12c2:	39 f0       	breq	.+14     	; 0x12d2 <_fpadd_parts+0x1b2>
    12c4:	a8 01       	movw	r20, r16
    12c6:	97 01       	movw	r18, r14
    12c8:	2a 19       	sub	r18, r10
    12ca:	3b 09       	sbc	r19, r11
    12cc:	4c 09       	sbc	r20, r12
    12ce:	5d 09       	sbc	r21, r13
    12d0:	06 c0       	rjmp	.+12     	; 0x12de <_fpadd_parts+0x1be>
    12d2:	a6 01       	movw	r20, r12
    12d4:	95 01       	movw	r18, r10
    12d6:	2e 19       	sub	r18, r14
    12d8:	3f 09       	sbc	r19, r15
    12da:	40 0b       	sbc	r20, r16
    12dc:	51 0b       	sbc	r21, r17
    12de:	57 fd       	sbrc	r21, 7
    12e0:	08 c0       	rjmp	.+16     	; 0x12f2 <_fpadd_parts+0x1d2>
    12e2:	11 82       	std	Z+1, r1	; 0x01
    12e4:	33 82       	std	Z+3, r3	; 0x03
    12e6:	22 82       	std	Z+2, r2	; 0x02
    12e8:	24 83       	std	Z+4, r18	; 0x04
    12ea:	35 83       	std	Z+5, r19	; 0x05
    12ec:	46 83       	std	Z+6, r20	; 0x06
    12ee:	57 83       	std	Z+7, r21	; 0x07
    12f0:	1d c0       	rjmp	.+58     	; 0x132c <_fpadd_parts+0x20c>
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	81 83       	std	Z+1, r24	; 0x01
    12f6:	33 82       	std	Z+3, r3	; 0x03
    12f8:	22 82       	std	Z+2, r2	; 0x02
    12fa:	88 27       	eor	r24, r24
    12fc:	99 27       	eor	r25, r25
    12fe:	dc 01       	movw	r26, r24
    1300:	82 1b       	sub	r24, r18
    1302:	93 0b       	sbc	r25, r19
    1304:	a4 0b       	sbc	r26, r20
    1306:	b5 0b       	sbc	r27, r21
    1308:	84 83       	std	Z+4, r24	; 0x04
    130a:	95 83       	std	Z+5, r25	; 0x05
    130c:	a6 83       	std	Z+6, r26	; 0x06
    130e:	b7 83       	std	Z+7, r27	; 0x07
    1310:	0d c0       	rjmp	.+26     	; 0x132c <_fpadd_parts+0x20c>
    1312:	22 0f       	add	r18, r18
    1314:	33 1f       	adc	r19, r19
    1316:	44 1f       	adc	r20, r20
    1318:	55 1f       	adc	r21, r21
    131a:	24 83       	std	Z+4, r18	; 0x04
    131c:	35 83       	std	Z+5, r19	; 0x05
    131e:	46 83       	std	Z+6, r20	; 0x06
    1320:	57 83       	std	Z+7, r21	; 0x07
    1322:	82 81       	ldd	r24, Z+2	; 0x02
    1324:	93 81       	ldd	r25, Z+3	; 0x03
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	93 83       	std	Z+3, r25	; 0x03
    132a:	82 83       	std	Z+2, r24	; 0x02
    132c:	24 81       	ldd	r18, Z+4	; 0x04
    132e:	35 81       	ldd	r19, Z+5	; 0x05
    1330:	46 81       	ldd	r20, Z+6	; 0x06
    1332:	57 81       	ldd	r21, Z+7	; 0x07
    1334:	da 01       	movw	r26, r20
    1336:	c9 01       	movw	r24, r18
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	a1 09       	sbc	r26, r1
    133c:	b1 09       	sbc	r27, r1
    133e:	8f 5f       	subi	r24, 0xFF	; 255
    1340:	9f 4f       	sbci	r25, 0xFF	; 255
    1342:	af 4f       	sbci	r26, 0xFF	; 255
    1344:	bf 43       	sbci	r27, 0x3F	; 63
    1346:	28 f3       	brcs	.-54     	; 0x1312 <_fpadd_parts+0x1f2>
    1348:	0b c0       	rjmp	.+22     	; 0x1360 <_fpadd_parts+0x240>
    134a:	91 83       	std	Z+1, r25	; 0x01
    134c:	33 82       	std	Z+3, r3	; 0x03
    134e:	22 82       	std	Z+2, r2	; 0x02
    1350:	ea 0c       	add	r14, r10
    1352:	fb 1c       	adc	r15, r11
    1354:	0c 1d       	adc	r16, r12
    1356:	1d 1d       	adc	r17, r13
    1358:	e4 82       	std	Z+4, r14	; 0x04
    135a:	f5 82       	std	Z+5, r15	; 0x05
    135c:	06 83       	std	Z+6, r16	; 0x06
    135e:	17 83       	std	Z+7, r17	; 0x07
    1360:	83 e0       	ldi	r24, 0x03	; 3
    1362:	80 83       	st	Z, r24
    1364:	24 81       	ldd	r18, Z+4	; 0x04
    1366:	35 81       	ldd	r19, Z+5	; 0x05
    1368:	46 81       	ldd	r20, Z+6	; 0x06
    136a:	57 81       	ldd	r21, Z+7	; 0x07
    136c:	57 ff       	sbrs	r21, 7
    136e:	1a c0       	rjmp	.+52     	; 0x13a4 <_fpadd_parts+0x284>
    1370:	c9 01       	movw	r24, r18
    1372:	aa 27       	eor	r26, r26
    1374:	97 fd       	sbrc	r25, 7
    1376:	a0 95       	com	r26
    1378:	ba 2f       	mov	r27, r26
    137a:	81 70       	andi	r24, 0x01	; 1
    137c:	90 70       	andi	r25, 0x00	; 0
    137e:	a0 70       	andi	r26, 0x00	; 0
    1380:	b0 70       	andi	r27, 0x00	; 0
    1382:	56 95       	lsr	r21
    1384:	47 95       	ror	r20
    1386:	37 95       	ror	r19
    1388:	27 95       	ror	r18
    138a:	82 2b       	or	r24, r18
    138c:	93 2b       	or	r25, r19
    138e:	a4 2b       	or	r26, r20
    1390:	b5 2b       	or	r27, r21
    1392:	84 83       	std	Z+4, r24	; 0x04
    1394:	95 83       	std	Z+5, r25	; 0x05
    1396:	a6 83       	std	Z+6, r26	; 0x06
    1398:	b7 83       	std	Z+7, r27	; 0x07
    139a:	82 81       	ldd	r24, Z+2	; 0x02
    139c:	93 81       	ldd	r25, Z+3	; 0x03
    139e:	01 96       	adiw	r24, 0x01	; 1
    13a0:	93 83       	std	Z+3, r25	; 0x03
    13a2:	82 83       	std	Z+2, r24	; 0x02
    13a4:	df 01       	movw	r26, r30
    13a6:	01 c0       	rjmp	.+2      	; 0x13aa <_fpadd_parts+0x28a>
    13a8:	d2 01       	movw	r26, r4
    13aa:	cd 01       	movw	r24, r26
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	e2 e1       	ldi	r30, 0x12	; 18
    13b2:	dc c3       	rjmp	.+1976   	; 0x1b6c <__epilogue_restores__>

000013b4 <__subsf3>:
    13b4:	a0 e2       	ldi	r26, 0x20	; 32
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	ef ed       	ldi	r30, 0xDF	; 223
    13ba:	f9 e0       	ldi	r31, 0x09	; 9
    13bc:	c7 c3       	rjmp	.+1934   	; 0x1b4c <__prologue_saves__+0x18>
    13be:	69 83       	std	Y+1, r22	; 0x01
    13c0:	7a 83       	std	Y+2, r23	; 0x02
    13c2:	8b 83       	std	Y+3, r24	; 0x03
    13c4:	9c 83       	std	Y+4, r25	; 0x04
    13c6:	2d 83       	std	Y+5, r18	; 0x05
    13c8:	3e 83       	std	Y+6, r19	; 0x06
    13ca:	4f 83       	std	Y+7, r20	; 0x07
    13cc:	58 87       	std	Y+8, r21	; 0x08
    13ce:	e9 e0       	ldi	r30, 0x09	; 9
    13d0:	ee 2e       	mov	r14, r30
    13d2:	f1 2c       	mov	r15, r1
    13d4:	ec 0e       	add	r14, r28
    13d6:	fd 1e       	adc	r15, r29
    13d8:	ce 01       	movw	r24, r28
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	b7 01       	movw	r22, r14
    13de:	00 d3       	rcall	.+1536   	; 0x19e0 <__unpack_f>
    13e0:	8e 01       	movw	r16, r28
    13e2:	0f 5e       	subi	r16, 0xEF	; 239
    13e4:	1f 4f       	sbci	r17, 0xFF	; 255
    13e6:	ce 01       	movw	r24, r28
    13e8:	05 96       	adiw	r24, 0x05	; 5
    13ea:	b8 01       	movw	r22, r16
    13ec:	f9 d2       	rcall	.+1522   	; 0x19e0 <__unpack_f>
    13ee:	8a 89       	ldd	r24, Y+18	; 0x12
    13f0:	91 e0       	ldi	r25, 0x01	; 1
    13f2:	89 27       	eor	r24, r25
    13f4:	8a 8b       	std	Y+18, r24	; 0x12
    13f6:	c7 01       	movw	r24, r14
    13f8:	b8 01       	movw	r22, r16
    13fa:	ae 01       	movw	r20, r28
    13fc:	47 5e       	subi	r20, 0xE7	; 231
    13fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1400:	8f de       	rcall	.-738    	; 0x1120 <_fpadd_parts>
    1402:	19 d2       	rcall	.+1074   	; 0x1836 <__pack_f>
    1404:	a0 96       	adiw	r28, 0x20	; 32
    1406:	e6 e0       	ldi	r30, 0x06	; 6
    1408:	bd c3       	rjmp	.+1914   	; 0x1b84 <__epilogue_restores__+0x18>

0000140a <__addsf3>:
    140a:	a0 e2       	ldi	r26, 0x20	; 32
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	ea e0       	ldi	r30, 0x0A	; 10
    1410:	fa e0       	ldi	r31, 0x0A	; 10
    1412:	9c c3       	rjmp	.+1848   	; 0x1b4c <__prologue_saves__+0x18>
    1414:	69 83       	std	Y+1, r22	; 0x01
    1416:	7a 83       	std	Y+2, r23	; 0x02
    1418:	8b 83       	std	Y+3, r24	; 0x03
    141a:	9c 83       	std	Y+4, r25	; 0x04
    141c:	2d 83       	std	Y+5, r18	; 0x05
    141e:	3e 83       	std	Y+6, r19	; 0x06
    1420:	4f 83       	std	Y+7, r20	; 0x07
    1422:	58 87       	std	Y+8, r21	; 0x08
    1424:	f9 e0       	ldi	r31, 0x09	; 9
    1426:	ef 2e       	mov	r14, r31
    1428:	f1 2c       	mov	r15, r1
    142a:	ec 0e       	add	r14, r28
    142c:	fd 1e       	adc	r15, r29
    142e:	ce 01       	movw	r24, r28
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	b7 01       	movw	r22, r14
    1434:	d5 d2       	rcall	.+1450   	; 0x19e0 <__unpack_f>
    1436:	8e 01       	movw	r16, r28
    1438:	0f 5e       	subi	r16, 0xEF	; 239
    143a:	1f 4f       	sbci	r17, 0xFF	; 255
    143c:	ce 01       	movw	r24, r28
    143e:	05 96       	adiw	r24, 0x05	; 5
    1440:	b8 01       	movw	r22, r16
    1442:	ce d2       	rcall	.+1436   	; 0x19e0 <__unpack_f>
    1444:	c7 01       	movw	r24, r14
    1446:	b8 01       	movw	r22, r16
    1448:	ae 01       	movw	r20, r28
    144a:	47 5e       	subi	r20, 0xE7	; 231
    144c:	5f 4f       	sbci	r21, 0xFF	; 255
    144e:	68 de       	rcall	.-816    	; 0x1120 <_fpadd_parts>
    1450:	f2 d1       	rcall	.+996    	; 0x1836 <__pack_f>
    1452:	a0 96       	adiw	r28, 0x20	; 32
    1454:	e6 e0       	ldi	r30, 0x06	; 6
    1456:	96 c3       	rjmp	.+1836   	; 0x1b84 <__epilogue_restores__+0x18>

00001458 <__mulsf3>:
    1458:	a0 e2       	ldi	r26, 0x20	; 32
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e1 e3       	ldi	r30, 0x31	; 49
    145e:	fa e0       	ldi	r31, 0x0A	; 10
    1460:	69 c3       	rjmp	.+1746   	; 0x1b34 <__prologue_saves__>
    1462:	69 83       	std	Y+1, r22	; 0x01
    1464:	7a 83       	std	Y+2, r23	; 0x02
    1466:	8b 83       	std	Y+3, r24	; 0x03
    1468:	9c 83       	std	Y+4, r25	; 0x04
    146a:	2d 83       	std	Y+5, r18	; 0x05
    146c:	3e 83       	std	Y+6, r19	; 0x06
    146e:	4f 83       	std	Y+7, r20	; 0x07
    1470:	58 87       	std	Y+8, r21	; 0x08
    1472:	ce 01       	movw	r24, r28
    1474:	01 96       	adiw	r24, 0x01	; 1
    1476:	be 01       	movw	r22, r28
    1478:	67 5f       	subi	r22, 0xF7	; 247
    147a:	7f 4f       	sbci	r23, 0xFF	; 255
    147c:	b1 d2       	rcall	.+1378   	; 0x19e0 <__unpack_f>
    147e:	ce 01       	movw	r24, r28
    1480:	05 96       	adiw	r24, 0x05	; 5
    1482:	be 01       	movw	r22, r28
    1484:	6f 5e       	subi	r22, 0xEF	; 239
    1486:	7f 4f       	sbci	r23, 0xFF	; 255
    1488:	ab d2       	rcall	.+1366   	; 0x19e0 <__unpack_f>
    148a:	99 85       	ldd	r25, Y+9	; 0x09
    148c:	92 30       	cpi	r25, 0x02	; 2
    148e:	88 f0       	brcs	.+34     	; 0x14b2 <__mulsf3+0x5a>
    1490:	89 89       	ldd	r24, Y+17	; 0x11
    1492:	82 30       	cpi	r24, 0x02	; 2
    1494:	c8 f0       	brcs	.+50     	; 0x14c8 <__mulsf3+0x70>
    1496:	94 30       	cpi	r25, 0x04	; 4
    1498:	19 f4       	brne	.+6      	; 0x14a0 <__mulsf3+0x48>
    149a:	82 30       	cpi	r24, 0x02	; 2
    149c:	51 f4       	brne	.+20     	; 0x14b2 <__mulsf3+0x5a>
    149e:	04 c0       	rjmp	.+8      	; 0x14a8 <__mulsf3+0x50>
    14a0:	84 30       	cpi	r24, 0x04	; 4
    14a2:	29 f4       	brne	.+10     	; 0x14ae <__mulsf3+0x56>
    14a4:	92 30       	cpi	r25, 0x02	; 2
    14a6:	81 f4       	brne	.+32     	; 0x14c8 <__mulsf3+0x70>
    14a8:	89 e0       	ldi	r24, 0x09	; 9
    14aa:	91 e0       	ldi	r25, 0x01	; 1
    14ac:	c6 c0       	rjmp	.+396    	; 0x163a <__mulsf3+0x1e2>
    14ae:	92 30       	cpi	r25, 0x02	; 2
    14b0:	49 f4       	brne	.+18     	; 0x14c4 <__mulsf3+0x6c>
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b6:	8a 89       	ldd	r24, Y+18	; 0x12
    14b8:	98 13       	cpse	r25, r24
    14ba:	21 e0       	ldi	r18, 0x01	; 1
    14bc:	2a 87       	std	Y+10, r18	; 0x0a
    14be:	ce 01       	movw	r24, r28
    14c0:	09 96       	adiw	r24, 0x09	; 9
    14c2:	bb c0       	rjmp	.+374    	; 0x163a <__mulsf3+0x1e2>
    14c4:	82 30       	cpi	r24, 0x02	; 2
    14c6:	49 f4       	brne	.+18     	; 0x14da <__mulsf3+0x82>
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    14cc:	8a 89       	ldd	r24, Y+18	; 0x12
    14ce:	98 13       	cpse	r25, r24
    14d0:	21 e0       	ldi	r18, 0x01	; 1
    14d2:	2a 8b       	std	Y+18, r18	; 0x12
    14d4:	ce 01       	movw	r24, r28
    14d6:	41 96       	adiw	r24, 0x11	; 17
    14d8:	b0 c0       	rjmp	.+352    	; 0x163a <__mulsf3+0x1e2>
    14da:	2d 84       	ldd	r2, Y+13	; 0x0d
    14dc:	3e 84       	ldd	r3, Y+14	; 0x0e
    14de:	4f 84       	ldd	r4, Y+15	; 0x0f
    14e0:	58 88       	ldd	r5, Y+16	; 0x10
    14e2:	6d 88       	ldd	r6, Y+21	; 0x15
    14e4:	7e 88       	ldd	r7, Y+22	; 0x16
    14e6:	8f 88       	ldd	r8, Y+23	; 0x17
    14e8:	98 8c       	ldd	r9, Y+24	; 0x18
    14ea:	ee 24       	eor	r14, r14
    14ec:	ff 24       	eor	r15, r15
    14ee:	87 01       	movw	r16, r14
    14f0:	aa 24       	eor	r10, r10
    14f2:	bb 24       	eor	r11, r11
    14f4:	65 01       	movw	r12, r10
    14f6:	40 e0       	ldi	r20, 0x00	; 0
    14f8:	50 e0       	ldi	r21, 0x00	; 0
    14fa:	60 e0       	ldi	r22, 0x00	; 0
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	e0 e0       	ldi	r30, 0x00	; 0
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	c1 01       	movw	r24, r2
    1504:	81 70       	andi	r24, 0x01	; 1
    1506:	90 70       	andi	r25, 0x00	; 0
    1508:	89 2b       	or	r24, r25
    150a:	e9 f0       	breq	.+58     	; 0x1546 <__mulsf3+0xee>
    150c:	e6 0c       	add	r14, r6
    150e:	f7 1c       	adc	r15, r7
    1510:	08 1d       	adc	r16, r8
    1512:	19 1d       	adc	r17, r9
    1514:	9a 01       	movw	r18, r20
    1516:	ab 01       	movw	r20, r22
    1518:	2a 0d       	add	r18, r10
    151a:	3b 1d       	adc	r19, r11
    151c:	4c 1d       	adc	r20, r12
    151e:	5d 1d       	adc	r21, r13
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	a0 e0       	ldi	r26, 0x00	; 0
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e6 14       	cp	r14, r6
    152a:	f7 04       	cpc	r15, r7
    152c:	08 05       	cpc	r16, r8
    152e:	19 05       	cpc	r17, r9
    1530:	20 f4       	brcc	.+8      	; 0x153a <__mulsf3+0xe2>
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	a0 e0       	ldi	r26, 0x00	; 0
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	ba 01       	movw	r22, r20
    153c:	a9 01       	movw	r20, r18
    153e:	48 0f       	add	r20, r24
    1540:	59 1f       	adc	r21, r25
    1542:	6a 1f       	adc	r22, r26
    1544:	7b 1f       	adc	r23, r27
    1546:	aa 0c       	add	r10, r10
    1548:	bb 1c       	adc	r11, r11
    154a:	cc 1c       	adc	r12, r12
    154c:	dd 1c       	adc	r13, r13
    154e:	97 fe       	sbrs	r9, 7
    1550:	08 c0       	rjmp	.+16     	; 0x1562 <__mulsf3+0x10a>
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	a0 e0       	ldi	r26, 0x00	; 0
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	a8 2a       	or	r10, r24
    155c:	b9 2a       	or	r11, r25
    155e:	ca 2a       	or	r12, r26
    1560:	db 2a       	or	r13, r27
    1562:	31 96       	adiw	r30, 0x01	; 1
    1564:	e0 32       	cpi	r30, 0x20	; 32
    1566:	f1 05       	cpc	r31, r1
    1568:	49 f0       	breq	.+18     	; 0x157c <__mulsf3+0x124>
    156a:	66 0c       	add	r6, r6
    156c:	77 1c       	adc	r7, r7
    156e:	88 1c       	adc	r8, r8
    1570:	99 1c       	adc	r9, r9
    1572:	56 94       	lsr	r5
    1574:	47 94       	ror	r4
    1576:	37 94       	ror	r3
    1578:	27 94       	ror	r2
    157a:	c3 cf       	rjmp	.-122    	; 0x1502 <__mulsf3+0xaa>
    157c:	fa 85       	ldd	r31, Y+10	; 0x0a
    157e:	ea 89       	ldd	r30, Y+18	; 0x12
    1580:	2b 89       	ldd	r18, Y+19	; 0x13
    1582:	3c 89       	ldd	r19, Y+20	; 0x14
    1584:	8b 85       	ldd	r24, Y+11	; 0x0b
    1586:	9c 85       	ldd	r25, Y+12	; 0x0c
    1588:	28 0f       	add	r18, r24
    158a:	39 1f       	adc	r19, r25
    158c:	2e 5f       	subi	r18, 0xFE	; 254
    158e:	3f 4f       	sbci	r19, 0xFF	; 255
    1590:	17 c0       	rjmp	.+46     	; 0x15c0 <__mulsf3+0x168>
    1592:	ca 01       	movw	r24, r20
    1594:	81 70       	andi	r24, 0x01	; 1
    1596:	90 70       	andi	r25, 0x00	; 0
    1598:	89 2b       	or	r24, r25
    159a:	61 f0       	breq	.+24     	; 0x15b4 <__mulsf3+0x15c>
    159c:	16 95       	lsr	r17
    159e:	07 95       	ror	r16
    15a0:	f7 94       	ror	r15
    15a2:	e7 94       	ror	r14
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	a0 e0       	ldi	r26, 0x00	; 0
    15aa:	b0 e8       	ldi	r27, 0x80	; 128
    15ac:	e8 2a       	or	r14, r24
    15ae:	f9 2a       	or	r15, r25
    15b0:	0a 2b       	or	r16, r26
    15b2:	1b 2b       	or	r17, r27
    15b4:	76 95       	lsr	r23
    15b6:	67 95       	ror	r22
    15b8:	57 95       	ror	r21
    15ba:	47 95       	ror	r20
    15bc:	2f 5f       	subi	r18, 0xFF	; 255
    15be:	3f 4f       	sbci	r19, 0xFF	; 255
    15c0:	77 fd       	sbrc	r23, 7
    15c2:	e7 cf       	rjmp	.-50     	; 0x1592 <__mulsf3+0x13a>
    15c4:	0c c0       	rjmp	.+24     	; 0x15de <__mulsf3+0x186>
    15c6:	44 0f       	add	r20, r20
    15c8:	55 1f       	adc	r21, r21
    15ca:	66 1f       	adc	r22, r22
    15cc:	77 1f       	adc	r23, r23
    15ce:	17 fd       	sbrc	r17, 7
    15d0:	41 60       	ori	r20, 0x01	; 1
    15d2:	ee 0c       	add	r14, r14
    15d4:	ff 1c       	adc	r15, r15
    15d6:	00 1f       	adc	r16, r16
    15d8:	11 1f       	adc	r17, r17
    15da:	21 50       	subi	r18, 0x01	; 1
    15dc:	30 40       	sbci	r19, 0x00	; 0
    15de:	40 30       	cpi	r20, 0x00	; 0
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	59 07       	cpc	r21, r25
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	69 07       	cpc	r22, r25
    15e8:	90 e4       	ldi	r25, 0x40	; 64
    15ea:	79 07       	cpc	r23, r25
    15ec:	60 f3       	brcs	.-40     	; 0x15c6 <__mulsf3+0x16e>
    15ee:	2b 8f       	std	Y+27, r18	; 0x1b
    15f0:	3c 8f       	std	Y+28, r19	; 0x1c
    15f2:	db 01       	movw	r26, r22
    15f4:	ca 01       	movw	r24, r20
    15f6:	8f 77       	andi	r24, 0x7F	; 127
    15f8:	90 70       	andi	r25, 0x00	; 0
    15fa:	a0 70       	andi	r26, 0x00	; 0
    15fc:	b0 70       	andi	r27, 0x00	; 0
    15fe:	80 34       	cpi	r24, 0x40	; 64
    1600:	91 05       	cpc	r25, r1
    1602:	a1 05       	cpc	r26, r1
    1604:	b1 05       	cpc	r27, r1
    1606:	61 f4       	brne	.+24     	; 0x1620 <__mulsf3+0x1c8>
    1608:	47 fd       	sbrc	r20, 7
    160a:	0a c0       	rjmp	.+20     	; 0x1620 <__mulsf3+0x1c8>
    160c:	e1 14       	cp	r14, r1
    160e:	f1 04       	cpc	r15, r1
    1610:	01 05       	cpc	r16, r1
    1612:	11 05       	cpc	r17, r1
    1614:	29 f0       	breq	.+10     	; 0x1620 <__mulsf3+0x1c8>
    1616:	40 5c       	subi	r20, 0xC0	; 192
    1618:	5f 4f       	sbci	r21, 0xFF	; 255
    161a:	6f 4f       	sbci	r22, 0xFF	; 255
    161c:	7f 4f       	sbci	r23, 0xFF	; 255
    161e:	40 78       	andi	r20, 0x80	; 128
    1620:	1a 8e       	std	Y+26, r1	; 0x1a
    1622:	fe 17       	cp	r31, r30
    1624:	11 f0       	breq	.+4      	; 0x162a <__mulsf3+0x1d2>
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	8a 8f       	std	Y+26, r24	; 0x1a
    162a:	4d 8f       	std	Y+29, r20	; 0x1d
    162c:	5e 8f       	std	Y+30, r21	; 0x1e
    162e:	6f 8f       	std	Y+31, r22	; 0x1f
    1630:	78 a3       	std	Y+32, r23	; 0x20
    1632:	83 e0       	ldi	r24, 0x03	; 3
    1634:	89 8f       	std	Y+25, r24	; 0x19
    1636:	ce 01       	movw	r24, r28
    1638:	49 96       	adiw	r24, 0x19	; 25
    163a:	fd d0       	rcall	.+506    	; 0x1836 <__pack_f>
    163c:	a0 96       	adiw	r28, 0x20	; 32
    163e:	e2 e1       	ldi	r30, 0x12	; 18
    1640:	95 c2       	rjmp	.+1322   	; 0x1b6c <__epilogue_restores__>

00001642 <__floatsisf>:
    1642:	a8 e0       	ldi	r26, 0x08	; 8
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e6 e2       	ldi	r30, 0x26	; 38
    1648:	fb e0       	ldi	r31, 0x0B	; 11
    164a:	7d c2       	rjmp	.+1274   	; 0x1b46 <__prologue_saves__+0x12>
    164c:	9b 01       	movw	r18, r22
    164e:	ac 01       	movw	r20, r24
    1650:	83 e0       	ldi	r24, 0x03	; 3
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	da 01       	movw	r26, r20
    1656:	c9 01       	movw	r24, r18
    1658:	88 27       	eor	r24, r24
    165a:	b7 fd       	sbrc	r27, 7
    165c:	83 95       	inc	r24
    165e:	99 27       	eor	r25, r25
    1660:	aa 27       	eor	r26, r26
    1662:	bb 27       	eor	r27, r27
    1664:	b8 2e       	mov	r11, r24
    1666:	21 15       	cp	r18, r1
    1668:	31 05       	cpc	r19, r1
    166a:	41 05       	cpc	r20, r1
    166c:	51 05       	cpc	r21, r1
    166e:	19 f4       	brne	.+6      	; 0x1676 <__floatsisf+0x34>
    1670:	82 e0       	ldi	r24, 0x02	; 2
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	39 c0       	rjmp	.+114    	; 0x16e8 <__floatsisf+0xa6>
    1676:	88 23       	and	r24, r24
    1678:	a9 f0       	breq	.+42     	; 0x16a4 <__floatsisf+0x62>
    167a:	20 30       	cpi	r18, 0x00	; 0
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	38 07       	cpc	r19, r24
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	48 07       	cpc	r20, r24
    1684:	80 e8       	ldi	r24, 0x80	; 128
    1686:	58 07       	cpc	r21, r24
    1688:	29 f4       	brne	.+10     	; 0x1694 <__floatsisf+0x52>
    168a:	60 e0       	ldi	r22, 0x00	; 0
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	9f ec       	ldi	r25, 0xCF	; 207
    1692:	2e c0       	rjmp	.+92     	; 0x16f0 <__floatsisf+0xae>
    1694:	ee 24       	eor	r14, r14
    1696:	ff 24       	eor	r15, r15
    1698:	87 01       	movw	r16, r14
    169a:	e2 1a       	sub	r14, r18
    169c:	f3 0a       	sbc	r15, r19
    169e:	04 0b       	sbc	r16, r20
    16a0:	15 0b       	sbc	r17, r21
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <__floatsisf+0x66>
    16a4:	79 01       	movw	r14, r18
    16a6:	8a 01       	movw	r16, r20
    16a8:	8e e1       	ldi	r24, 0x1E	; 30
    16aa:	c8 2e       	mov	r12, r24
    16ac:	d1 2c       	mov	r13, r1
    16ae:	dc 82       	std	Y+4, r13	; 0x04
    16b0:	cb 82       	std	Y+3, r12	; 0x03
    16b2:	ed 82       	std	Y+5, r14	; 0x05
    16b4:	fe 82       	std	Y+6, r15	; 0x06
    16b6:	0f 83       	std	Y+7, r16	; 0x07
    16b8:	18 87       	std	Y+8, r17	; 0x08
    16ba:	c8 01       	movw	r24, r16
    16bc:	b7 01       	movw	r22, r14
    16be:	6c d0       	rcall	.+216    	; 0x1798 <__clzsi2>
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	18 16       	cp	r1, r24
    16c4:	19 06       	cpc	r1, r25
    16c6:	84 f4       	brge	.+32     	; 0x16e8 <__floatsisf+0xa6>
    16c8:	08 2e       	mov	r0, r24
    16ca:	04 c0       	rjmp	.+8      	; 0x16d4 <__floatsisf+0x92>
    16cc:	ee 0c       	add	r14, r14
    16ce:	ff 1c       	adc	r15, r15
    16d0:	00 1f       	adc	r16, r16
    16d2:	11 1f       	adc	r17, r17
    16d4:	0a 94       	dec	r0
    16d6:	d2 f7       	brpl	.-12     	; 0x16cc <__floatsisf+0x8a>
    16d8:	ed 82       	std	Y+5, r14	; 0x05
    16da:	fe 82       	std	Y+6, r15	; 0x06
    16dc:	0f 83       	std	Y+7, r16	; 0x07
    16de:	18 87       	std	Y+8, r17	; 0x08
    16e0:	c8 1a       	sub	r12, r24
    16e2:	d9 0a       	sbc	r13, r25
    16e4:	dc 82       	std	Y+4, r13	; 0x04
    16e6:	cb 82       	std	Y+3, r12	; 0x03
    16e8:	ba 82       	std	Y+2, r11	; 0x02
    16ea:	ce 01       	movw	r24, r28
    16ec:	01 96       	adiw	r24, 0x01	; 1
    16ee:	a3 d0       	rcall	.+326    	; 0x1836 <__pack_f>
    16f0:	28 96       	adiw	r28, 0x08	; 8
    16f2:	e9 e0       	ldi	r30, 0x09	; 9
    16f4:	44 c2       	rjmp	.+1160   	; 0x1b7e <__epilogue_restores__+0x12>

000016f6 <__fixsfsi>:
    16f6:	ac e0       	ldi	r26, 0x0C	; 12
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e0 e8       	ldi	r30, 0x80	; 128
    16fc:	fb e0       	ldi	r31, 0x0B	; 11
    16fe:	2a c2       	rjmp	.+1108   	; 0x1b54 <__prologue_saves__+0x20>
    1700:	69 83       	std	Y+1, r22	; 0x01
    1702:	7a 83       	std	Y+2, r23	; 0x02
    1704:	8b 83       	std	Y+3, r24	; 0x03
    1706:	9c 83       	std	Y+4, r25	; 0x04
    1708:	ce 01       	movw	r24, r28
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	be 01       	movw	r22, r28
    170e:	6b 5f       	subi	r22, 0xFB	; 251
    1710:	7f 4f       	sbci	r23, 0xFF	; 255
    1712:	66 d1       	rcall	.+716    	; 0x19e0 <__unpack_f>
    1714:	8d 81       	ldd	r24, Y+5	; 0x05
    1716:	82 30       	cpi	r24, 0x02	; 2
    1718:	61 f1       	breq	.+88     	; 0x1772 <__fixsfsi+0x7c>
    171a:	82 30       	cpi	r24, 0x02	; 2
    171c:	50 f1       	brcs	.+84     	; 0x1772 <__fixsfsi+0x7c>
    171e:	84 30       	cpi	r24, 0x04	; 4
    1720:	21 f4       	brne	.+8      	; 0x172a <__fixsfsi+0x34>
    1722:	8e 81       	ldd	r24, Y+6	; 0x06
    1724:	88 23       	and	r24, r24
    1726:	51 f1       	breq	.+84     	; 0x177c <__fixsfsi+0x86>
    1728:	2e c0       	rjmp	.+92     	; 0x1786 <__fixsfsi+0x90>
    172a:	2f 81       	ldd	r18, Y+7	; 0x07
    172c:	38 85       	ldd	r19, Y+8	; 0x08
    172e:	37 fd       	sbrc	r19, 7
    1730:	20 c0       	rjmp	.+64     	; 0x1772 <__fixsfsi+0x7c>
    1732:	6e 81       	ldd	r22, Y+6	; 0x06
    1734:	2f 31       	cpi	r18, 0x1F	; 31
    1736:	31 05       	cpc	r19, r1
    1738:	1c f0       	brlt	.+6      	; 0x1740 <__fixsfsi+0x4a>
    173a:	66 23       	and	r22, r22
    173c:	f9 f0       	breq	.+62     	; 0x177c <__fixsfsi+0x86>
    173e:	23 c0       	rjmp	.+70     	; 0x1786 <__fixsfsi+0x90>
    1740:	8e e1       	ldi	r24, 0x1E	; 30
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	82 1b       	sub	r24, r18
    1746:	93 0b       	sbc	r25, r19
    1748:	29 85       	ldd	r18, Y+9	; 0x09
    174a:	3a 85       	ldd	r19, Y+10	; 0x0a
    174c:	4b 85       	ldd	r20, Y+11	; 0x0b
    174e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1750:	04 c0       	rjmp	.+8      	; 0x175a <__fixsfsi+0x64>
    1752:	56 95       	lsr	r21
    1754:	47 95       	ror	r20
    1756:	37 95       	ror	r19
    1758:	27 95       	ror	r18
    175a:	8a 95       	dec	r24
    175c:	d2 f7       	brpl	.-12     	; 0x1752 <__fixsfsi+0x5c>
    175e:	66 23       	and	r22, r22
    1760:	b1 f0       	breq	.+44     	; 0x178e <__fixsfsi+0x98>
    1762:	50 95       	com	r21
    1764:	40 95       	com	r20
    1766:	30 95       	com	r19
    1768:	21 95       	neg	r18
    176a:	3f 4f       	sbci	r19, 0xFF	; 255
    176c:	4f 4f       	sbci	r20, 0xFF	; 255
    176e:	5f 4f       	sbci	r21, 0xFF	; 255
    1770:	0e c0       	rjmp	.+28     	; 0x178e <__fixsfsi+0x98>
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	40 e0       	ldi	r20, 0x00	; 0
    1778:	50 e0       	ldi	r21, 0x00	; 0
    177a:	09 c0       	rjmp	.+18     	; 0x178e <__fixsfsi+0x98>
    177c:	2f ef       	ldi	r18, 0xFF	; 255
    177e:	3f ef       	ldi	r19, 0xFF	; 255
    1780:	4f ef       	ldi	r20, 0xFF	; 255
    1782:	5f e7       	ldi	r21, 0x7F	; 127
    1784:	04 c0       	rjmp	.+8      	; 0x178e <__fixsfsi+0x98>
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e0       	ldi	r20, 0x00	; 0
    178c:	50 e8       	ldi	r21, 0x80	; 128
    178e:	b9 01       	movw	r22, r18
    1790:	ca 01       	movw	r24, r20
    1792:	2c 96       	adiw	r28, 0x0c	; 12
    1794:	e2 e0       	ldi	r30, 0x02	; 2
    1796:	fa c1       	rjmp	.+1012   	; 0x1b8c <__epilogue_restores__+0x20>

00001798 <__clzsi2>:
    1798:	ef 92       	push	r14
    179a:	ff 92       	push	r15
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	7b 01       	movw	r14, r22
    17a2:	8c 01       	movw	r16, r24
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	e8 16       	cp	r14, r24
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	f8 06       	cpc	r15, r24
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	08 07       	cpc	r16, r24
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	18 07       	cpc	r17, r24
    17b4:	88 f4       	brcc	.+34     	; 0x17d8 <__clzsi2+0x40>
    17b6:	8f ef       	ldi	r24, 0xFF	; 255
    17b8:	e8 16       	cp	r14, r24
    17ba:	f1 04       	cpc	r15, r1
    17bc:	01 05       	cpc	r16, r1
    17be:	11 05       	cpc	r17, r1
    17c0:	31 f0       	breq	.+12     	; 0x17ce <__clzsi2+0x36>
    17c2:	28 f0       	brcs	.+10     	; 0x17ce <__clzsi2+0x36>
    17c4:	88 e0       	ldi	r24, 0x08	; 8
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	a0 e0       	ldi	r26, 0x00	; 0
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	17 c0       	rjmp	.+46     	; 0x17fc <__clzsi2+0x64>
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	a0 e0       	ldi	r26, 0x00	; 0
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	12 c0       	rjmp	.+36     	; 0x17fc <__clzsi2+0x64>
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	e8 16       	cp	r14, r24
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	f8 06       	cpc	r15, r24
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	08 07       	cpc	r16, r24
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	18 07       	cpc	r17, r24
    17e8:	28 f0       	brcs	.+10     	; 0x17f4 <__clzsi2+0x5c>
    17ea:	88 e1       	ldi	r24, 0x18	; 24
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	a0 e0       	ldi	r26, 0x00	; 0
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	04 c0       	rjmp	.+8      	; 0x17fc <__clzsi2+0x64>
    17f4:	80 e1       	ldi	r24, 0x10	; 16
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	a0 e0       	ldi	r26, 0x00	; 0
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	20 e2       	ldi	r18, 0x20	; 32
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e0       	ldi	r20, 0x00	; 0
    1802:	50 e0       	ldi	r21, 0x00	; 0
    1804:	28 1b       	sub	r18, r24
    1806:	39 0b       	sbc	r19, r25
    1808:	4a 0b       	sbc	r20, r26
    180a:	5b 0b       	sbc	r21, r27
    180c:	04 c0       	rjmp	.+8      	; 0x1816 <__clzsi2+0x7e>
    180e:	16 95       	lsr	r17
    1810:	07 95       	ror	r16
    1812:	f7 94       	ror	r15
    1814:	e7 94       	ror	r14
    1816:	8a 95       	dec	r24
    1818:	d2 f7       	brpl	.-12     	; 0x180e <__clzsi2+0x76>
    181a:	f7 01       	movw	r30, r14
    181c:	ef 5e       	subi	r30, 0xEF	; 239
    181e:	fe 4f       	sbci	r31, 0xFE	; 254
    1820:	80 81       	ld	r24, Z
    1822:	28 1b       	sub	r18, r24
    1824:	31 09       	sbc	r19, r1
    1826:	41 09       	sbc	r20, r1
    1828:	51 09       	sbc	r21, r1
    182a:	c9 01       	movw	r24, r18
    182c:	1f 91       	pop	r17
    182e:	0f 91       	pop	r16
    1830:	ff 90       	pop	r15
    1832:	ef 90       	pop	r14
    1834:	08 95       	ret

00001836 <__pack_f>:
    1836:	df 92       	push	r13
    1838:	ef 92       	push	r14
    183a:	ff 92       	push	r15
    183c:	0f 93       	push	r16
    183e:	1f 93       	push	r17
    1840:	fc 01       	movw	r30, r24
    1842:	e4 80       	ldd	r14, Z+4	; 0x04
    1844:	f5 80       	ldd	r15, Z+5	; 0x05
    1846:	06 81       	ldd	r16, Z+6	; 0x06
    1848:	17 81       	ldd	r17, Z+7	; 0x07
    184a:	d1 80       	ldd	r13, Z+1	; 0x01
    184c:	80 81       	ld	r24, Z
    184e:	82 30       	cpi	r24, 0x02	; 2
    1850:	48 f4       	brcc	.+18     	; 0x1864 <__pack_f+0x2e>
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	a0 e1       	ldi	r26, 0x10	; 16
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e8 2a       	or	r14, r24
    185c:	f9 2a       	or	r15, r25
    185e:	0a 2b       	or	r16, r26
    1860:	1b 2b       	or	r17, r27
    1862:	a5 c0       	rjmp	.+330    	; 0x19ae <__pack_f+0x178>
    1864:	84 30       	cpi	r24, 0x04	; 4
    1866:	09 f4       	brne	.+2      	; 0x186a <__pack_f+0x34>
    1868:	9f c0       	rjmp	.+318    	; 0x19a8 <__pack_f+0x172>
    186a:	82 30       	cpi	r24, 0x02	; 2
    186c:	21 f4       	brne	.+8      	; 0x1876 <__pack_f+0x40>
    186e:	ee 24       	eor	r14, r14
    1870:	ff 24       	eor	r15, r15
    1872:	87 01       	movw	r16, r14
    1874:	05 c0       	rjmp	.+10     	; 0x1880 <__pack_f+0x4a>
    1876:	e1 14       	cp	r14, r1
    1878:	f1 04       	cpc	r15, r1
    187a:	01 05       	cpc	r16, r1
    187c:	11 05       	cpc	r17, r1
    187e:	19 f4       	brne	.+6      	; 0x1886 <__pack_f+0x50>
    1880:	e0 e0       	ldi	r30, 0x00	; 0
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	96 c0       	rjmp	.+300    	; 0x19b2 <__pack_f+0x17c>
    1886:	62 81       	ldd	r22, Z+2	; 0x02
    1888:	73 81       	ldd	r23, Z+3	; 0x03
    188a:	9f ef       	ldi	r25, 0xFF	; 255
    188c:	62 38       	cpi	r22, 0x82	; 130
    188e:	79 07       	cpc	r23, r25
    1890:	0c f0       	brlt	.+2      	; 0x1894 <__pack_f+0x5e>
    1892:	5b c0       	rjmp	.+182    	; 0x194a <__pack_f+0x114>
    1894:	22 e8       	ldi	r18, 0x82	; 130
    1896:	3f ef       	ldi	r19, 0xFF	; 255
    1898:	26 1b       	sub	r18, r22
    189a:	37 0b       	sbc	r19, r23
    189c:	2a 31       	cpi	r18, 0x1A	; 26
    189e:	31 05       	cpc	r19, r1
    18a0:	2c f0       	brlt	.+10     	; 0x18ac <__pack_f+0x76>
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	40 e0       	ldi	r20, 0x00	; 0
    18a8:	50 e0       	ldi	r21, 0x00	; 0
    18aa:	2a c0       	rjmp	.+84     	; 0x1900 <__pack_f+0xca>
    18ac:	b8 01       	movw	r22, r16
    18ae:	a7 01       	movw	r20, r14
    18b0:	02 2e       	mov	r0, r18
    18b2:	04 c0       	rjmp	.+8      	; 0x18bc <__pack_f+0x86>
    18b4:	76 95       	lsr	r23
    18b6:	67 95       	ror	r22
    18b8:	57 95       	ror	r21
    18ba:	47 95       	ror	r20
    18bc:	0a 94       	dec	r0
    18be:	d2 f7       	brpl	.-12     	; 0x18b4 <__pack_f+0x7e>
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	a0 e0       	ldi	r26, 0x00	; 0
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	04 c0       	rjmp	.+8      	; 0x18d2 <__pack_f+0x9c>
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	aa 1f       	adc	r26, r26
    18d0:	bb 1f       	adc	r27, r27
    18d2:	2a 95       	dec	r18
    18d4:	d2 f7       	brpl	.-12     	; 0x18ca <__pack_f+0x94>
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	a1 09       	sbc	r26, r1
    18da:	b1 09       	sbc	r27, r1
    18dc:	8e 21       	and	r24, r14
    18de:	9f 21       	and	r25, r15
    18e0:	a0 23       	and	r26, r16
    18e2:	b1 23       	and	r27, r17
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	a1 05       	cpc	r26, r1
    18e8:	b1 05       	cpc	r27, r1
    18ea:	21 f0       	breq	.+8      	; 0x18f4 <__pack_f+0xbe>
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a0 e0       	ldi	r26, 0x00	; 0
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	9a 01       	movw	r18, r20
    18f6:	ab 01       	movw	r20, r22
    18f8:	28 2b       	or	r18, r24
    18fa:	39 2b       	or	r19, r25
    18fc:	4a 2b       	or	r20, r26
    18fe:	5b 2b       	or	r21, r27
    1900:	da 01       	movw	r26, r20
    1902:	c9 01       	movw	r24, r18
    1904:	8f 77       	andi	r24, 0x7F	; 127
    1906:	90 70       	andi	r25, 0x00	; 0
    1908:	a0 70       	andi	r26, 0x00	; 0
    190a:	b0 70       	andi	r27, 0x00	; 0
    190c:	80 34       	cpi	r24, 0x40	; 64
    190e:	91 05       	cpc	r25, r1
    1910:	a1 05       	cpc	r26, r1
    1912:	b1 05       	cpc	r27, r1
    1914:	39 f4       	brne	.+14     	; 0x1924 <__pack_f+0xee>
    1916:	27 ff       	sbrs	r18, 7
    1918:	09 c0       	rjmp	.+18     	; 0x192c <__pack_f+0xf6>
    191a:	20 5c       	subi	r18, 0xC0	; 192
    191c:	3f 4f       	sbci	r19, 0xFF	; 255
    191e:	4f 4f       	sbci	r20, 0xFF	; 255
    1920:	5f 4f       	sbci	r21, 0xFF	; 255
    1922:	04 c0       	rjmp	.+8      	; 0x192c <__pack_f+0xf6>
    1924:	21 5c       	subi	r18, 0xC1	; 193
    1926:	3f 4f       	sbci	r19, 0xFF	; 255
    1928:	4f 4f       	sbci	r20, 0xFF	; 255
    192a:	5f 4f       	sbci	r21, 0xFF	; 255
    192c:	e0 e0       	ldi	r30, 0x00	; 0
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	20 30       	cpi	r18, 0x00	; 0
    1932:	a0 e0       	ldi	r26, 0x00	; 0
    1934:	3a 07       	cpc	r19, r26
    1936:	a0 e0       	ldi	r26, 0x00	; 0
    1938:	4a 07       	cpc	r20, r26
    193a:	a0 e4       	ldi	r26, 0x40	; 64
    193c:	5a 07       	cpc	r21, r26
    193e:	10 f0       	brcs	.+4      	; 0x1944 <__pack_f+0x10e>
    1940:	e1 e0       	ldi	r30, 0x01	; 1
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	79 01       	movw	r14, r18
    1946:	8a 01       	movw	r16, r20
    1948:	27 c0       	rjmp	.+78     	; 0x1998 <__pack_f+0x162>
    194a:	60 38       	cpi	r22, 0x80	; 128
    194c:	71 05       	cpc	r23, r1
    194e:	64 f5       	brge	.+88     	; 0x19a8 <__pack_f+0x172>
    1950:	fb 01       	movw	r30, r22
    1952:	e1 58       	subi	r30, 0x81	; 129
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	d8 01       	movw	r26, r16
    1958:	c7 01       	movw	r24, r14
    195a:	8f 77       	andi	r24, 0x7F	; 127
    195c:	90 70       	andi	r25, 0x00	; 0
    195e:	a0 70       	andi	r26, 0x00	; 0
    1960:	b0 70       	andi	r27, 0x00	; 0
    1962:	80 34       	cpi	r24, 0x40	; 64
    1964:	91 05       	cpc	r25, r1
    1966:	a1 05       	cpc	r26, r1
    1968:	b1 05       	cpc	r27, r1
    196a:	39 f4       	brne	.+14     	; 0x197a <__pack_f+0x144>
    196c:	e7 fe       	sbrs	r14, 7
    196e:	0d c0       	rjmp	.+26     	; 0x198a <__pack_f+0x154>
    1970:	80 e4       	ldi	r24, 0x40	; 64
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	a0 e0       	ldi	r26, 0x00	; 0
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	04 c0       	rjmp	.+8      	; 0x1982 <__pack_f+0x14c>
    197a:	8f e3       	ldi	r24, 0x3F	; 63
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	a0 e0       	ldi	r26, 0x00	; 0
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e8 0e       	add	r14, r24
    1984:	f9 1e       	adc	r15, r25
    1986:	0a 1f       	adc	r16, r26
    1988:	1b 1f       	adc	r17, r27
    198a:	17 ff       	sbrs	r17, 7
    198c:	05 c0       	rjmp	.+10     	; 0x1998 <__pack_f+0x162>
    198e:	16 95       	lsr	r17
    1990:	07 95       	ror	r16
    1992:	f7 94       	ror	r15
    1994:	e7 94       	ror	r14
    1996:	31 96       	adiw	r30, 0x01	; 1
    1998:	87 e0       	ldi	r24, 0x07	; 7
    199a:	16 95       	lsr	r17
    199c:	07 95       	ror	r16
    199e:	f7 94       	ror	r15
    19a0:	e7 94       	ror	r14
    19a2:	8a 95       	dec	r24
    19a4:	d1 f7       	brne	.-12     	; 0x199a <__pack_f+0x164>
    19a6:	05 c0       	rjmp	.+10     	; 0x19b2 <__pack_f+0x17c>
    19a8:	ee 24       	eor	r14, r14
    19aa:	ff 24       	eor	r15, r15
    19ac:	87 01       	movw	r16, r14
    19ae:	ef ef       	ldi	r30, 0xFF	; 255
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	6e 2f       	mov	r22, r30
    19b4:	67 95       	ror	r22
    19b6:	66 27       	eor	r22, r22
    19b8:	67 95       	ror	r22
    19ba:	90 2f       	mov	r25, r16
    19bc:	9f 77       	andi	r25, 0x7F	; 127
    19be:	d7 94       	ror	r13
    19c0:	dd 24       	eor	r13, r13
    19c2:	d7 94       	ror	r13
    19c4:	8e 2f       	mov	r24, r30
    19c6:	86 95       	lsr	r24
    19c8:	49 2f       	mov	r20, r25
    19ca:	46 2b       	or	r20, r22
    19cc:	58 2f       	mov	r21, r24
    19ce:	5d 29       	or	r21, r13
    19d0:	b7 01       	movw	r22, r14
    19d2:	ca 01       	movw	r24, r20
    19d4:	1f 91       	pop	r17
    19d6:	0f 91       	pop	r16
    19d8:	ff 90       	pop	r15
    19da:	ef 90       	pop	r14
    19dc:	df 90       	pop	r13
    19de:	08 95       	ret

000019e0 <__unpack_f>:
    19e0:	fc 01       	movw	r30, r24
    19e2:	db 01       	movw	r26, r22
    19e4:	40 81       	ld	r20, Z
    19e6:	51 81       	ldd	r21, Z+1	; 0x01
    19e8:	22 81       	ldd	r18, Z+2	; 0x02
    19ea:	62 2f       	mov	r22, r18
    19ec:	6f 77       	andi	r22, 0x7F	; 127
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	22 1f       	adc	r18, r18
    19f2:	22 27       	eor	r18, r18
    19f4:	22 1f       	adc	r18, r18
    19f6:	93 81       	ldd	r25, Z+3	; 0x03
    19f8:	89 2f       	mov	r24, r25
    19fa:	88 0f       	add	r24, r24
    19fc:	82 2b       	or	r24, r18
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	99 1f       	adc	r25, r25
    1a04:	99 27       	eor	r25, r25
    1a06:	99 1f       	adc	r25, r25
    1a08:	11 96       	adiw	r26, 0x01	; 1
    1a0a:	9c 93       	st	X, r25
    1a0c:	11 97       	sbiw	r26, 0x01	; 1
    1a0e:	21 15       	cp	r18, r1
    1a10:	31 05       	cpc	r19, r1
    1a12:	a9 f5       	brne	.+106    	; 0x1a7e <__unpack_f+0x9e>
    1a14:	41 15       	cp	r20, r1
    1a16:	51 05       	cpc	r21, r1
    1a18:	61 05       	cpc	r22, r1
    1a1a:	71 05       	cpc	r23, r1
    1a1c:	11 f4       	brne	.+4      	; 0x1a22 <__unpack_f+0x42>
    1a1e:	82 e0       	ldi	r24, 0x02	; 2
    1a20:	37 c0       	rjmp	.+110    	; 0x1a90 <__unpack_f+0xb0>
    1a22:	82 e8       	ldi	r24, 0x82	; 130
    1a24:	9f ef       	ldi	r25, 0xFF	; 255
    1a26:	13 96       	adiw	r26, 0x03	; 3
    1a28:	9c 93       	st	X, r25
    1a2a:	8e 93       	st	-X, r24
    1a2c:	12 97       	sbiw	r26, 0x02	; 2
    1a2e:	9a 01       	movw	r18, r20
    1a30:	ab 01       	movw	r20, r22
    1a32:	67 e0       	ldi	r22, 0x07	; 7
    1a34:	22 0f       	add	r18, r18
    1a36:	33 1f       	adc	r19, r19
    1a38:	44 1f       	adc	r20, r20
    1a3a:	55 1f       	adc	r21, r21
    1a3c:	6a 95       	dec	r22
    1a3e:	d1 f7       	brne	.-12     	; 0x1a34 <__unpack_f+0x54>
    1a40:	83 e0       	ldi	r24, 0x03	; 3
    1a42:	8c 93       	st	X, r24
    1a44:	0d c0       	rjmp	.+26     	; 0x1a60 <__unpack_f+0x80>
    1a46:	22 0f       	add	r18, r18
    1a48:	33 1f       	adc	r19, r19
    1a4a:	44 1f       	adc	r20, r20
    1a4c:	55 1f       	adc	r21, r21
    1a4e:	12 96       	adiw	r26, 0x02	; 2
    1a50:	8d 91       	ld	r24, X+
    1a52:	9c 91       	ld	r25, X
    1a54:	13 97       	sbiw	r26, 0x03	; 3
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	13 96       	adiw	r26, 0x03	; 3
    1a5a:	9c 93       	st	X, r25
    1a5c:	8e 93       	st	-X, r24
    1a5e:	12 97       	sbiw	r26, 0x02	; 2
    1a60:	20 30       	cpi	r18, 0x00	; 0
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	38 07       	cpc	r19, r24
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	48 07       	cpc	r20, r24
    1a6a:	80 e4       	ldi	r24, 0x40	; 64
    1a6c:	58 07       	cpc	r21, r24
    1a6e:	58 f3       	brcs	.-42     	; 0x1a46 <__unpack_f+0x66>
    1a70:	14 96       	adiw	r26, 0x04	; 4
    1a72:	2d 93       	st	X+, r18
    1a74:	3d 93       	st	X+, r19
    1a76:	4d 93       	st	X+, r20
    1a78:	5c 93       	st	X, r21
    1a7a:	17 97       	sbiw	r26, 0x07	; 7
    1a7c:	08 95       	ret
    1a7e:	2f 3f       	cpi	r18, 0xFF	; 255
    1a80:	31 05       	cpc	r19, r1
    1a82:	79 f4       	brne	.+30     	; 0x1aa2 <__unpack_f+0xc2>
    1a84:	41 15       	cp	r20, r1
    1a86:	51 05       	cpc	r21, r1
    1a88:	61 05       	cpc	r22, r1
    1a8a:	71 05       	cpc	r23, r1
    1a8c:	19 f4       	brne	.+6      	; 0x1a94 <__unpack_f+0xb4>
    1a8e:	84 e0       	ldi	r24, 0x04	; 4
    1a90:	8c 93       	st	X, r24
    1a92:	08 95       	ret
    1a94:	64 ff       	sbrs	r22, 4
    1a96:	03 c0       	rjmp	.+6      	; 0x1a9e <__unpack_f+0xbe>
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	8c 93       	st	X, r24
    1a9c:	12 c0       	rjmp	.+36     	; 0x1ac2 <__unpack_f+0xe2>
    1a9e:	1c 92       	st	X, r1
    1aa0:	10 c0       	rjmp	.+32     	; 0x1ac2 <__unpack_f+0xe2>
    1aa2:	2f 57       	subi	r18, 0x7F	; 127
    1aa4:	30 40       	sbci	r19, 0x00	; 0
    1aa6:	13 96       	adiw	r26, 0x03	; 3
    1aa8:	3c 93       	st	X, r19
    1aaa:	2e 93       	st	-X, r18
    1aac:	12 97       	sbiw	r26, 0x02	; 2
    1aae:	83 e0       	ldi	r24, 0x03	; 3
    1ab0:	8c 93       	st	X, r24
    1ab2:	87 e0       	ldi	r24, 0x07	; 7
    1ab4:	44 0f       	add	r20, r20
    1ab6:	55 1f       	adc	r21, r21
    1ab8:	66 1f       	adc	r22, r22
    1aba:	77 1f       	adc	r23, r23
    1abc:	8a 95       	dec	r24
    1abe:	d1 f7       	brne	.-12     	; 0x1ab4 <__unpack_f+0xd4>
    1ac0:	70 64       	ori	r23, 0x40	; 64
    1ac2:	14 96       	adiw	r26, 0x04	; 4
    1ac4:	4d 93       	st	X+, r20
    1ac6:	5d 93       	st	X+, r21
    1ac8:	6d 93       	st	X+, r22
    1aca:	7c 93       	st	X, r23
    1acc:	17 97       	sbiw	r26, 0x07	; 7
    1ace:	08 95       	ret

00001ad0 <memset>:
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	01 c0       	rjmp	.+2      	; 0x1ad6 <memset+0x6>
    1ad4:	6d 93       	st	X+, r22
    1ad6:	41 50       	subi	r20, 0x01	; 1
    1ad8:	50 40       	sbci	r21, 0x00	; 0
    1ada:	e0 f7       	brcc	.-8      	; 0x1ad4 <memset+0x4>
    1adc:	08 95       	ret

00001ade <__mulsi3>:
    1ade:	62 9f       	mul	r22, r18
    1ae0:	d0 01       	movw	r26, r0
    1ae2:	73 9f       	mul	r23, r19
    1ae4:	f0 01       	movw	r30, r0
    1ae6:	82 9f       	mul	r24, r18
    1ae8:	e0 0d       	add	r30, r0
    1aea:	f1 1d       	adc	r31, r1
    1aec:	64 9f       	mul	r22, r20
    1aee:	e0 0d       	add	r30, r0
    1af0:	f1 1d       	adc	r31, r1
    1af2:	92 9f       	mul	r25, r18
    1af4:	f0 0d       	add	r31, r0
    1af6:	83 9f       	mul	r24, r19
    1af8:	f0 0d       	add	r31, r0
    1afa:	74 9f       	mul	r23, r20
    1afc:	f0 0d       	add	r31, r0
    1afe:	65 9f       	mul	r22, r21
    1b00:	f0 0d       	add	r31, r0
    1b02:	99 27       	eor	r25, r25
    1b04:	72 9f       	mul	r23, r18
    1b06:	b0 0d       	add	r27, r0
    1b08:	e1 1d       	adc	r30, r1
    1b0a:	f9 1f       	adc	r31, r25
    1b0c:	63 9f       	mul	r22, r19
    1b0e:	b0 0d       	add	r27, r0
    1b10:	e1 1d       	adc	r30, r1
    1b12:	f9 1f       	adc	r31, r25
    1b14:	bd 01       	movw	r22, r26
    1b16:	cf 01       	movw	r24, r30
    1b18:	11 24       	eor	r1, r1
    1b1a:	08 95       	ret

00001b1c <__udivmodqi4>:
    1b1c:	99 1b       	sub	r25, r25
    1b1e:	79 e0       	ldi	r23, 0x09	; 9
    1b20:	04 c0       	rjmp	.+8      	; 0x1b2a <__udivmodqi4_ep>

00001b22 <__udivmodqi4_loop>:
    1b22:	99 1f       	adc	r25, r25
    1b24:	96 17       	cp	r25, r22
    1b26:	08 f0       	brcs	.+2      	; 0x1b2a <__udivmodqi4_ep>
    1b28:	96 1b       	sub	r25, r22

00001b2a <__udivmodqi4_ep>:
    1b2a:	88 1f       	adc	r24, r24
    1b2c:	7a 95       	dec	r23
    1b2e:	c9 f7       	brne	.-14     	; 0x1b22 <__udivmodqi4_loop>
    1b30:	80 95       	com	r24
    1b32:	08 95       	ret

00001b34 <__prologue_saves__>:
    1b34:	2f 92       	push	r2
    1b36:	3f 92       	push	r3
    1b38:	4f 92       	push	r4
    1b3a:	5f 92       	push	r5
    1b3c:	6f 92       	push	r6
    1b3e:	7f 92       	push	r7
    1b40:	8f 92       	push	r8
    1b42:	9f 92       	push	r9
    1b44:	af 92       	push	r10
    1b46:	bf 92       	push	r11
    1b48:	cf 92       	push	r12
    1b4a:	df 92       	push	r13
    1b4c:	ef 92       	push	r14
    1b4e:	ff 92       	push	r15
    1b50:	0f 93       	push	r16
    1b52:	1f 93       	push	r17
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	ca 1b       	sub	r28, r26
    1b5e:	db 0b       	sbc	r29, r27
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	09 94       	ijmp

00001b6c <__epilogue_restores__>:
    1b6c:	2a 88       	ldd	r2, Y+18	; 0x12
    1b6e:	39 88       	ldd	r3, Y+17	; 0x11
    1b70:	48 88       	ldd	r4, Y+16	; 0x10
    1b72:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b74:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b76:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b78:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b7a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b7c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b7e:	b9 84       	ldd	r11, Y+9	; 0x09
    1b80:	c8 84       	ldd	r12, Y+8	; 0x08
    1b82:	df 80       	ldd	r13, Y+7	; 0x07
    1b84:	ee 80       	ldd	r14, Y+6	; 0x06
    1b86:	fd 80       	ldd	r15, Y+5	; 0x05
    1b88:	0c 81       	ldd	r16, Y+4	; 0x04
    1b8a:	1b 81       	ldd	r17, Y+3	; 0x03
    1b8c:	aa 81       	ldd	r26, Y+2	; 0x02
    1b8e:	b9 81       	ldd	r27, Y+1	; 0x01
    1b90:	ce 0f       	add	r28, r30
    1b92:	d1 1d       	adc	r29, r1
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	ed 01       	movw	r28, r26
    1ba0:	08 95       	ret

00001ba2 <_exit>:
    1ba2:	f8 94       	cli

00001ba4 <__stop_program>:
    1ba4:	ff cf       	rjmp	.-2      	; 0x1ba4 <__stop_program>
