
pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000009c6  00000a5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800108  00800108  00000a62  2**0
                  ALLOC
  3 .debug_aranges 00000140  00000000  00000000  00000a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004d3  00000000  00000000  00000ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d06  00000000  00000000  00001075  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000675  00000000  00000000  00001d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e6f  00000000  00000000  000023f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  00003260  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000430  00000000  00000000  000035b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000225  00000000  00000000  000039e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	f9 c3       	rjmp	.+2034   	; 0x7f6 <__vector_1>
   4:	c4 c3       	rjmp	.+1928   	; 0x78e <__vector_2>
   6:	81 c1       	rjmp	.+770    	; 0x30a <__vector_3>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	64 c4       	rjmp	.+2248   	; 0x8d6 <__vector_6>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	49 c4       	rjmp	.+2194   	; 0x8aa <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	d7 c0       	rjmp	.+430    	; 0x1d4 <__vector_18>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e6 ec       	ldi	r30, 0xC6	; 198
  48:	f9 e0       	ldi	r31, 0x09	; 9
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a8 30       	cpi	r26, 0x08	; 8
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a8 e0       	ldi	r26, 0x08	; 8
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a4 31       	cpi	r26, 0x14	; 20
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	08 d0       	rcall	.+16     	; 0x78 <main>
  68:	ac c4       	rjmp	.+2392   	; 0x9c2 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <init_main>:

//Fonction d'appel d'initialisation vers les différents fonctions de la carte moteur
void init_main(void)
{
	//L'activation des interruptions est nécessaire pour le watchdog
	sei();
  6c:	78 94       	sei

	//L'ordre des différentes initialisations est importante !
	//Du plus au moins critique
	init_watchdog();
  6e:	29 d4       	rcall	.+2130   	; 0x8c2 <init_watchdog>
	init_motor_driver(); //Vide les ballasts sur FC
  70:	e1 d1       	rcall	.+962    	; 0x434 <init_motor_driver>
	init_ballast_position();
  72:	f8 d0       	rcall	.+496    	; 0x264 <init_ballast_position>
	init_3964r();
  74:	63 d3       	rcall	.+1734   	; 0x73c <init_3964r>
}
  76:	08 95       	ret

00000078 <main>:
//Permet d'avoir la fonction get_positionX(); afin d'obtenir le nombre d'impulsion sans étalonnage
#include "external_interrupt.h"

//Programme principale
int main(void)
{
  78:	0f 93       	push	r16
  7a:	1f 93       	push	r17
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <main+0xa>
  82:	0f 92       	push	r0
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	char str_cmd[SIZE_MSG];
	unsigned int position = 0;
#endif

	//Fonction pour intialiser les différentes fonctions
	init_main();
  88:	f1 df       	rcall	.-30     	; 0x6c <init_main>
#ifndef DEBUG
		//Attente d'une commande 3964 de la FOXBOARD
		//Le tableau str_cmd est rempli par la commande
		//Voir Site sous-marin pour la description des commandes :
		//http://sites.google.com/site/projetsousmarin/sousmarin-v2-0/electronnique-embarquee-2-0/tableau-recapitulatif
		get_data_3964r(str_cmd);
  8a:	8e 01       	movw	r16, r28
  8c:	0f 5f       	subi	r16, 0xFF	; 255
  8e:	1f 4f       	sbci	r17, 0xFF	; 255
  90:	c8 01       	movw	r24, r16
  92:	0b d2       	rcall	.+1046   	; 0x4aa <get_data_3964r>

		//Selection du type de commande
		switch(str_cmd[0])
  94:	89 81       	ldd	r24, Y+1	; 0x01
  96:	8a 34       	cpi	r24, 0x4A	; 74
  98:	71 f1       	breq	.+92     	; 0xf6 <main+0x7e>
  9a:	8b 34       	cpi	r24, 0x4B	; 75
  9c:	18 f4       	brcc	.+6      	; 0xa4 <main+0x2c>
  9e:	87 34       	cpi	r24, 0x47	; 71
  a0:	b9 f7       	brne	.-18     	; 0x90 <main+0x18>
  a2:	27 c0       	rjmp	.+78     	; 0xf2 <main+0x7a>
  a4:	8b 34       	cpi	r24, 0x4B	; 75
  a6:	19 f0       	breq	.+6      	; 0xae <main+0x36>
  a8:	8d 34       	cpi	r24, 0x4D	; 77
  aa:	91 f7       	brne	.-28     	; 0x90 <main+0x18>
  ac:	11 c0       	rjmp	.+34     	; 0xd0 <main+0x58>
		{
			//Moteur 1
			case 'K':
				//Si Vitesse moteur 1 est != 0
				if(str_cmd[2] != 0)
  ae:	8b 81       	ldd	r24, Y+3	; 0x03
  b0:	88 23       	and	r24, r24
  b2:	59 f0       	breq	.+22     	; 0xca <main+0x52>
				{
					//Si le sens de rotation est horlogique (=0)
					if(str_cmd[1] == 0)
  b4:	8a 81       	ldd	r24, Y+2	; 0x02
  b6:	88 23       	and	r24, r24
  b8:	11 f4       	brne	.+4      	; 0xbe <main+0x46>
						//Definition du sens de rotation
						rotation_motor1(CLOCKWISE);
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <main+0x48>
					else
						//Definition du sens de rotation
						rotation_motor1(COUNTERCLOCKWISE);
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	03 d1       	rcall	.+518    	; 0x2c8 <rotation_motor1>
					
					//Définition de la vitesse du moteur 1
					set_speed_motor1(str_cmd[2]);
  c2:	8b 81       	ldd	r24, Y+3	; 0x03
  c4:	1e d1       	rcall	.+572    	; 0x302 <set_speed_motor1>
					//Active la sortie ENABLE de la carte driver
					enable_motor1(TRUE);		
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	01 c0       	rjmp	.+2      	; 0xcc <main+0x54>
				}
				//Si la vitesse du moteur 1 est égale à 0
				else
					//Désactive la sortie ENABLE de la carte driver
					enable_motor1(FALSE);
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	f1 d0       	rcall	.+482    	; 0x2b0 <enable_motor1>
  ce:	e0 cf       	rjmp	.-64     	; 0x90 <main+0x18>
				break;
			
			//Moteur 2
			case 'M':
				//Si Vitesse moteur 2 est != 0
				if(str_cmd[2] != 0)
  d0:	8b 81       	ldd	r24, Y+3	; 0x03
  d2:	88 23       	and	r24, r24
  d4:	59 f0       	breq	.+22     	; 0xec <main+0x74>
				{
					//Si le sens de rotation est horlogique (=0)
					if(str_cmd[1] == 0)
  d6:	8a 81       	ldd	r24, Y+2	; 0x02
  d8:	88 23       	and	r24, r24
  da:	11 f4       	brne	.+4      	; 0xe0 <main+0x68>
						//Definition du sens de rotation
						rotation_motor2(CLOCKWISE);
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	01 c0       	rjmp	.+2      	; 0xe2 <main+0x6a>
					else
						//Definition du sens de rotation
						rotation_motor2(COUNTERCLOCKWISE);
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	f8 d0       	rcall	.+496    	; 0x2d4 <rotation_motor2>
					
					//Définition de la vitesse du moteur 2
					set_speed_motor2(str_cmd[2]);
  e4:	8b 81       	ldd	r24, Y+3	; 0x03
  e6:	0f d1       	rcall	.+542    	; 0x306 <set_speed_motor2>
					//Active la sortie ENABLE de la carte driver
					enable_motor2(TRUE);
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	01 c0       	rjmp	.+2      	; 0xee <main+0x76>
				}
				else
					//Désactive la sortie ENABLE de la carte driver
					enable_motor2(FALSE);
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	e6 d0       	rcall	.+460    	; 0x2bc <enable_motor2>
  f0:	cf cf       	rjmp	.-98     	; 0x90 <main+0x18>
			case 'G':
				//Position est un unsigned int (16bits)
				//position = get_ballast_position1();	//position étalonnée

				//Pour des questions de debugging, je revois le nombre d'impulsion à la FOXBOARD
				position = get_position1();				//Nombre d'impulsion
  f2:	41 d3       	rcall	.+1666   	; 0x776 <get_position1>
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <main+0x80>
			case 'J':
				//Position est un unsigned int (16bits)
				//position = get_ballast_position2();	//position étalonnée

				//Pour des questions de debugging, je revois le nombre d'impulsion à la FOXBOARD
				position = get_position2();				//Nombre d'impulsion
  f6:	45 d3       	rcall	.+1674   	; 0x782 <get_position2>

				//Place les bits de poids faible dans str_cmd[2]
				str_cmd[2] = position & 0x00FF;
  f8:	8b 83       	std	Y+3, r24	; 0x03
				position >>= 8;
				//Place les bits de poids fort dans str_cmd[1]
				str_cmd[1] = position & 0x00FF;
  fa:	9a 83       	std	Y+2, r25	; 0x02

				//On renvoie les informations de position à la FOXBOARD via 3964
				send_data_3964r(str_cmd, SIZE_MSG);
  fc:	c8 01       	movw	r24, r16
  fe:	63 e0       	ldi	r22, 0x03	; 3
 100:	65 d2       	rcall	.+1226   	; 0x5cc <send_data_3964r>
 102:	c6 cf       	rjmp	.-116    	; 0x90 <main+0x18>

00000104 <init_adc>:

unsigned int conv_ADC(void);

void init_adc(void)
{
	ADMUX |= (1<<REFS0);// | (1<<ADLAR);	//Ajustement à gauche
 104:	ec e7       	ldi	r30, 0x7C	; 124
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1); //Activation ADC et prescaler
 10e:	ea e7       	ldi	r30, 0x7A	; 122
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	86 68       	ori	r24, 0x86	; 134
 116:	80 83       	st	Z, r24
}
 118:	08 95       	ret

0000011a <conv_ADC>:

unsigned int conv_ADC(void)
{
	ADCSRA |= (1<<ADSC);		 //Start Converstion
 11a:	80 91 7a 00 	lds	r24, 0x007A
 11e:	80 64       	ori	r24, 0x40	; 64
 120:	80 93 7a 00 	sts	0x007A, r24
	while(!(ADCSRA & (1<<ADIF)));//Attend fin de convertion
 124:	80 91 7a 00 	lds	r24, 0x007A
 128:	84 ff       	sbrs	r24, 4
 12a:	fc cf       	rjmp	.-8      	; 0x124 <conv_ADC+0xa>
	ADCSRA |= (0<<ADIF);		 //Rearme l'ADC
 12c:	80 91 7a 00 	lds	r24, 0x007A
 130:	80 93 7a 00 	sts	0x007A, r24

	//return ADCH;
	return ADCL + (ADCH<<8);
 134:	90 91 78 00 	lds	r25, 0x0078
 138:	80 91 79 00 	lds	r24, 0x0079
 13c:	38 2f       	mov	r19, r24
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	29 0f       	add	r18, r25
 142:	31 1d       	adc	r19, r1
}
 144:	c9 01       	movw	r24, r18
 146:	08 95       	ret

00000148 <get_value_ADC0>:

unsigned int get_value_ADC0(void)
{
	ADMUX &= 0b11111110;
 148:	ec e7       	ldi	r30, 0x7C	; 124
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	8e 7f       	andi	r24, 0xFE	; 254
 150:	80 83       	st	Z, r24
	return conv_ADC();
 152:	e3 df       	rcall	.-58     	; 0x11a <conv_ADC>
}
 154:	08 95       	ret

00000156 <get_value_ADC1>:

unsigned int get_value_ADC1(void)
{
	ADMUX |= (1<<MUX0);
 156:	ec e7       	ldi	r30, 0x7C	; 124
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	80 83       	st	Z, r24
	return conv_ADC();
 160:	dc df       	rcall	.-72     	; 0x11a <conv_ADC>
}
 162:	08 95       	ret

00000164 <init_usart>:

//Initialisation de l'usart
void init_usart(unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 164:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 168:	80 93 c4 00 	sts	0x00C4, r24
	/*Double speed*/
	UCSR0A = (1<<U2X0);
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	80 93 c0 00 	sts	0x00C0, r24
	/*Enable receiver and transmitter */
	UCSR0B |= (1<<TXEN0) | (1<<RXEN0);
 172:	e1 ec       	ldi	r30, 0xC1	; 193
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	88 61       	ori	r24, 0x18	; 24
 17a:	80 83       	st	Z, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (3<<UCSZ00);
 17c:	86 e0       	ldi	r24, 0x06	; 6
 17e:	80 93 c2 00 	sts	0x00C2, r24

	flag_usart = FALSE;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 08 01 	sts	0x0108, r24
}
 188:	08 95       	ret

0000018a <putchar_usart>:

//Permet l'envoi d'un caractère
void putchar_usart(char c)
{
 18a:	98 2f       	mov	r25, r24
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1<<UDRE0)));
 18c:	80 91 c0 00 	lds	r24, 0x00C0
 190:	85 ff       	sbrs	r24, 5
 192:	fc cf       	rjmp	.-8      	; 0x18c <putchar_usart+0x2>
	/* Put data into buffer, sends the data */
	UDR0 = c;
 194:	90 93 c6 00 	sts	0x00C6, r25
}
 198:	08 95       	ret

0000019a <getchar_usart>:
//Permet la reception d'un caractère
char getchar_usart(void)
{
	/* Wait for data to be received */
	//Si le flag_timer1 est différent de FALSE, on sort de la boucle
	while ((!(UCSR0A & (1<<RXC0))) && (flag_timer1 == FALSE));
 19a:	80 91 c0 00 	lds	r24, 0x00C0
 19e:	87 fd       	sbrc	r24, 7
 1a0:	04 c0       	rjmp	.+8      	; 0x1aa <getchar_usart+0x10>
 1a2:	80 91 09 01 	lds	r24, 0x0109
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	c1 f3       	breq	.-16     	; 0x19a <getchar_usart>
	/* Get and return received data from buffer */
	return UDR0;
 1aa:	80 91 c6 00 	lds	r24, 0x00C6
}
 1ae:	08 95       	ret

000001b0 <gets_usart>:
		putchar_usart(string[i]);
}

//Permet de recevoir une chaine de caractère sur l'usart
void gets_usart(char string[], unsigned char len)
{
 1b0:	fc 01       	movw	r30, r24
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0c c0       	rjmp	.+24     	; 0x1ce <gets_usart+0x1e>
//Permet la reception d'un caractère
char getchar_usart(void)
{
	/* Wait for data to be received */
	//Si le flag_timer1 est différent de FALSE, on sort de la boucle
	while ((!(UCSR0A & (1<<RXC0))) && (flag_timer1 == FALSE));
 1b6:	80 91 c0 00 	lds	r24, 0x00C0
 1ba:	87 fd       	sbrc	r24, 7
 1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <gets_usart+0x16>
 1be:	80 91 09 01 	lds	r24, 0x0109
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	c1 f3       	breq	.-16     	; 0x1b6 <gets_usart+0x6>
	/* Get and return received data from buffer */
	return UDR0;
 1c6:	80 91 c6 00 	lds	r24, 0x00C6
void gets_usart(char string[], unsigned char len)
{
	unsigned char i;
	
	for(i=0; i<len; i++)
		string[i] = getchar_usart();
 1ca:	81 93       	st	Z+, r24
//Permet de recevoir une chaine de caractère sur l'usart
void gets_usart(char string[], unsigned char len)
{
	unsigned char i;
	
	for(i=0; i<len; i++)
 1cc:	9f 5f       	subi	r25, 0xFF	; 255
 1ce:	96 17       	cp	r25, r22
 1d0:	90 f3       	brcs	.-28     	; 0x1b6 <gets_usart+0x6>
		string[i] = getchar_usart();
}
 1d2:	08 95       	ret

000001d4 <__vector_18>:

//Interruption usart en reception
ISR(USART_RX_vect)
{
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
	//Si un caractère est reçu, on set le flag_usart à TRUE pour quitter la boucle de getchar_usart
	flag_usart = TRUE;
 1de:	10 92 08 01 	sts	0x0108, r1
}
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

000001ec <puts_usart>:
	return UDR0;
}

//Permet d'écrire une chaine de caractère sur l'usart
void puts_usart(char string[])
{
 1ec:	9c 01       	movw	r18, r24
	unsigned char i;

	for(i=0; i<strlen(string); i++)
 1ee:	dc 01       	movw	r26, r24
 1f0:	0d 90       	ld	r0, X+
 1f2:	00 20       	and	r0, r0
 1f4:	e9 f7       	brne	.-6      	; 0x1f0 <puts_usart+0x4>
 1f6:	11 97       	sbiw	r26, 0x01	; 1
 1f8:	a8 1b       	sub	r26, r24
 1fa:	b9 0b       	sbc	r27, r25
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0a c0       	rjmp	.+20     	; 0x214 <puts_usart+0x28>
		putchar_usart(string[i]);
 200:	e2 0f       	add	r30, r18
 202:	f3 1f       	adc	r31, r19
 204:	40 81       	ld	r20, Z

//Permet l'envoi d'un caractère
void putchar_usart(char c)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1<<UDRE0)));
 206:	80 91 c0 00 	lds	r24, 0x00C0
 20a:	85 ff       	sbrs	r24, 5
 20c:	fc cf       	rjmp	.-8      	; 0x206 <puts_usart+0x1a>
	/* Put data into buffer, sends the data */
	UDR0 = c;
 20e:	40 93 c6 00 	sts	0x00C6, r20
//Permet d'écrire une chaine de caractère sur l'usart
void puts_usart(char string[])
{
	unsigned char i;

	for(i=0; i<strlen(string); i++)
 212:	9f 5f       	subi	r25, 0xFF	; 255
 214:	e9 2f       	mov	r30, r25
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	ea 17       	cp	r30, r26
 21a:	fb 07       	cpc	r31, r27
 21c:	88 f3       	brcs	.-30     	; 0x200 <puts_usart+0x14>
		putchar_usart(string[i]);
}
 21e:	08 95       	ret

00000220 <get_ballast_position2>:
unsigned int get_ballast_position2(void)
{
#ifdef U_BOAT
	return ((((unsigned long)get_value_ADC1() - ADC_VAL_MIN) * 1023) / ADC_DELTA_VAL);
#else
	return (((unsigned long)get_position2() * 1023) / MAX_IMPULSION);
 220:	b0 d2       	rcall	.+1376   	; 0x782 <get_position2>
 222:	a0 e0       	ldi	r26, 0x00	; 0
 224:	b0 e0       	ldi	r27, 0x00	; 0
 226:	bc 01       	movw	r22, r24
 228:	cd 01       	movw	r24, r26
 22a:	2f ef       	ldi	r18, 0xFF	; 255
 22c:	33 e0       	ldi	r19, 0x03	; 3
 22e:	40 e0       	ldi	r20, 0x00	; 0
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	7f d3       	rcall	.+1790   	; 0x932 <__mulsi3>
 234:	23 e7       	ldi	r18, 0x73	; 115
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	99 d3       	rcall	.+1842   	; 0x970 <__udivmodsi4>
 23e:	c9 01       	movw	r24, r18
#endif
}
 240:	08 95       	ret

00000242 <get_ballast_position1>:
unsigned int get_ballast_position1(void)
{
#ifdef U_BOAT
	return ((((unsigned long)get_value_ADC0() - ADC_VAL_MIN) * 1023) / ADC_DELTA_VAL);
#else
	return (((unsigned long)get_position1() * 1023) / MAX_IMPULSION);
 242:	99 d2       	rcall	.+1330   	; 0x776 <get_position1>
 244:	a0 e0       	ldi	r26, 0x00	; 0
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	bc 01       	movw	r22, r24
 24a:	cd 01       	movw	r24, r26
 24c:	2f ef       	ldi	r18, 0xFF	; 255
 24e:	33 e0       	ldi	r19, 0x03	; 3
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	6e d3       	rcall	.+1756   	; 0x932 <__mulsi3>
 256:	23 e7       	ldi	r18, 0x73	; 115
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	50 e0       	ldi	r21, 0x00	; 0
 25e:	88 d3       	rcall	.+1808   	; 0x970 <__udivmodsi4>
 260:	c9 01       	movw	r24, r18
#endif
}
 262:	08 95       	ret

00000264 <init_ballast_position>:
//Pour le U_BOAT utilisation de l'adc
#ifdef U_BOAT
	init_adc();
#else
//Pour le nouveau sous-marin, on utilise la fourche optique en comptant le nombre d'impulsion
	init_external_interrupt();
 264:	77 d2       	rcall	.+1262   	; 0x754 <init_external_interrupt>
#endif
}
 266:	08 95       	ret

00000268 <init_io>:
}

void init_io(void)
{
	//OUT : enable motor
	DDRD |= (1<<DDD4) | (1<<DDD7);
 268:	8a b1       	in	r24, 0x0a	; 10
 26a:	80 69       	ori	r24, 0x90	; 144
 26c:	8a b9       	out	0x0a, r24	; 10

	//OUT : Rotation motor
	DDRC |= (1<<DDC2) | (1<<DDC3);
 26e:	87 b1       	in	r24, 0x07	; 7
 270:	8c 60       	ori	r24, 0x0C	; 12
 272:	87 b9       	out	0x07, r24	; 7

	//IN  : FC motor (Sur interruption PCINT0)
	PCMSK0 |= (1<<PCINT1) | (1<<PCINT2) | (1<<PCINT6) | (1<<PCINT7);
 274:	80 91 6b 00 	lds	r24, 0x006B
 278:	86 6c       	ori	r24, 0xC6	; 198
 27a:	80 93 6b 00 	sts	0x006B, r24
	PCICR |= (1<<PCIE0);
 27e:	80 91 68 00 	lds	r24, 0x0068
 282:	81 60       	ori	r24, 0x01	; 1
 284:	80 93 68 00 	sts	0x0068, r24

	//Initialisation des fins de course
	if((PINB & 0b00000010) != 0b00000010)
 288:	19 99       	sbic	0x03, 1	; 3
 28a:	02 c0       	rjmp	.+4      	; 0x290 <init_io+0x28>
		fc11 = TRUE;
 28c:	10 92 00 01 	sts	0x0100, r1
	if((PINB & 0b00000100) != 0b00000100)
 290:	1a 99       	sbic	0x03, 2	; 3
 292:	02 c0       	rjmp	.+4      	; 0x298 <init_io+0x30>
		fc12 = TRUE;
 294:	10 92 01 01 	sts	0x0101, r1
	if((PINB & 0b01000000) != 0b01000000)
 298:	1e 99       	sbic	0x03, 6	; 3
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <init_io+0x38>
		fc21 = TRUE;
 29c:	10 92 02 01 	sts	0x0102, r1
	if((PINB & 0b10000000) != 0b10000000)
 2a0:	1f 99       	sbic	0x03, 7	; 3
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <init_io+0x40>
		fc22 = TRUE;
 2a4:	10 92 03 01 	sts	0x0103, r1

	prev_PINB = PINB;
 2a8:	83 b1       	in	r24, 0x03	; 3
 2aa:	80 93 0a 01 	sts	0x010A, r24
}
 2ae:	08 95       	ret

000002b0 <enable_motor1>:

//Fonction d'activation du moteur 1
//Paramètre : TRUE ou FALSE
void enable_motor1(unsigned char value)
{
	if(value == TRUE)
 2b0:	88 23       	and	r24, r24
 2b2:	11 f4       	brne	.+4      	; 0x2b8 <enable_motor1+0x8>
		PORTD |= (1<<PORTD4);
 2b4:	5c 9a       	sbi	0x0b, 4	; 11
 2b6:	08 95       	ret
	else
		PORTD &= 0b11101111;
 2b8:	5c 98       	cbi	0x0b, 4	; 11
 2ba:	08 95       	ret

000002bc <enable_motor2>:

//Fonction d'activation du moteur 2
//Paramètre : TRUE ou FALSE
void enable_motor2(unsigned char value)
{
	if(value == TRUE)
 2bc:	88 23       	and	r24, r24
 2be:	11 f4       	brne	.+4      	; 0x2c4 <enable_motor2+0x8>
		PORTD |= (1<<PORTD7);	
 2c0:	5f 9a       	sbi	0x0b, 7	; 11
 2c2:	08 95       	ret
	else
		PORTD &= 0b01111111;
 2c4:	5f 98       	cbi	0x0b, 7	; 11
 2c6:	08 95       	ret

000002c8 <rotation_motor1>:

//Fonction pour définir le sens de rotation du moteur 1
//Paramètre : CLOCKWISE OU COUNTERCLOCKWISE
void rotation_motor1(unsigned char value)
{
	if(value == CLOCKWISE)
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	11 f4       	brne	.+4      	; 0x2d0 <rotation_motor1+0x8>
		PORTC |= (1<<PORTC2);
 2cc:	42 9a       	sbi	0x08, 2	; 8
 2ce:	08 95       	ret
	else
		PORTC &= 0b11111011;
 2d0:	42 98       	cbi	0x08, 2	; 8
 2d2:	08 95       	ret

000002d4 <rotation_motor2>:

//Fonction pour définir le sens de rotation du moteur 2
//Paramètre : CLOCKWISE OU COUNTERCLOCKWISE
void rotation_motor2(unsigned char value)
{
	if(value == CLOCKWISE)
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	11 f4       	brne	.+4      	; 0x2dc <rotation_motor2+0x8>
		PORTC |= (1<<PORTC3);
 2d8:	43 9a       	sbi	0x08, 3	; 8
 2da:	08 95       	ret
	else
		PORTC &= 0b11110111;
 2dc:	43 98       	cbi	0x08, 3	; 8
 2de:	08 95       	ret

000002e0 <get_rotation_motor1>:

//Fonction pour obtenir le sens de rotation du moteur 1
//Utile pour incrémenter ou décrémenter la position du ballast en fonction des impulsions
unsigned char get_rotation_motor1(void)
{
	if((PORTC & 0b00000100) == 0b00000100)
 2e0:	88 b1       	in	r24, 0x08	; 8
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	96 95       	lsr	r25
 2e6:	87 95       	ror	r24
 2e8:	96 95       	lsr	r25
 2ea:	87 95       	ror	r24
		return CLOCKWISE;
	else
		return COUNTERCLOCKWISE;
}
 2ec:	81 70       	andi	r24, 0x01	; 1
 2ee:	08 95       	ret

000002f0 <get_rotation_motor2>:

//Fonction pour obtenir le sens de rotation du moteur 2
//Utile pour incrémenter ou décrémenter la position du ballast en fonction des impulsions
unsigned char get_rotation_motor2(void)
{
	if((PORTC & 0b00001000) == 0b00001000)
 2f0:	88 b1       	in	r24, 0x08	; 8
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	33 e0       	ldi	r19, 0x03	; 3
 2f6:	96 95       	lsr	r25
 2f8:	87 95       	ror	r24
 2fa:	3a 95       	dec	r19
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <get_rotation_motor2+0x6>
		return CLOCKWISE;
	else
		return COUNTERCLOCKWISE;
}
 2fe:	81 70       	andi	r24, 0x01	; 1
 300:	08 95       	ret

00000302 <set_speed_motor1>:

//Fonction pour définir la vitesse du moteur 1
//Paramètres : duty_cycle de 0 à 255
void set_speed_motor1(unsigned char duty_cycle)
{
	OCR0A = duty_cycle;
 302:	87 bd       	out	0x27, r24	; 39
}
 304:	08 95       	ret

00000306 <set_speed_motor2>:

//Fonction pour définir la vitesse du moteur 2
//Paramètres : duty_cycle de 0 à 255
void set_speed_motor2(unsigned char duty_cycle)
{
	OCR0B = duty_cycle;
 306:	88 bd       	out	0x28, r24	; 40
}
 308:	08 95       	ret

0000030a <__vector_3>:

//Interruption pour la detection des fins de course
ISR(PCINT0_vect)
{
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	8f 93       	push	r24
 316:	9f 93       	push	r25
	//Détermine les changements d'états sur les entrées du PORTB
	switch(prev_PINB ^ PINB)
 318:	80 91 0a 01 	lds	r24, 0x010A
 31c:	93 b1       	in	r25, 0x03	; 3
 31e:	98 27       	eor	r25, r24
 320:	92 34       	cpi	r25, 0x42	; 66
 322:	a1 f1       	breq	.+104    	; 0x38c <__vector_3+0x82>
 324:	93 34       	cpi	r25, 0x43	; 67
 326:	48 f4       	brcc	.+18     	; 0x33a <__vector_3+0x30>
 328:	94 30       	cpi	r25, 0x04	; 4
 32a:	09 f4       	brne	.+2      	; 0x32e <__vector_3+0x24>
 32c:	54 c0       	rjmp	.+168    	; 0x3d6 <__vector_3+0xcc>
 32e:	90 34       	cpi	r25, 0x40	; 64
 330:	c9 f1       	breq	.+114    	; 0x3a4 <__vector_3+0x9a>
 332:	92 30       	cpi	r25, 0x02	; 2
 334:	09 f0       	breq	.+2      	; 0x338 <__vector_3+0x2e>
 336:	74 c0       	rjmp	.+232    	; 0x420 <__vector_3+0x116>
 338:	0f c0       	rjmp	.+30     	; 0x358 <__vector_3+0x4e>
 33a:	90 38       	cpi	r25, 0x80	; 128
 33c:	09 f4       	brne	.+2      	; 0x340 <__vector_3+0x36>
 33e:	64 c0       	rjmp	.+200    	; 0x408 <__vector_3+0xfe>
 340:	91 38       	cpi	r25, 0x81	; 129
 342:	20 f4       	brcc	.+8      	; 0x34c <__vector_3+0x42>
 344:	94 34       	cpi	r25, 0x44	; 68
 346:	09 f0       	breq	.+2      	; 0x34a <__vector_3+0x40>
 348:	6b c0       	rjmp	.+214    	; 0x420 <__vector_3+0x116>
 34a:	39 c0       	rjmp	.+114    	; 0x3be <__vector_3+0xb4>
 34c:	92 38       	cpi	r25, 0x82	; 130
 34e:	89 f0       	breq	.+34     	; 0x372 <__vector_3+0x68>
 350:	94 38       	cpi	r25, 0x84	; 132
 352:	09 f0       	breq	.+2      	; 0x356 <__vector_3+0x4c>
 354:	65 c0       	rjmp	.+202    	; 0x420 <__vector_3+0x116>
 356:	4c c0       	rjmp	.+152    	; 0x3f0 <__vector_3+0xe6>
	{
		//Fin de course fc11 actionné
		case 0b00000010 :
			if(((PINB & 0b00000010) != 0b00000010) && (fc11 == FALSE))
 358:	19 99       	sbic	0x03, 1	; 3
 35a:	07 c0       	rjmp	.+14     	; 0x36a <__vector_3+0x60>
 35c:	80 91 00 01 	lds	r24, 0x0100
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	19 f4       	brne	.+6      	; 0x36a <__vector_3+0x60>
#ifdef DEBUG_MOTOR
				puts_usart("fc11 = TRUE");
				putchar_usart(0x0d);
				putchar_usart(0x0a);
#endif
				fc11 = TRUE;
 364:	10 92 00 01 	sts	0x0100, r1
 368:	5b c0       	rjmp	.+182    	; 0x420 <__vector_3+0x116>
#ifdef DEBUG_MOTOR
				puts_usart("fc11 = FALSE");
				putchar_usart(0x0d);
				putchar_usart(0x0a);
#endif
				fc11 = FALSE;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	80 93 00 01 	sts	0x0100, r24
 370:	57 c0       	rjmp	.+174    	; 0x420 <__vector_3+0x116>
			}
			break;

		//Fin de course fc11 et fc22 actionnés en même temps
		case 0b10000010 :
			if(((PINB & 0b00000010) != 0b00000010) && (fc11 == FALSE))
 372:	19 99       	sbic	0x03, 1	; 3
 374:	07 c0       	rjmp	.+14     	; 0x384 <__vector_3+0x7a>
 376:	80 91 00 01 	lds	r24, 0x0100
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	19 f4       	brne	.+6      	; 0x384 <__vector_3+0x7a>
#ifdef DEBUG_MOTOR
				puts_usart("fc11 = TRUE");
				putchar_usart(0x0d);
				putchar_usart(0x0a);
#endif
				fc11 = TRUE;
 37e:	10 92 00 01 	sts	0x0100, r1
 382:	42 c0       	rjmp	.+132    	; 0x408 <__vector_3+0xfe>
#ifdef DEBUG_MOTOR
				puts_usart("fc11 = FALSE");
				putchar_usart(0x0d);
				putchar_usart(0x0a);
#endif
				fc11 = FALSE;
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	80 93 00 01 	sts	0x0100, r24
 38a:	3e c0       	rjmp	.+124    	; 0x408 <__vector_3+0xfe>
			}
			break;

		//Fin de course fc11 et fc21 actionnés en même temps
		case 0b01000010 :
			if(((PINB & 0b00000010) != 0b00000010) && (fc11 == FALSE))
 38c:	19 99       	sbic	0x03, 1	; 3
 38e:	07 c0       	rjmp	.+14     	; 0x39e <__vector_3+0x94>
 390:	80 91 00 01 	lds	r24, 0x0100
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	19 f4       	brne	.+6      	; 0x39e <__vector_3+0x94>
#ifdef DEBUG_MOTOR
				puts_usart("fc11 = TRUE");
				putchar_usart(0x0d);
				putchar_usart(0x0a);
#endif
				fc11 = TRUE;
 398:	10 92 00 01 	sts	0x0100, r1
 39c:	03 c0       	rjmp	.+6      	; 0x3a4 <__vector_3+0x9a>
#ifdef DEBUG_MOTOR
				puts_usart("fc11 = FALSE");
				putchar_usart(0x0d);
				putchar_usart(0x0a);
#endif
				fc11 = FALSE;
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	80 93 00 01 	sts	0x0100, r24
			}

			if(((PINB & 0b01000000) != 0b01000000) && (fc21 == FALSE))
 3a4:	1e 99       	sbic	0x03, 6	; 3
 3a6:	07 c0       	rjmp	.+14     	; 0x3b6 <__vector_3+0xac>
 3a8:	80 91 02 01 	lds	r24, 0x0102
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	19 f4       	brne	.+6      	; 0x3b6 <__vector_3+0xac>
#ifdef DEBUG_MOTOR
				puts_usart("fc21 = TRUE");
				putchar_usart(0x0d);
				putchar_usart(0x0a);
#endif
				fc21 = TRUE;
 3b0:	10 92 02 01 	sts	0x0102, r1
 3b4:	35 c0       	rjmp	.+106    	; 0x420 <__vector_3+0x116>
#ifdef DEBUG_MOTOR
				puts_usart("fc21 = FALSE");
				putchar_usart(0x0d);
				putchar_usart(0x0a);
#endif
				fc21 = FALSE;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	80 93 02 01 	sts	0x0102, r24
 3bc:	31 c0       	rjmp	.+98     	; 0x420 <__vector_3+0x116>
			}
			break;

		//Fin de course fc21 et fc12 actionnés en même temps
		case 0b01000100 :
			if(((PINB & 0b01000000) != 0b01000000) && (fc21 == FALSE))
 3be:	1e 99       	sbic	0x03, 6	; 3
 3c0:	07 c0       	rjmp	.+14     	; 0x3d0 <__vector_3+0xc6>
 3c2:	80 91 02 01 	lds	r24, 0x0102
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	19 f4       	brne	.+6      	; 0x3d0 <__vector_3+0xc6>
#ifdef DEBUG_MOTOR
				puts_usart("fc21 = TRUE");
				putchar_usart(0x0d);
				putchar_usart(0x0a);
#endif
				fc21 = TRUE;
 3ca:	10 92 02 01 	sts	0x0102, r1
 3ce:	03 c0       	rjmp	.+6      	; 0x3d6 <__vector_3+0xcc>
#ifdef DEBUG_MOTOR
				puts_usart("fc21 = FALSE");
				putchar_usart(0x0d);
				putchar_usart(0x0a);
#endif
				fc21 = FALSE;
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	80 93 02 01 	sts	0x0102, r24
			}

			if(((PINB & 0b00000100) != 0b00000100) && (fc12 == FALSE))
 3d6:	1a 99       	sbic	0x03, 2	; 3
 3d8:	07 c0       	rjmp	.+14     	; 0x3e8 <__vector_3+0xde>
 3da:	80 91 01 01 	lds	r24, 0x0101
 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	19 f4       	brne	.+6      	; 0x3e8 <__vector_3+0xde>
#ifdef DEBUG_MOTOR
				puts_usart("fc12 = TRUE");
				putchar_usart(0x0d);
				putchar_usart(0x0a);
#endif
				fc12 = TRUE;
 3e2:	10 92 01 01 	sts	0x0101, r1
 3e6:	1c c0       	rjmp	.+56     	; 0x420 <__vector_3+0x116>
#ifdef DEBUG_MOTOR
				puts_usart("fc12 = FALSE");
				putchar_usart(0x0d);
				putchar_usart(0x0a);
#endif
				fc12 = FALSE;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	80 93 01 01 	sts	0x0101, r24
 3ee:	18 c0       	rjmp	.+48     	; 0x420 <__vector_3+0x116>
			}
			break;

		//Fin de course fc12 et fc22 actionnés en même temps
		case 0b10000100 :
			if(((PINB & 0b00000100) != 0b00000100) && (fc12 == FALSE))
 3f0:	1a 99       	sbic	0x03, 2	; 3
 3f2:	07 c0       	rjmp	.+14     	; 0x402 <__vector_3+0xf8>
 3f4:	80 91 01 01 	lds	r24, 0x0101
 3f8:	81 30       	cpi	r24, 0x01	; 1
 3fa:	19 f4       	brne	.+6      	; 0x402 <__vector_3+0xf8>
#ifdef DEBUG_MOTOR
				puts_usart("fc12 = TRUE");
				putchar_usart(0x0d);
				putchar_usart(0x0a);
#endif
				fc12 = TRUE;
 3fc:	10 92 01 01 	sts	0x0101, r1
 400:	03 c0       	rjmp	.+6      	; 0x408 <__vector_3+0xfe>
#ifdef DEBUG_MOTOR
				puts_usart("fc12 = FALSE");
				putchar_usart(0x0d);
				putchar_usart(0x0a);
#endif
				fc12 = FALSE;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	80 93 01 01 	sts	0x0101, r24
			}

			if(((PINB & 0b10000000) != 0b10000000) && (fc22 == FALSE))
 408:	1f 99       	sbic	0x03, 7	; 3
 40a:	07 c0       	rjmp	.+14     	; 0x41a <__vector_3+0x110>
 40c:	80 91 03 01 	lds	r24, 0x0103
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	19 f4       	brne	.+6      	; 0x41a <__vector_3+0x110>
#ifdef DEBUG_MOTOR
				puts_usart("fc22 = TRUE");
				putchar_usart(0x0d);
				putchar_usart(0x0a);
#endif
				fc22 = TRUE;
 414:	10 92 03 01 	sts	0x0103, r1
 418:	03 c0       	rjmp	.+6      	; 0x420 <__vector_3+0x116>
#ifdef DEBUG_MOTOR
				puts_usart("fc22 = FALSE");
				putchar_usart(0x0d);
				putchar_usart(0x0a);
#endif
				fc22 = FALSE;
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	80 93 03 01 	sts	0x0103, r24
			}
			break;
	}
	prev_PINB = PINB;
 420:	83 b1       	in	r24, 0x03	; 3
 422:	80 93 0a 01 	sts	0x010A, r24
}
 426:	9f 91       	pop	r25
 428:	8f 91       	pop	r24
 42a:	0f 90       	pop	r0
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	0f 90       	pop	r0
 430:	1f 90       	pop	r1
 432:	18 95       	reti

00000434 <init_motor_driver>:
//Variable de sauvegarde de l'état précédent de PINB
volatile unsigned char prev_PINB;

void init_motor_driver(void)
{
	init_io();
 434:	19 df       	rcall	.-462    	; 0x268 <init_io>
	init_pwm();
 436:	10 d0       	rcall	.+32     	; 0x458 <init_pwm>
//Fonction d'activation du moteur 1
//Paramètre : TRUE ou FALSE
void enable_motor1(unsigned char value)
{
	if(value == TRUE)
		PORTD |= (1<<PORTD4);
 438:	5c 9a       	sbi	0x0b, 4	; 11
//Fonction d'activation du moteur 2
//Paramètre : TRUE ou FALSE
void enable_motor2(unsigned char value)
{
	if(value == TRUE)
		PORTD |= (1<<PORTD7);	
 43a:	5f 9a       	sbi	0x0b, 7	; 11
void rotation_motor1(unsigned char value)
{
	if(value == CLOCKWISE)
		PORTC |= (1<<PORTC2);
	else
		PORTC &= 0b11111011;
 43c:	42 98       	cbi	0x08, 2	; 8
void rotation_motor2(unsigned char value)
{
	if(value == CLOCKWISE)
		PORTC |= (1<<PORTC3);
	else
		PORTC &= 0b11110111;
 43e:	43 98       	cbi	0x08, 3	; 8

//Fonction pour définir la vitesse du moteur 1
//Paramètres : duty_cycle de 0 à 255
void set_speed_motor1(unsigned char duty_cycle)
{
	OCR0A = duty_cycle;
 440:	8f ef       	ldi	r24, 0xFF	; 255
 442:	87 bd       	out	0x27, r24	; 39

//Fonction pour définir la vitesse du moteur 2
//Paramètres : duty_cycle de 0 à 255
void set_speed_motor2(unsigned char duty_cycle)
{
	OCR0B = duty_cycle;
 444:	88 bd       	out	0x28, r24	; 40

//	while((fc11 == FALSE) || (fc21 == FALSE)); //A décommenter en reel !
// 	OU
//	while((fc12 != FALSE) || (fc22 != FALSE)); //A décommenter en reel !

	while(fc22 != FALSE); //Fin de course Moteur 'M' vidage ballast
 446:	80 91 03 01 	lds	r24, 0x0103
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	e1 f7       	brne	.-8      	; 0x446 <init_motor_driver+0x12>
void enable_motor1(unsigned char value)
{
	if(value == TRUE)
		PORTD |= (1<<PORTD4);
	else
		PORTD &= 0b11101111;
 44e:	5c 98       	cbi	0x0b, 4	; 11
void enable_motor2(unsigned char value)
{
	if(value == TRUE)
		PORTD |= (1<<PORTD7);	
	else
		PORTD &= 0b01111111;
 450:	5f 98       	cbi	0x0b, 7	; 11

//Fonction pour définir la vitesse du moteur 1
//Paramètres : duty_cycle de 0 à 255
void set_speed_motor1(unsigned char duty_cycle)
{
	OCR0A = duty_cycle;
 452:	17 bc       	out	0x27, r1	; 39

//Fonction pour définir la vitesse du moteur 2
//Paramètres : duty_cycle de 0 à 255
void set_speed_motor2(unsigned char duty_cycle)
{
	OCR0B = duty_cycle;
 454:	18 bc       	out	0x28, r1	; 40
	enable_motor2(FALSE);

	//Mise à 0 de la vitesse des moteurs
	set_speed_motor1(0);
	set_speed_motor2(0);
}
 456:	08 95       	ret

00000458 <init_pwm>:

//Génère le PWM sur les sorties OC0A ET OC0B
void init_pwm(void)
{
	//Config Timer 0
	DDRD |= (1<<DDD5) | (1<<DDD6);	//OC0A OC0B
 458:	8a b1       	in	r24, 0x0a	; 10
 45a:	80 66       	ori	r24, 0x60	; 96
 45c:	8a b9       	out	0x0a, r24	; 10
	TCCR0A |= /*(1<<COM0A0) |*/ (1<<COM0A1) /*| (1<<COM0B0)*/ | (1<<COM0B1) | (1<<WGM01) | (1<<WGM00);  //Fast-PWM mode 3
 45e:	84 b5       	in	r24, 0x24	; 36
 460:	83 6a       	ori	r24, 0xA3	; 163
 462:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00);   //Run - No-prescaler
 464:	85 b5       	in	r24, 0x25	; 37
 466:	81 60       	ori	r24, 0x01	; 1
 468:	85 bd       	out	0x25, r24	; 37
}
 46a:	08 95       	ret

0000046c <process_bcc_3964r>:
//Permet de pré-calculer le bcc avant l'envoi d'une trame
//Paramètres : - data[] => tableau à envoyer par le protocole
//			   - lenght => longueur du tableau data[]
//Valeur de retour : - le bcc pré-calculé
char process_bcc_3964r(char data[], unsigned char lenght)
{
 46c:	fc 01       	movw	r30, r24
 46e:	92 e0       	ldi	r25, 0x02	; 2
 470:	20 e0       	ldi	r18, 0x00	; 0
 472:	07 c0       	rjmp	.+14     	; 0x482 <process_bcc_3964r+0x16>
	unsigned char bcc = 0, i;

	bcc ^= STX;
	for(i=0; i<lenght; i++)
	{
		bcc ^= data[i];
 474:	80 81       	ld	r24, Z
 476:	98 27       	eor	r25, r24
		//On compte un double DLE
		if(data[i] == DLE)
 478:	80 31       	cpi	r24, 0x10	; 16
 47a:	09 f4       	brne	.+2      	; 0x47e <process_bcc_3964r+0x12>
			bcc ^= DLE;
 47c:	98 27       	eor	r25, r24
char process_bcc_3964r(char data[], unsigned char lenght)
{
	unsigned char bcc = 0, i;

	bcc ^= STX;
	for(i=0; i<lenght; i++)
 47e:	2f 5f       	subi	r18, 0xFF	; 255
 480:	31 96       	adiw	r30, 0x01	; 1
 482:	26 17       	cp	r18, r22
 484:	b8 f3       	brcs	.-18     	; 0x474 <process_bcc_3964r+0x8>
	}
	bcc ^= DLE;
	bcc ^= ETX;

	return bcc;
}
 486:	83 e1       	ldi	r24, 0x13	; 19
 488:	89 27       	eor	r24, r25
 48a:	08 95       	ret

0000048c <sum_error_3964r>:
char sum_error_3964r(void)
{
	unsigned char sum, i;

	for(i=0, sum=0; i<NB_ERRORS; i++)
		sum += tab_error_3964r[i];
 48c:	80 91 0c 01 	lds	r24, 0x010C
 490:	90 91 0b 01 	lds	r25, 0x010B
 494:	89 0f       	add	r24, r25
 496:	90 91 0d 01 	lds	r25, 0x010D
 49a:	89 0f       	add	r24, r25
 49c:	90 91 0e 01 	lds	r25, 0x010E
 4a0:	89 0f       	add	r24, r25
 4a2:	90 91 0f 01 	lds	r25, 0x010F

	return sum;
}
 4a6:	89 0f       	add	r24, r25
 4a8:	08 95       	ret

000004aa <get_data_3964r>:
//Fonction get_data_3964r
//Recoi des données sur le protocole 3964 par le port série
//Paramètres : - data[] => tableau qui va recevoir les données par le protocole
//Valeur de retour : Aucune
void get_data_3964r(char data[])
{
 4aa:	9f 92       	push	r9
 4ac:	af 92       	push	r10
 4ae:	bf 92       	push	r11
 4b0:	cf 92       	push	r12
 4b2:	df 92       	push	r13
 4b4:	ef 92       	push	r14
 4b6:	ff 92       	push	r15
 4b8:	0f 93       	push	r16
 4ba:	1f 93       	push	r17
 4bc:	df 93       	push	r29
 4be:	cf 93       	push	r28
 4c0:	00 d0       	rcall	.+0      	; 0x4c2 <get_data_3964r+0x18>
 4c2:	0f 92       	push	r0
 4c4:	cd b7       	in	r28, 0x3d	; 61
 4c6:	de b7       	in	r29, 0x3e	; 62
 4c8:	6c 01       	movw	r12, r24
	do
	{
		//Initialisation des variables
		i = 0;
		prev_c = 0;
		flag_timer1 = FALSE;
 4ca:	99 24       	eor	r9, r9
 4cc:	93 94       	inc	r9
		flag_error	= FALSE;
		//Initialise le tableau flag_dle avec la valeur FALSE
		memset(flag_dle,FALSE,3);
 4ce:	5e 01       	movw	r10, r28
 4d0:	08 94       	sec
 4d2:	a1 1c       	adc	r10, r1
 4d4:	b1 1c       	adc	r11, r1
	do
	{
		//Initialisation des variables
		i = 0;
		prev_c = 0;
		flag_timer1 = FALSE;
 4d6:	90 92 09 01 	sts	0x0109, r9
		flag_error	= FALSE;
		//Initialise le tableau flag_dle avec la valeur FALSE
		memset(flag_dle,FALSE,3);
 4da:	c5 01       	movw	r24, r10
 4dc:	61 e0       	ldi	r22, 0x01	; 1
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	43 e0       	ldi	r20, 0x03	; 3
 4e2:	50 e0       	ldi	r21, 0x00	; 0
 4e4:	67 d2       	rcall	.+1230   	; 0x9b4 <memset>
	
		//On attend de recevoir un caractère
		c = getchar_usart();
 4e6:	59 de       	rcall	.-846    	; 0x19a <getchar_usart>

		//Si on reçoi un STX
		if(c == STX)
 4e8:	82 30       	cpi	r24, 0x02	; 2
 4ea:	09 f0       	breq	.+2      	; 0x4ee <get_data_3964r+0x44>
 4ec:	55 c0       	rjmp	.+170    	; 0x598 <__stack+0x99>
		{
			//Calcul du bcc
			bcc = STX;

			//On répond DLE
			putchar_usart(DLE);
 4ee:	80 e1       	ldi	r24, 0x10	; 16
 4f0:	4c de       	rcall	.-872    	; 0x18a <putchar_usart>
 4f2:	ff 24       	eor	r15, r15
 4f4:	10 e0       	ldi	r17, 0x00	; 0
 4f6:	82 e0       	ldi	r24, 0x02	; 2
 4f8:	e8 2e       	mov	r14, r24

			//Début de la boucle de réception
			do
			{
				//Démarrage du timer avec la valeur de timeout TIMEOUT_MS
				start_timer1(TIMEOUT_MS);
 4fa:	80 e1       	ldi	r24, 0x10	; 16
 4fc:	97 e2       	ldi	r25, 0x27	; 39
 4fe:	bd d1       	rcall	.+890    	; 0x87a <start_timer1>
				//Attend de recoir un caractère
				//Passage à l'instruction suivant si le timeout est déclenché (flag_timer1 == TRUE)
				c = getchar_usart();
 500:	4c de       	rcall	.-872    	; 0x19a <getchar_usart>
 502:	08 2f       	mov	r16, r24
				//Stop le timer1
				stop_timer1();
 504:	c6 d1       	rcall	.+908    	; 0x892 <stop_timer1>

				//Si le timeout n'a pas expiré
				if(flag_timer1 == FALSE)
 506:	90 91 09 01 	lds	r25, 0x0109
 50a:	91 30       	cpi	r25, 0x01	; 1
 50c:	41 f5       	brne	.+80     	; 0x55e <__stack+0x5f>
				{
					//Calcul du bcc					
					bcc ^= c;
 50e:	e0 26       	eor	r14, r16
					//Machine d'état pour le contrôle des double DLE
					//Cette machine d'état permet de différencier 
					//les doubles DLE et le DLE de terminaison des données utiles.

					//Si le caractère précédent est différent d'un DLE et que le caractère reçu est un DLE
					if((prev_c != DLE) && (c == DLE))
 510:	80 e1       	ldi	r24, 0x10	; 16
 512:	f8 16       	cp	r15, r24
 514:	19 f0       	breq	.+6      	; 0x51c <__stack+0x1d>
 516:	00 31       	cpi	r16, 0x10	; 16
 518:	a9 f4       	brne	.+42     	; 0x544 <__stack+0x45>
 51a:	0d c0       	rjmp	.+26     	; 0x536 <__stack+0x37>
						flag_dle[2] = FALSE;
					}
					else
					{
						//Si on est en présence d'un double DLE
						if((prev_c == DLE) && (c == DLE))
 51c:	00 31       	cpi	r16, 0x10	; 16
 51e:	79 f4       	brne	.+30     	; 0x53e <__stack+0x3f>
						{
							//Vérification d'état (1er passage)
							if(flag_dle[1] == FALSE)
 520:	8a 81       	ldd	r24, Y+2	; 0x02
 522:	81 30       	cpi	r24, 0x01	; 1
 524:	41 f4       	brne	.+16     	; 0x536 <__stack+0x37>
							{
								//Mise à jour des états
								flag_dle[0] = FALSE;
 526:	89 83       	std	Y+1, r24	; 0x01
								flag_dle[1] = TRUE;
 528:	1a 82       	std	Y+2, r1	; 0x02
								flag_dle[2] = FALSE;
 52a:	8b 83       	std	Y+3, r24	; 0x03
								
								//Place la valeur DLE dans le tabeau data
								data[i] = DLE;
 52c:	f6 01       	movw	r30, r12
 52e:	e1 0f       	add	r30, r17
 530:	f1 1d       	adc	r31, r1
 532:	f0 82       	st	Z, r15
 534:	0e c0       	rjmp	.+28     	; 0x552 <__stack+0x53>
							}
							//Si 3 DLE consécutifs
							else
							{
								//Mise à jour des états
								flag_dle[0] = TRUE;
 536:	19 82       	std	Y+1, r1	; 0x01
								flag_dle[1] = FALSE;
 538:	9a 83       	std	Y+2, r25	; 0x02
								flag_dle[2] = FALSE;
 53a:	9b 83       	std	Y+3, r25	; 0x03
 53c:	0b c0       	rjmp	.+22     	; 0x554 <__stack+0x55>
						{
							//Si le caractère présent est différent de DLE mais que le précédent est un DLE
							if((prev_c == DLE) && (c != DLE))
							{
								//Mise à jour des états
								flag_dle[1] = FALSE;
 53e:	9a 83       	std	Y+2, r25	; 0x02
								flag_dle[2] = TRUE;
 540:	1b 82       	std	Y+3, r1	; 0x03
 542:	03 c0       	rjmp	.+6      	; 0x54a <__stack+0x4b>
							}

							else
							{
								//Mise à jour des états
								flag_dle[0] = FALSE;
 544:	99 83       	std	Y+1, r25	; 0x01
								flag_dle[1] = FALSE;
 546:	9a 83       	std	Y+2, r25	; 0x02
								flag_dle[2] = FALSE;
 548:	9b 83       	std	Y+3, r25	; 0x03
								
								//Place la valeur c dans le tabeau data
								data[i] = c;
 54a:	f6 01       	movw	r30, r12
 54c:	e1 0f       	add	r30, r17
 54e:	f1 1d       	adc	r31, r1
 550:	00 83       	st	Z, r16
								//Incrémentation de l'indice du tableau
								i++;
 552:	1f 5f       	subi	r17, 0xFF	; 255
 554:	f0 2e       	mov	r15, r16
					putchar_usart(NAK);
					//Sort de la boucle de reception
					break;
				}
			//On continue de recevoir des caractères tant que on a pas déterminer le DLE de terminaison
			}while(!((flag_dle[0] == TRUE) && (flag_dle[2] == TRUE)));
 556:	89 81       	ldd	r24, Y+1	; 0x01
 558:	88 23       	and	r24, r24
 55a:	79 f6       	brne	.-98     	; 0x4fa <get_data_3964r+0x50>
 55c:	03 c0       	rjmp	.+6      	; 0x564 <__stack+0x65>
				}
				//Si le timeout a expiré
				else
				{
					//Envoi du caractère NAK
					putchar_usart(NAK);
 55e:	85 e1       	ldi	r24, 0x15	; 21
 560:	14 de       	rcall	.-984    	; 0x18a <putchar_usart>
 562:	04 c0       	rjmp	.+8      	; 0x56c <__stack+0x6d>
					//Sort de la boucle de reception
					break;
 564:	f0 2e       	mov	r15, r16
				}
			//On continue de recevoir des caractères tant que on a pas déterminer le DLE de terminaison
			}while(!((flag_dle[0] == TRUE) && (flag_dle[2] == TRUE)));
 566:	8b 81       	ldd	r24, Y+3	; 0x03
 568:	88 23       	and	r24, r24
 56a:	39 f6       	brne	.-114    	; 0x4fa <get_data_3964r+0x50>

			//Si le timeout n'a pas expiré
			if(flag_timer1 == FALSE)
 56c:	80 91 09 01 	lds	r24, 0x0109
 570:	81 30       	cpi	r24, 0x01	; 1
 572:	91 f4       	brne	.+36     	; 0x598 <__stack+0x99>
			{
				//Si le caractère dernier après le DLE est ETX
				if(c == ETX)
 574:	03 30       	cpi	r16, 0x03	; 3
 576:	81 f4       	brne	.+32     	; 0x598 <__stack+0x99>
				{
					//Démarrage du timer1 avec valeur de timeout TIMEOUT_MS
					start_timer1(TIMEOUT_MS);
 578:	80 e1       	ldi	r24, 0x10	; 16
 57a:	97 e2       	ldi	r25, 0x27	; 39
 57c:	7e d1       	rcall	.+764    	; 0x87a <start_timer1>
					//Attend de recevoir un caractère sur le port série
					c = getchar_usart();
 57e:	0d de       	rcall	.-998    	; 0x19a <getchar_usart>
 580:	18 2f       	mov	r17, r24
					//Arret du timeout
					stop_timer1();
 582:	87 d1       	rcall	.+782    	; 0x892 <stop_timer1>
					
					//Si le timeout n'a pas expiré
					if(flag_timer1 == FALSE)
 584:	80 91 09 01 	lds	r24, 0x0109
 588:	81 30       	cpi	r24, 0x01	; 1
 58a:	31 f4       	brne	.+12     	; 0x598 <__stack+0x99>
					{
						//Si le bcc reçu est égale au bcc calculé
						if(c == bcc)
 58c:	1e 15       	cp	r17, r14
 58e:	21 f4       	brne	.+8      	; 0x598 <__stack+0x99>
							//Envoi d'un DLE
							putchar_usart(DLE);
 590:	80 e1       	ldi	r24, 0x10	; 16
 592:	fb dd       	rcall	.-1034   	; 0x18a <putchar_usart>
 594:	91 e0       	ldi	r25, 0x01	; 1
 596:	03 c0       	rjmp	.+6      	; 0x59e <__stack+0x9f>
		}
		//Si le 1er caractère de la trame n'est pas STX
		else
		{
			//Envoi un NAK
			putchar_usart(NAK);
 598:	85 e1       	ldi	r24, 0x15	; 21
 59a:	f7 dd       	rcall	.-1042   	; 0x18a <putchar_usart>
 59c:	90 e0       	ldi	r25, 0x00	; 0
			flag_error = TRUE;
		}
	//On continue la reception tant que le flag_timer1 ou le flag_error est à TRUE
	}while((flag_timer1 == TRUE) || (flag_error == TRUE));
 59e:	80 91 09 01 	lds	r24, 0x0109
 5a2:	88 23       	and	r24, r24
 5a4:	09 f4       	brne	.+2      	; 0x5a8 <__stack+0xa9>
 5a6:	97 cf       	rjmp	.-210    	; 0x4d6 <get_data_3964r+0x2c>
 5a8:	99 23       	and	r25, r25
 5aa:	09 f4       	brne	.+2      	; 0x5ae <__stack+0xaf>
 5ac:	94 cf       	rjmp	.-216    	; 0x4d6 <get_data_3964r+0x2c>
}
 5ae:	0f 90       	pop	r0
 5b0:	0f 90       	pop	r0
 5b2:	0f 90       	pop	r0
 5b4:	cf 91       	pop	r28
 5b6:	df 91       	pop	r29
 5b8:	1f 91       	pop	r17
 5ba:	0f 91       	pop	r16
 5bc:	ff 90       	pop	r15
 5be:	ef 90       	pop	r14
 5c0:	df 90       	pop	r13
 5c2:	cf 90       	pop	r12
 5c4:	bf 90       	pop	r11
 5c6:	af 90       	pop	r10
 5c8:	9f 90       	pop	r9
 5ca:	08 95       	ret

000005cc <send_data_3964r>:
//			   - lenght => longueur du tableau data[]
//Valeur de retour : - TRANSMISSION_SUCCESS
//					 - TRANSMISSION_FAILED
//					 - RECEPTION_MODE
char send_data_3964r(char data[], unsigned char lenght)
{
 5cc:	cf 92       	push	r12
 5ce:	df 92       	push	r13
 5d0:	ef 92       	push	r14
 5d2:	ff 92       	push	r15
 5d4:	0f 93       	push	r16
 5d6:	1f 93       	push	r17
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
 5dc:	7c 01       	movw	r14, r24
 5de:	06 2f       	mov	r16, r22
	unsigned char bcc, i, c;
	//Initialisation du tableau tab_error_3964r
	memset(tab_error_3964r,0,5);
 5e0:	85 e0       	ldi	r24, 0x05	; 5
 5e2:	eb e0       	ldi	r30, 0x0B	; 11
 5e4:	f1 e0       	ldi	r31, 0x01	; 1
 5e6:	df 01       	movw	r26, r30
 5e8:	1d 92       	st	X+, r1
 5ea:	8a 95       	dec	r24
 5ec:	e9 f7       	brne	.-6      	; 0x5e8 <send_data_3964r+0x1c>

	//Pré-calcul du bcc pour la trame 3964 qui sera envoyée
	bcc = process_bcc_3964r(data, lenght);
 5ee:	c7 01       	movw	r24, r14
 5f0:	3d df       	rcall	.-390    	; 0x46c <process_bcc_3964r>
 5f2:	d8 2e       	mov	r13, r24

	do
	{
		//Initialisation des différents flag
		flag_timer1 = FALSE;
 5f4:	cc 24       	eor	r12, r12
 5f6:	c3 94       	inc	r12
 5f8:	c0 92 09 01 	sts	0x0109, r12
		flag_usart	= FALSE;
 5fc:	c0 92 08 01 	sts	0x0108, r12

		//Envoie du caractère STX
		putchar_usart(STX);
 600:	82 e0       	ldi	r24, 0x02	; 2
 602:	c3 dd       	rcall	.-1146   	; 0x18a <putchar_usart>

		//Démarre le timer avec la valeur de timeout TIMEOUT_MS
		start_timer1(TIMEOUT_MS);
 604:	80 e1       	ldi	r24, 0x10	; 16
 606:	97 e2       	ldi	r25, 0x27	; 39
 608:	38 d1       	rcall	.+624    	; 0x87a <start_timer1>
		//Attend de recevoir un caractère
		//Si on a pas reçu de caractère avant le timeout, flag_timer1 se met à TRUE et on continue l'execution du programme
		c = getchar_usart();
 60a:	c7 dd       	rcall	.-1138   	; 0x19a <getchar_usart>
 60c:	18 2f       	mov	r17, r24
		//On arrete le timer1
		stop_timer1();
 60e:	41 d1       	rcall	.+642    	; 0x892 <stop_timer1>

		//On vérifie le timeout n'a pas été déclenché
		if(flag_timer1 == FALSE)
 610:	80 91 09 01 	lds	r24, 0x0109
 614:	81 30       	cpi	r24, 0x01	; 1
 616:	09 f0       	breq	.+2      	; 0x61a <send_data_3964r+0x4e>
 618:	77 c0       	rjmp	.+238    	; 0x708 <send_data_3964r+0x13c>
		{
			//Si le caractère reçu est un DLE
			if(c == DLE)
 61a:	10 31       	cpi	r17, 0x10	; 16
 61c:	09 f0       	breq	.+2      	; 0x620 <send_data_3964r+0x54>
 61e:	6a c0       	rjmp	.+212    	; 0x6f4 <send_data_3964r+0x128>
			{
				//Activation l'interruption de l'usart en reception
				//Si un caracère est reçu durant l'envoie, flag_usart est mis à TRUE
				ENABLE_RX_INT_USART;
 620:	80 91 c1 00 	lds	r24, 0x00C1
 624:	80 68       	ori	r24, 0x80	; 128
 626:	80 93 c1 00 	sts	0x00C1, r24
 62a:	e7 01       	movw	r28, r14
 62c:	10 e0       	ldi	r17, 0x00	; 0
 62e:	11 c0       	rjmp	.+34     	; 0x652 <send_data_3964r+0x86>
				//On envoie le contenu du tableau data[]
				//En fonction de la longueur donnée en paramètre
				for(i=0; i<lenght; i++)
				{
					//Si on a pas reçu de caractère
					if(flag_usart == FALSE)
 630:	80 91 08 01 	lds	r24, 0x0108
 634:	81 30       	cpi	r24, 0x01	; 1
 636:	79 f4       	brne	.+30     	; 0x656 <send_data_3964r+0x8a>
					{
						//Envoi des caractères du tableau data[]
						putchar_usart(data[i]);
 638:	88 81       	ld	r24, Y
 63a:	a7 dd       	rcall	.-1202   	; 0x18a <putchar_usart>
						//Traitement du double DLE
						if(data[i] == DLE)
 63c:	88 81       	ld	r24, Y
 63e:	80 31       	cpi	r24, 0x10	; 16
 640:	31 f4       	brne	.+12     	; 0x64e <send_data_3964r+0x82>
						{
							//Revérification du flag_usart
							if(flag_usart == FALSE)
 642:	80 91 08 01 	lds	r24, 0x0108
 646:	81 30       	cpi	r24, 0x01	; 1
 648:	31 f4       	brne	.+12     	; 0x656 <send_data_3964r+0x8a>
								//Envoi du 2eme DLE
								putchar_usart(DLE);
 64a:	80 e1       	ldi	r24, 0x10	; 16
 64c:	9e dd       	rcall	.-1220   	; 0x18a <putchar_usart>
				//Si un caracère est reçu durant l'envoie, flag_usart est mis à TRUE
				ENABLE_RX_INT_USART;
				
				//On envoie le contenu du tableau data[]
				//En fonction de la longueur donnée en paramètre
				for(i=0; i<lenght; i++)
 64e:	1f 5f       	subi	r17, 0xFF	; 255
 650:	21 96       	adiw	r28, 0x01	; 1
 652:	10 17       	cp	r17, r16
 654:	68 f3       	brcs	.-38     	; 0x630 <send_data_3964r+0x64>
					else
						break;
				}
				
				//Vérification du flag_usart	
				if(flag_usart == FALSE)
 656:	80 91 08 01 	lds	r24, 0x0108
 65a:	81 30       	cpi	r24, 0x01	; 1
 65c:	79 f5       	brne	.+94     	; 0x6bc <send_data_3964r+0xf0>
				{
					//Envoi du DLE pour signifier la fin des données utiles
					putchar_usart(DLE);
 65e:	80 e1       	ldi	r24, 0x10	; 16
 660:	94 dd       	rcall	.-1240   	; 0x18a <putchar_usart>
					//Vérification du flag_usart
					if(flag_usart == FALSE)
 662:	80 91 08 01 	lds	r24, 0x0108
 666:	81 30       	cpi	r24, 0x01	; 1
 668:	49 f5       	brne	.+82     	; 0x6bc <send_data_3964r+0xf0>
					{
						//Envoi de ETX
						putchar_usart(ETX);
 66a:	83 e0       	ldi	r24, 0x03	; 3
 66c:	8e dd       	rcall	.-1252   	; 0x18a <putchar_usart>
						//Vérification du flag_usart
						if(flag_usart == FALSE)
 66e:	80 91 08 01 	lds	r24, 0x0108
 672:	81 30       	cpi	r24, 0x01	; 1
 674:	19 f5       	brne	.+70     	; 0x6bc <send_data_3964r+0xf0>
						{
							//Désactivation de l'interruption de reception usart
							DISABLE_RX_INT_USART;
 676:	80 91 c1 00 	lds	r24, 0x00C1
 67a:	8f 77       	andi	r24, 0x7F	; 127
 67c:	80 93 c1 00 	sts	0x00C1, r24
							
							//Envoi du bcc
							putchar_usart(bcc);
 680:	8d 2d       	mov	r24, r13
 682:	83 dd       	rcall	.-1274   	; 0x18a <putchar_usart>

							//Vérification du flag_usart
							if(flag_usart == FALSE)
 684:	80 91 08 01 	lds	r24, 0x0108
 688:	81 30       	cpi	r24, 0x01	; 1
 68a:	e9 f4       	brne	.+58     	; 0x6c6 <send_data_3964r+0xfa>
							{
								//Démarrage du timer1 avec timeout de valeur TIMEOUT_MS
								start_timer1(TIMEOUT_MS);
 68c:	80 e1       	ldi	r24, 0x10	; 16
 68e:	97 e2       	ldi	r25, 0x27	; 39
 690:	f4 d0       	rcall	.+488    	; 0x87a <start_timer1>
								//Attend la reception d'un caractère
								c = getchar_usart();
 692:	83 dd       	rcall	.-1274   	; 0x19a <getchar_usart>
 694:	18 2f       	mov	r17, r24
								//Arrete le timer1
								stop_timer1();
 696:	fd d0       	rcall	.+506    	; 0x892 <stop_timer1>

								//Vérification que le timeout n'a pas expiré
								if(flag_timer1 == FALSE)
 698:	80 91 09 01 	lds	r24, 0x0109
 69c:	81 30       	cpi	r24, 0x01	; 1
 69e:	41 f4       	brne	.+16     	; 0x6b0 <send_data_3964r+0xe4>
								{
									//Si on a reçu un caractère différent de DLE
									if(c != DLE)
 6a0:	10 31       	cpi	r17, 0x10	; 16
 6a2:	b1 f0       	breq	.+44     	; 0x6d0 <send_data_3964r+0x104>
										//Incrémentation du nombre d'erreurs
										tab_error_3964r[1]++;
 6a4:	80 91 0c 01 	lds	r24, 0x010C
 6a8:	8f 5f       	subi	r24, 0xFF	; 255
 6aa:	80 93 0c 01 	sts	0x010C, r24
 6ae:	10 c0       	rjmp	.+32     	; 0x6d0 <send_data_3964r+0x104>
								}
								else
									//Incrémentation du nombre d'erreurs
									tab_error_3964r[2]++;
 6b0:	80 91 0d 01 	lds	r24, 0x010D
 6b4:	8f 5f       	subi	r24, 0xFF	; 255
 6b6:	80 93 0d 01 	sts	0x010D, r24
 6ba:	0a c0       	rjmp	.+20     	; 0x6d0 <send_data_3964r+0x104>
					}
					//Si interruption par l'usart
					else
					{
						//Désactivation de l'interruption de reception usart
						DISABLE_RX_INT_USART;
 6bc:	80 91 c1 00 	lds	r24, 0x00C1
 6c0:	8f 77       	andi	r24, 0x7F	; 127
 6c2:	80 93 c1 00 	sts	0x00C1, r24
						//Incrémentation du nombre d'erreurs
						tab_error_3964r[3]++;
 6c6:	80 91 0e 01 	lds	r24, 0x010E
 6ca:	8f 5f       	subi	r24, 0xFF	; 255
 6cc:	80 93 0e 01 	sts	0x010E, r24
char sum_error_3964r(void)
{
	unsigned char sum, i;

	for(i=0, sum=0; i<NB_ERRORS; i++)
		sum += tab_error_3964r[i];
 6d0:	80 91 0c 01 	lds	r24, 0x010C
 6d4:	90 91 0b 01 	lds	r25, 0x010B
 6d8:	89 0f       	add	r24, r25
 6da:	90 91 0d 01 	lds	r25, 0x010D
 6de:	89 0f       	add	r24, r25
 6e0:	90 91 0e 01 	lds	r25, 0x010E
 6e4:	89 0f       	add	r24, r25
		else
			//Incrémentation du nombre d'erreurs
			tab_error_3964r[4]++;

		//Si la somme des erreurs est supérieur au seuil max
		if(sum_error_3964r() == MAX_ERRORS)
 6e6:	90 91 0f 01 	lds	r25, 0x010F
 6ea:	89 0f       	add	r24, r25
 6ec:	86 30       	cpi	r24, 0x06	; 6
 6ee:	91 f4       	brne	.+36     	; 0x714 <send_data_3964r+0x148>
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	1b c0       	rjmp	.+54     	; 0x72a <send_data_3964r+0x15e>
			}
			//Si le 1er caractère reçu n'est pas un DLE
			else
			{
				//Si le caractère est un STX
				if(c == STX)
 6f4:	12 30       	cpi	r17, 0x02	; 2
 6f6:	11 f4       	brne	.+4      	; 0x6fc <send_data_3964r+0x130>
 6f8:	82 e0       	ldi	r24, 0x02	; 2
 6fa:	17 c0       	rjmp	.+46     	; 0x72a <send_data_3964r+0x15e>
						flag_timer1 = TRUE;
				}
				//Si le 1er caractère est différent de DLE et STX
				else
					//Incrémentation du nombre d'erreurs
					tab_error_3964r[0]++;
 6fc:	80 91 0b 01 	lds	r24, 0x010B
 700:	8f 5f       	subi	r24, 0xFF	; 255
 702:	80 93 0b 01 	sts	0x010B, r24
 706:	e4 cf       	rjmp	.-56     	; 0x6d0 <send_data_3964r+0x104>
			}
		}
		//Si le périphérique n'a pas répondu au STX
		else
			//Incrémentation du nombre d'erreurs
			tab_error_3964r[4]++;
 708:	80 91 0f 01 	lds	r24, 0x010F
 70c:	8f 5f       	subi	r24, 0xFF	; 255
 70e:	80 93 0f 01 	sts	0x010F, r24
 712:	de cf       	rjmp	.-68     	; 0x6d0 <send_data_3964r+0x104>
		if(sum_error_3964r() == MAX_ERRORS)
			//retourne une erreur de transmission
			return TRANSMISSION_FAILED;

	//On boucle tant que flag_timer1 ou flag_usart est a TRUE
	}while((flag_timer1 == TRUE) || (flag_usart == TRUE));
 714:	80 91 09 01 	lds	r24, 0x0109
 718:	88 23       	and	r24, r24
 71a:	09 f4       	brne	.+2      	; 0x71e <send_data_3964r+0x152>
 71c:	6d cf       	rjmp	.-294    	; 0x5f8 <send_data_3964r+0x2c>
 71e:	80 91 08 01 	lds	r24, 0x0108
 722:	88 23       	and	r24, r24
 724:	09 f4       	brne	.+2      	; 0x728 <send_data_3964r+0x15c>
 726:	68 cf       	rjmp	.-304    	; 0x5f8 <send_data_3964r+0x2c>
 728:	80 e0       	ldi	r24, 0x00	; 0
	
	//la transmission s'est bien déroulée
	return TRANSMISSION_SUCCESS;
}
 72a:	df 91       	pop	r29
 72c:	cf 91       	pop	r28
 72e:	1f 91       	pop	r17
 730:	0f 91       	pop	r16
 732:	ff 90       	pop	r15
 734:	ef 90       	pop	r14
 736:	df 90       	pop	r13
 738:	cf 90       	pop	r12
 73a:	08 95       	ret

0000073c <init_3964r>:
unsigned char tab_error_3964r[NB_ERRORS];

//Initialise les différents composants pour la communication en 3964r
void init_3964r(void)
{
	init_usart(MYUBRR);
 73c:	87 e6       	ldi	r24, 0x67	; 103
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	11 dd       	rcall	.-1502   	; 0x164 <init_usart>
	init_timer1();
 742:	8d d0       	rcall	.+282    	; 0x85e <init_timer1>

	//memset permet d'initialiser un tableau avec un valeur par default
	//On place la valeur 0 dans les 5 cellules de tab_error_3964r
	memset(tab_error_3964r,0,5);
 744:	85 e0       	ldi	r24, 0x05	; 5
 746:	eb e0       	ldi	r30, 0x0B	; 11
 748:	f1 e0       	ldi	r31, 0x01	; 1
 74a:	df 01       	movw	r26, r30
 74c:	1d 92       	st	X+, r1
 74e:	8a 95       	dec	r24
 750:	e9 f7       	brne	.-6      	; 0x74c <init_3964r+0x10>
}
 752:	08 95       	ret

00000754 <init_external_interrupt>:

//Configuration des interruptions externe INT0 et INT1
void init_external_interrupt(void)
{
	//External INT0 INTT1 (Rising edge)
	EICRA |= (1<<ISC11) | (1<<ISC10) | (1<<ISC01) | (1<<ISC00);
 754:	e9 e6       	ldi	r30, 0x69	; 105
 756:	f0 e0       	ldi	r31, 0x00	; 0
 758:	80 81       	ld	r24, Z
 75a:	8f 60       	ori	r24, 0x0F	; 15
 75c:	80 83       	st	Z, r24
	EIMSK |= (1<<INT1) | (1<<INT0);
 75e:	8d b3       	in	r24, 0x1d	; 29
 760:	83 60       	ori	r24, 0x03	; 3
 762:	8d bb       	out	0x1d, r24	; 29

	nb_impuls_wheel1 = 0;
 764:	10 92 13 01 	sts	0x0113, r1
 768:	10 92 12 01 	sts	0x0112, r1
	nb_impuls_wheel2 = 0;
 76c:	10 92 11 01 	sts	0x0111, r1
 770:	10 92 10 01 	sts	0x0110, r1
}
 774:	08 95       	ret

00000776 <get_position1>:

//Retourne le nombre d'impulsion du ballast 1
unsigned int get_position1(void)
{
	return nb_impuls_wheel1;
 776:	20 91 12 01 	lds	r18, 0x0112
 77a:	30 91 13 01 	lds	r19, 0x0113
}
 77e:	c9 01       	movw	r24, r18
 780:	08 95       	ret

00000782 <get_position2>:

//Retourne le nombre d'impulsion du ballast 2
unsigned int get_position2(void)
{
	return nb_impuls_wheel2;
 782:	20 91 10 01 	lds	r18, 0x0110
 786:	30 91 11 01 	lds	r19, 0x0111
}
 78a:	c9 01       	movw	r24, r18
 78c:	08 95       	ret

0000078e <__vector_2>:
	putchar_usart(0x0a);
#endif
}

ISR(INT1_vect)
{
 78e:	1f 92       	push	r1
 790:	0f 92       	push	r0
 792:	0f b6       	in	r0, 0x3f	; 63
 794:	0f 92       	push	r0
 796:	11 24       	eor	r1, r1
 798:	2f 93       	push	r18
 79a:	3f 93       	push	r19
 79c:	4f 93       	push	r20
 79e:	5f 93       	push	r21
 7a0:	6f 93       	push	r22
 7a2:	7f 93       	push	r23
 7a4:	8f 93       	push	r24
 7a6:	9f 93       	push	r25
 7a8:	af 93       	push	r26
 7aa:	bf 93       	push	r27
 7ac:	ef 93       	push	r30
 7ae:	ff 93       	push	r31
	if(get_rotation_motor2() == COUNTERCLOCKWISE)
 7b0:	9f dd       	rcall	.-1218   	; 0x2f0 <get_rotation_motor2>
 7b2:	88 23       	and	r24, r24
 7b4:	31 f4       	brne	.+12     	; 0x7c2 <__vector_2+0x34>
		nb_impuls_wheel2++;
 7b6:	80 91 10 01 	lds	r24, 0x0110
 7ba:	90 91 11 01 	lds	r25, 0x0111
 7be:	01 96       	adiw	r24, 0x01	; 1
 7c0:	05 c0       	rjmp	.+10     	; 0x7cc <__vector_2+0x3e>
	else
		nb_impuls_wheel2--;
 7c2:	80 91 10 01 	lds	r24, 0x0110
 7c6:	90 91 11 01 	lds	r25, 0x0111
 7ca:	01 97       	sbiw	r24, 0x01	; 1
 7cc:	90 93 11 01 	sts	0x0111, r25
 7d0:	80 93 10 01 	sts	0x0110, r24
	puts_usart("Position ballast 2 : ");
	puts_usart(tab_debug);
	putchar_usart(0x0d);
	putchar_usart(0x0a);
#endif
}
 7d4:	ff 91       	pop	r31
 7d6:	ef 91       	pop	r30
 7d8:	bf 91       	pop	r27
 7da:	af 91       	pop	r26
 7dc:	9f 91       	pop	r25
 7de:	8f 91       	pop	r24
 7e0:	7f 91       	pop	r23
 7e2:	6f 91       	pop	r22
 7e4:	5f 91       	pop	r21
 7e6:	4f 91       	pop	r20
 7e8:	3f 91       	pop	r19
 7ea:	2f 91       	pop	r18
 7ec:	0f 90       	pop	r0
 7ee:	0f be       	out	0x3f, r0	; 63
 7f0:	0f 90       	pop	r0
 7f2:	1f 90       	pop	r1
 7f4:	18 95       	reti

000007f6 <__vector_1>:
	return nb_impuls_wheel2;
}


ISR(INT0_vect)
{
 7f6:	1f 92       	push	r1
 7f8:	0f 92       	push	r0
 7fa:	0f b6       	in	r0, 0x3f	; 63
 7fc:	0f 92       	push	r0
 7fe:	11 24       	eor	r1, r1
 800:	2f 93       	push	r18
 802:	3f 93       	push	r19
 804:	4f 93       	push	r20
 806:	5f 93       	push	r21
 808:	6f 93       	push	r22
 80a:	7f 93       	push	r23
 80c:	8f 93       	push	r24
 80e:	9f 93       	push	r25
 810:	af 93       	push	r26
 812:	bf 93       	push	r27
 814:	ef 93       	push	r30
 816:	ff 93       	push	r31
	if(get_rotation_motor1() == COUNTERCLOCKWISE)
 818:	63 dd       	rcall	.-1338   	; 0x2e0 <get_rotation_motor1>
 81a:	88 23       	and	r24, r24
 81c:	31 f4       	brne	.+12     	; 0x82a <__vector_1+0x34>
		nb_impuls_wheel1++;
 81e:	80 91 12 01 	lds	r24, 0x0112
 822:	90 91 13 01 	lds	r25, 0x0113
 826:	01 96       	adiw	r24, 0x01	; 1
 828:	05 c0       	rjmp	.+10     	; 0x834 <__vector_1+0x3e>
	else
		nb_impuls_wheel1--;
 82a:	80 91 12 01 	lds	r24, 0x0112
 82e:	90 91 13 01 	lds	r25, 0x0113
 832:	01 97       	sbiw	r24, 0x01	; 1
 834:	90 93 13 01 	sts	0x0113, r25
 838:	80 93 12 01 	sts	0x0112, r24
	puts_usart("Position ballast 1 : ");
	puts_usart(tab_debug);
	putchar_usart(0x0d);
	putchar_usart(0x0a);
#endif
}
 83c:	ff 91       	pop	r31
 83e:	ef 91       	pop	r30
 840:	bf 91       	pop	r27
 842:	af 91       	pop	r26
 844:	9f 91       	pop	r25
 846:	8f 91       	pop	r24
 848:	7f 91       	pop	r23
 84a:	6f 91       	pop	r22
 84c:	5f 91       	pop	r21
 84e:	4f 91       	pop	r20
 850:	3f 91       	pop	r19
 852:	2f 91       	pop	r18
 854:	0f 90       	pop	r0
 856:	0f be       	out	0x3f, r0	; 63
 858:	0f 90       	pop	r0
 85a:	1f 90       	pop	r1
 85c:	18 95       	reti

0000085e <init_timer1>:

#include "timer1.h"

void init_timer1(void)
{
	TCCR1B |= (1<<WGM12);	//CTC
 85e:	e1 e8       	ldi	r30, 0x81	; 129
 860:	f0 e0       	ldi	r31, 0x00	; 0
 862:	80 81       	ld	r24, Z
 864:	88 60       	ori	r24, 0x08	; 8
 866:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A);	//Enable OCIE1A
 868:	ef e6       	ldi	r30, 0x6F	; 111
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	80 81       	ld	r24, Z
 86e:	82 60       	ori	r24, 0x02	; 2
 870:	80 83       	st	Z, r24

	flag_timer1 = FALSE;
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	80 93 09 01 	sts	0x0109, r24
}
 878:	08 95       	ret

0000087a <start_timer1>:

//Prescaler 8 => 65536ms MAX
void start_timer1(unsigned int time)
{
	cli();
 87a:	f8 94       	cli
	OCR1A = time;
 87c:	90 93 89 00 	sts	0x0089, r25
 880:	80 93 88 00 	sts	0x0088, r24
	sei();
 884:	78 94       	sei

	TCCR1B |= (1<<CS11);  //start - Prescaler 8
 886:	e1 e8       	ldi	r30, 0x81	; 129
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	80 81       	ld	r24, Z
 88c:	82 60       	ori	r24, 0x02	; 2
 88e:	80 83       	st	Z, r24
	//TCCR1B |= (1<<CS10) | (1<<CS12);  //start - Prescaler 1024
}
 890:	08 95       	ret

00000892 <stop_timer1>:

void stop_timer1(void)
{
	TCCR1B &= 0b11111101;
 892:	e1 e8       	ldi	r30, 0x81	; 129
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	80 81       	ld	r24, Z
 898:	8d 7f       	andi	r24, 0xFD	; 253
 89a:	80 83       	st	Z, r24
	//TCCR1B &= 0b11111010;

	//Reset timer
	//Obligation d'arreter les interruptions car le timer est un 16bits => 2 instructions (voir datasheet)
	cli();
 89c:	f8 94       	cli
	TCNT1 = 0;
 89e:	10 92 85 00 	sts	0x0085, r1
 8a2:	10 92 84 00 	sts	0x0084, r1
	sei();
 8a6:	78 94       	sei
}
 8a8:	08 95       	ret

000008aa <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 8aa:	1f 92       	push	r1
 8ac:	0f 92       	push	r0
 8ae:	0f b6       	in	r0, 0x3f	; 63
 8b0:	0f 92       	push	r0
 8b2:	11 24       	eor	r1, r1
	flag_timer1 = TRUE;	//Force à quitter la boucle de getchar_usart();
 8b4:	10 92 09 01 	sts	0x0109, r1
}
 8b8:	0f 90       	pop	r0
 8ba:	0f be       	out	0x3f, r0	; 63
 8bc:	0f 90       	pop	r0
 8be:	1f 90       	pop	r1
 8c0:	18 95       	reti

000008c2 <init_watchdog>:

volatile unsigned int timeout = TIMEOUT_RESET;

void init_watchdog(void)
{
	cli();
 8c2:	f8 94       	cli

	//reset watchdog
	wdt_reset();
 8c4:	a8 95       	wdr
	//set up WDT Interrupt Mode
	WDTCSR = (1<<WDCE)|(1<<WDE);
 8c6:	e0 e6       	ldi	r30, 0x60	; 96
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	88 e1       	ldi	r24, 0x18	; 24
 8cc:	80 83       	st	Z, r24
	//Start watchdog timer with 8s prescaller
	WDTCSR = (1<<WDIE)|(1<<WDP3)|(1<<WDP0);
 8ce:	81 e6       	ldi	r24, 0x61	; 97
 8d0:	80 83       	st	Z, r24

	sei();
 8d2:	78 94       	sei
}
 8d4:	08 95       	ret

000008d6 <__vector_6>:

ISR(WDT_vect)
{
 8d6:	1f 92       	push	r1
 8d8:	0f 92       	push	r0
 8da:	0f b6       	in	r0, 0x3f	; 63
 8dc:	0f 92       	push	r0
 8de:	11 24       	eor	r1, r1
 8e0:	8f 93       	push	r24
 8e2:	9f 93       	push	r25
	cli();
 8e4:	f8 94       	cli
	if(timeout != 0)
 8e6:	80 91 05 01 	lds	r24, 0x0105
 8ea:	90 91 06 01 	lds	r25, 0x0106
 8ee:	89 2b       	or	r24, r25
 8f0:	89 f0       	breq	.+34     	; 0x914 <__vector_6+0x3e>
	{
		//reset watchdog
		wdt_reset();
 8f2:	a8 95       	wdr
		//set up WDT Interrupt Mode
		WDTCSR = (1<<WDCE)|(1<<WDE);
 8f4:	88 e1       	ldi	r24, 0x18	; 24
 8f6:	80 93 60 00 	sts	0x0060, r24
		//Start watchdog timer with 8s prescaller
		WDTCSR = (1<<WDIE)|(1<<WDP3)|(1<<WDP0);
 8fa:	81 e6       	ldi	r24, 0x61	; 97
 8fc:	80 93 60 00 	sts	0x0060, r24
		
		timeout--;
 900:	80 91 05 01 	lds	r24, 0x0105
 904:	90 91 06 01 	lds	r25, 0x0106
 908:	01 97       	sbiw	r24, 0x01	; 1
 90a:	90 93 06 01 	sts	0x0106, r25
 90e:	80 93 05 01 	sts	0x0105, r24
 912:	07 c0       	rjmp	.+14     	; 0x922 <__vector_6+0x4c>
	}
	else
	{
		//reset watchdog
		wdt_reset();
 914:	a8 95       	wdr
		//set up WDT Reset Mode
		WDTCSR = (1<<WDCE)|(1<<WDE);
 916:	88 e1       	ldi	r24, 0x18	; 24
 918:	80 93 60 00 	sts	0x0060, r24
		//Reset Mode
		WDTCSR = (1<<WDE);
 91c:	88 e0       	ldi	r24, 0x08	; 8
 91e:	80 93 60 00 	sts	0x0060, r24
	}
	sei();
 922:	78 94       	sei
}
 924:	9f 91       	pop	r25
 926:	8f 91       	pop	r24
 928:	0f 90       	pop	r0
 92a:	0f be       	out	0x3f, r0	; 63
 92c:	0f 90       	pop	r0
 92e:	1f 90       	pop	r1
 930:	18 95       	reti

00000932 <__mulsi3>:
 932:	62 9f       	mul	r22, r18
 934:	d0 01       	movw	r26, r0
 936:	73 9f       	mul	r23, r19
 938:	f0 01       	movw	r30, r0
 93a:	82 9f       	mul	r24, r18
 93c:	e0 0d       	add	r30, r0
 93e:	f1 1d       	adc	r31, r1
 940:	64 9f       	mul	r22, r20
 942:	e0 0d       	add	r30, r0
 944:	f1 1d       	adc	r31, r1
 946:	92 9f       	mul	r25, r18
 948:	f0 0d       	add	r31, r0
 94a:	83 9f       	mul	r24, r19
 94c:	f0 0d       	add	r31, r0
 94e:	74 9f       	mul	r23, r20
 950:	f0 0d       	add	r31, r0
 952:	65 9f       	mul	r22, r21
 954:	f0 0d       	add	r31, r0
 956:	99 27       	eor	r25, r25
 958:	72 9f       	mul	r23, r18
 95a:	b0 0d       	add	r27, r0
 95c:	e1 1d       	adc	r30, r1
 95e:	f9 1f       	adc	r31, r25
 960:	63 9f       	mul	r22, r19
 962:	b0 0d       	add	r27, r0
 964:	e1 1d       	adc	r30, r1
 966:	f9 1f       	adc	r31, r25
 968:	bd 01       	movw	r22, r26
 96a:	cf 01       	movw	r24, r30
 96c:	11 24       	eor	r1, r1
 96e:	08 95       	ret

00000970 <__udivmodsi4>:
 970:	a1 e2       	ldi	r26, 0x21	; 33
 972:	1a 2e       	mov	r1, r26
 974:	aa 1b       	sub	r26, r26
 976:	bb 1b       	sub	r27, r27
 978:	fd 01       	movw	r30, r26
 97a:	0d c0       	rjmp	.+26     	; 0x996 <__udivmodsi4_ep>

0000097c <__udivmodsi4_loop>:
 97c:	aa 1f       	adc	r26, r26
 97e:	bb 1f       	adc	r27, r27
 980:	ee 1f       	adc	r30, r30
 982:	ff 1f       	adc	r31, r31
 984:	a2 17       	cp	r26, r18
 986:	b3 07       	cpc	r27, r19
 988:	e4 07       	cpc	r30, r20
 98a:	f5 07       	cpc	r31, r21
 98c:	20 f0       	brcs	.+8      	; 0x996 <__udivmodsi4_ep>
 98e:	a2 1b       	sub	r26, r18
 990:	b3 0b       	sbc	r27, r19
 992:	e4 0b       	sbc	r30, r20
 994:	f5 0b       	sbc	r31, r21

00000996 <__udivmodsi4_ep>:
 996:	66 1f       	adc	r22, r22
 998:	77 1f       	adc	r23, r23
 99a:	88 1f       	adc	r24, r24
 99c:	99 1f       	adc	r25, r25
 99e:	1a 94       	dec	r1
 9a0:	69 f7       	brne	.-38     	; 0x97c <__udivmodsi4_loop>
 9a2:	60 95       	com	r22
 9a4:	70 95       	com	r23
 9a6:	80 95       	com	r24
 9a8:	90 95       	com	r25
 9aa:	9b 01       	movw	r18, r22
 9ac:	ac 01       	movw	r20, r24
 9ae:	bd 01       	movw	r22, r26
 9b0:	cf 01       	movw	r24, r30
 9b2:	08 95       	ret

000009b4 <memset>:
 9b4:	dc 01       	movw	r26, r24
 9b6:	01 c0       	rjmp	.+2      	; 0x9ba <memset+0x6>
 9b8:	6d 93       	st	X+, r22
 9ba:	41 50       	subi	r20, 0x01	; 1
 9bc:	50 40       	sbci	r21, 0x00	; 0
 9be:	e0 f7       	brcc	.-8      	; 0x9b8 <memset+0x4>
 9c0:	08 95       	ret

000009c2 <_exit>:
 9c2:	f8 94       	cli

000009c4 <__stop_program>:
 9c4:	ff cf       	rjmp	.-2      	; 0x9c4 <__stop_program>
